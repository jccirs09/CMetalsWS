@implements IDisposable
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Routing

@inject NavigationManager NavigationManager
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthStateProvider

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="auth" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Lock">Auth Required</MudNavLink>
    <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>

    @if (canUsers || canBranches || canRoles || canMachines || canTrucks)
    {
        <MudNavGroup text="Admin" Icon="@Icons.Material.Filled.AdminPanelSettings" Title="System Panel">
            @if (canUsers)
            {
                <MudNavLink Href="/users" Icon="@Icons.Material.Filled.Person">Users</MudNavLink>
            }
            @if (canBranches)
            {
                <MudNavLink Href="/branches" Icon="@Icons.Material.Filled.LocationCity">Branches</MudNavLink>
            }
            @if (canRoles)
            {
                <MudNavLink Href="/roles" Icon="@Icons.Material.Filled.Security">Roles</MudNavLink>
            }
            @if (canMachines)
            {
                <MudNavLink Href="/machines" Icon="@Icons.Material.Filled.Build">Machines</MudNavLink>
            }
            @if (canTrucks)
            {
                <MudNavLink Href="/trucks" Icon="@Icons.Material.Filled.LocalShipping">Trucks</MudNavLink>
            }
        </MudNavGroup>
    }

    @if (canWorkOrders || canPickingLists)
    {
        <MudNavGroup text="Operations" Icon="@Icons.Material.Filled.DashboardCustomize" Title="Operations">
            @if (canWorkOrders)
            {
                <MudNavLink Href="/operations/workorders" Icon="@Icons.Material.Filled.Assignment">Work Orders</MudNavLink>
                <MudNavLink Href="/operations/inventory" Icon="@Icons.Material.Filled.Inventory2">Inventory</MudNavLink>
            }
            @if (canPickingLists)
            {
                <MudNavLink Href="/picking-lists" Icon="@Icons.Material.Filled.Inventory2">Picking Lists</MudNavLink>
                <MudNavLink Href="/picking-lists/upload" Icon="@Icons.Material.Filled.Inventory2">Upload Picking List</MudNavLink>
                <MudNavLink Href="/operations/item-relations" Icon="@Icons.Material.Filled.Link">Item Relationships</MudNavLink>
            }
        </MudNavGroup>
    }

    @if (canWorkOrders)
    {
        <MudNavGroup text="Schedule" Icon="@Icons.Material.Filled.EventNote" Title="Scheduling">
            <MudNavLink Href="/schedule/ctl" Icon="@Icons.Material.Filled.CalendarToday">CTL</MudNavLink>
            <MudNavLink Href="/schedule/slitter" Icon="@Icons.Material.Filled.CalendarViewDay">Slitter</MudNavLink>
            <MudNavLink Href="/schedule/pulling" Icon="@Icons.Material.Filled.PanTool">Pulling</MudNavLink>
            <MudNavLink Href="/schedule/loads" Icon="@Icons.Material.Filled.LocalShipping">Loads</MudNavLink>
            <MudNavLink Href="/routes" Icon="@Icons.Material.Filled.Route">Routes</MudNavLink>
        </MudNavGroup>
    }

    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="Account/Manage" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">@context.User.Identity?.Name</MudNavLink>
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="mud-nav-link mud-ripple">
                    <MudIcon Icon="@Icons.Material.Filled.Logout" Color="Color.Info" Class="mr-3"></MudIcon> Logout
                </button>
            </form>
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="Account/Login" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Password">Login</MudNavLink>
        </NotAuthorized>
    </AuthorizeView>
</MudNavMenu>

@code {
    private string? currentUrl;

    // permission flags
    private bool canUsers;
    private bool canBranches;
    private bool canRoles;
    private bool canMachines;
    private bool canTrucks;
    private bool canWorkOrders;
    private bool canPickingLists;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        await ComputePermissionsAsync();
    }

    private async Task ComputePermissionsAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;

        canUsers = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.Users.View)).Succeeded;
        canBranches = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.Branches.View)).Succeeded;
        canRoles = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.Roles.View)).Succeeded;
        canMachines = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.Machines.View)).Succeeded;
        canTrucks = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.Trucks.View)).Succeeded;
        canWorkOrders = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.WorkOrders.View)).Succeeded;
        canPickingLists = (await AuthorizationService.AuthorizeAsync(user, null, Permissions.PickingLists.View)).Succeeded;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        await ComputePermissionsAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}