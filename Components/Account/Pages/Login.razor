@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CMetalsWS.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudGrid Justify="Justify.Center" Class="mt-12">
    <MudItem xs="12" sm="8" md="4">
        <MudPaper Class="pa-4">
            <div class="d-flex justify-center mb-4">
                <img src="https://www.cmetals.com/wp-content/uploads/2023/01/New-Cascadia-Metals-Logo-2022.png" alt="Cascadia Metals Logo" style="max-height: 60px;" />
            </div>
            <MudText Typo="Typo.h5" GutterBottom="true" Align="Align.Center">Log in</MudText>

            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                    Label="Email" Placeholder="name@example.com"
                                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })"
                                    Class="mb-4" />

                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                    Label="Password" InputType="InputType.Password" Placeholder="password"
                                    UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })"
                                    Class="mb-4" />

                <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe" Class="mb-4">Remember me</MudStaticCheckBox>

                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
