@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CMetalsWS.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    .left-panel {
        background-color: #009A4D; /* Green color from logo */
        color: white;
    }
</style>

<MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height: 80vh;">
    <MudItem xs="12" sm="10" md="8">
        <MudPaper Elevation="3">
            <MudGrid Spacing="0">
                <MudItem xs="12" md="5" Class="left-panel d-flex flex-column justify-center align-center pa-4">
                    <MudText Typo="Typo.h4" GutterBottom="true">Welcome Back!</MudText>
                    <MudText Align="Align.Center">To keep connected with us please login with your personal info.</MudText>
                </MudItem>
                <MudItem xs="12" md="7">
                    <div class="pa-8">
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                            <MudStack Spacing="3">
                                <div class="d-flex justify-center mb-4">
                                    <img src="https://www.cmetals.com/wp-content/uploads/2023/01/New-Cascadia-Metals-Logo-2022.png" alt="Cascadia Metals Logo" style="max-height: 50px;" />
                                </div>
                                <MudText Typo="Typo.h5" GutterBottom="true">Login</MudText>
                                <StatusMessage Message="@errorMessage" />

                                <MudTextField @bind-Value="Input.Email"
                                              For="@(() => Input.Email)"
                                              Label="Email"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Email"
                                              UserAttributes="@(new() { { "autocomplete", "username" } })" />

                                <MudTextField @bind-Value="Input.Password"
                                              For="@(() => Input.Password)"
                                              Label="Password"
                                              Variant="Variant.Outlined"
                                              InputType="@(isPasswordVisible ? InputType.Text : InputType.Password)"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@(isPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                              OnAdornmentClick="() => isPasswordVisible = !isPasswordVisible"
                                              UserAttributes="@(new() { { "autocomplete", "current-password" } })" />

                                <MudCheckBox @bind-Value="Input.RememberMe" For="@(() => Input.RememberMe)" Label="Remember me?" Color="Color.Primary"></MudCheckBox>

                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">Log In</MudButton>
                            </MudStack>
                        </EditForm>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;
    private bool isPasswordVisible;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel? Input { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        var result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
