@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor

@inject IChatService ChatService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@if (!IsOpen)
{
    <MudFab Class="chat-fab" Color="Color.Primary" Icon="@Icons.Material.Filled.Chat" OnClick="@(()=> IsOpen = true)" />
}
@if (IsOpen)
{
  <div class="chat-float">
    <MudPaper Class="chat" Elevation="6">
    <!-- Header -->
    <header class="chat__header">
        <MudAvatar Class="mr-2" Size="Size.Medium" Src="@(_selectedUser != null ? "https://i.pravatar.cc/72?img=32" : "https://i.pravatar.cc/72?img=33")" />
        <div class="chat__meta">
            <div class="chat__name">
                @if (_selectedUser != null)
                {
                    @_selectedUser.UserName
                }
                else if (_selectedGroup != null)
                {
                    @_selectedGroup.Name
                }
                else
                {
                    <text>Select a contact</text>
                }
            </div>
            <div class="chat__status">Active now</div>
        </div>
        <div class="ml-auto chat__actions">
            <MudIconButton Icon="@Icons.Material.Filled.Call" Color="Color.Default" />
            <MudIconButton Icon="@Icons.Material.Filled.Videocam" Color="Color.Default" />
            <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Default" />
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="@(()=> IsOpen = false)" />
        </div>
    </header>

    <div style="display: flex; flex: 1; overflow: hidden;">
        <div style="width: 150px; border-right: 1px solid var(--divider); overflow-y: auto;">
            <MudList T="ApplicationUser" Clickable="true">
                <MudListSubheader>Users</MudListSubheader>
                @foreach (var user in _users.Where(u => u.Id != _currentUserId))
                {
                    <MudListItem T="ApplicationUser" OnClick="() => SelectUser(user)">
                        @user.UserName
                    </MudListItem>
                }
            </MudList>
            <MudList T="ChatGroup" Clickable="true">
                <MudListSubheader>Groups</MudListSubheader>
                @foreach (var group in _groups)
                {
                    <MudListItem T="ChatGroup" OnClick="() => SelectGroup(group)">
                        @group.Name
                    </MudListItem>
                }
            </MudList>
        </div>
        <div style="flex: 1; display: flex; flex-direction: column; overflow: hidden;">
            <!-- Messages -->
            <div class="chat__messages" @ref="_scrollArea">
                <div class="day-divider"><span>Today</span></div>

                @foreach (var m in _messages)
                {
                    var isOutgoing = m.SenderId == _currentUserId;
                    var dir = isOutgoing ? "out" : "in";
                    <div class="message @dir">
                        @if (!isOutgoing)
                        {
                            <MudAvatar Class="message__avatar" Size="Size.Small" />
                        }
                        <div>
                            <div class="bubble">@m.Content</div>
                            <div class="meta-row">
                                <span class="time">@m.Timestamp.ToLocalTime().ToString("h:mm tt")</span>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Composer -->
            <EditForm Model="this" OnValidSubmit="SendMessageAsync">
                <div class="composer">
                    <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Class="btn" />
                    <MudTextField @bind-Value="_draft" Placeholder="Type a message" Class="input" Lines="1" Immediate="true" OnKeyDown="HandleEnter" />
                    <MudButton Disabled="string.IsNullOrWhiteSpace(_draft)" Variant="Variant.Filled" Color="Color.Primary" Class="send" ButtonType="ButtonType.Submit">Send</MudButton>
                </div>
            </EditForm>
        </div>
    </div>
</MudPaper>
  </div>
}

@code {
    private bool IsOpen { get; set; } = false;
    private ElementReference _scrollArea;
    private string _draft = string.Empty;
    private string? _currentUserId;
    private ApplicationUser? _selectedUser;
    private ChatGroup? _selectedGroup;
    private List<ApplicationUser> _users = new();
    private List<ChatGroup> _groups = new();
    private List<ChatMessage> _messages = new();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _currentUserId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (_currentUserId != null)
        {
            _users = await ChatService.GetUsersAsync();
            _groups = await ChatService.GetUserGroupsAsync(_currentUserId);

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/chat"))
                .Build();

            _hubConnection.On<string, string>("ReceiveMessage", async (userId, message) =>
            {
                if ((_selectedUser != null && _selectedUser.Id == userId) || userId == _currentUserId)
                {
                    var sender = await ChatService.GetUserDetailsAsync(userId);
                    _messages.Add(new ChatMessage { SenderId = userId, Sender = sender, Content = message, Timestamp = DateTime.Now });
                    await InvokeAsync(StateHasChanged);
                    await ScrollToBottom();
                }
            });

            _hubConnection.On<string, int, string>("ReceiveGroupMessage", async (userId, groupId, message) =>
            {
                if (_selectedGroup != null && _selectedGroup.Id == groupId)
                {
                    var sender = await ChatService.GetUserDetailsAsync(userId);
                    _messages.Add(new ChatMessage { SenderId = userId, Sender = sender, ChatGroupId = groupId, Content = message, Timestamp = DateTime.Now });
                    await InvokeAsync(StateHasChanged);
                    await ScrollToBottom();
                }
            });

            await _hubConnection.StartAsync();
            StateHasChanged();
        }
    }

    private async Task SelectUser(ApplicationUser user)
    {
        _selectedUser = user;
        _selectedGroup = null;
        if (_currentUserId != null)
        {
            _messages = await ChatService.GetConversationAsync(_currentUserId, _selectedUser.Id);
            await ScrollToBottom();
        }
    }

    private async Task SelectGroup(ChatGroup group)
    {
        _selectedGroup = group;
        _selectedUser = null;
        _messages = await ChatService.GetGroupConversationAsync(_selectedGroup.Id);
        await ScrollToBottom();
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(_draft) || _hubConnection == null) return;

        if (_selectedUser != null)
        {
            await _hubConnection.SendAsync("SendMessageToUser", _selectedUser.Id, _draft);
        }
        else if (_selectedGroup != null)
        {
            await _hubConnection.SendAsync("SendMessageToGroup", _selectedGroup.Id, _draft);
        }
        _draft = string.Empty;
        StateHasChanged();
    }

    private void HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_draft))
        {
            _ = SendMessageAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(10);
        await JS.InvokeVoidAsync("(el)=>{el.scrollTop = el.scrollHeight;}", _scrollArea);
    }
}
