@namespace CMetalsWS.Components.Chat
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject IChatService ChatService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

<MudPaper Class="chat-dock" Elevation="6">
    <MudToolBar>
        <MudText Typo="Typo.h6">Messenger</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@OnClose" />
    </MudToolBar>
    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="ma-2"></MudTextField>
    <MudTabs Elevation="1" Centered="true">
        <MudTabPanel Text="Branch">
            <MudList T="ApplicationUser" Clickable="true">
                @foreach (var user in _users.Where(u => u.Id != _currentUserId && u.BranchId == _currentUserBranchId && (string.IsNullOrWhiteSpace(_searchString) || u.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))))
                {
                    <MudListItem T="ApplicationUser" OnClick="() => OnUserSelected.InvokeAsync(user)">
                        <ChildContent>
                            <MudBadge Color="@(user.IsOnline ? Color.Success : Color.Error)" Overlap="true" Bordered="true" Dot="true" Style="z-index:1">
                                <MudAvatar Color="@(Utils.ColorHelper.GetDeterministicColor(user.Id))">
                                    @if (!string.IsNullOrEmpty(user.Avatar))
                                    {
                                        <MudImage Src="@user.Avatar" />
                                    }
                                    else
                                    {
                                        @($"{user.FirstName?.FirstOrDefault()}{user.LastName?.FirstOrDefault()}")
                                    }
                                </MudAvatar>
                            </MudBadge>
                            <span class="ml-4">@user.UserName</span>
                        </ChildContent>
                    </MudListItem>
                }
            </MudList>
        </MudTabPanel>
        <MudTabPanel Text="Groups">
            <MudList T="ChatGroup" Clickable="true">
                @foreach (var group in _groups.Where(g => string.IsNullOrWhiteSpace(_searchString) || g.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)))
                {
                    <MudListItem T="ChatGroup" OnClick="() => OnGroupSelected.InvokeAsync(group)">
                        @group.Name
                    </MudListItem>
                }
            </MudList>
        </MudTabPanel>
        <MudTabPanel Text="Others">
            <MudList T="ApplicationUser" Clickable="true">
                @foreach (var user in _users.Where(u => u.Id != _currentUserId && u.BranchId != _currentUserBranchId && (string.IsNullOrWhiteSpace(_searchString) || u.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))))
                {
                    <MudListItem T="ApplicationUser" OnClick="() => OnUserSelected.InvokeAsync(user)">
                        <ChildContent>
                            <MudBadge Color="@(user.IsOnline ? Color.Success : Color.Error)" Overlap="true" Bordered="true" Dot="true" Style="z-index:1">
                                <MudAvatar Color="@(Utils.ColorHelper.GetDeterministicColor(user.Id))">
                                    @if (!string.IsNullOrEmpty(user.Avatar))
                                    {
                                        <MudImage Src="@user.Avatar" />
                                    }
                                    else
                                    {
                                        @($"{user.FirstName?.FirstOrDefault()}{user.LastName?.FirstOrDefault()}")
                                    }
                                </MudAvatar>
                            </MudBadge>
                            <span class="ml-4">@user.UserName</span>
                        </ChildContent>
                    </MudListItem>
                }
            </MudList>
        </MudTabPanel>
    </MudTabs>
</MudPaper>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<ApplicationUser> OnUserSelected { get; set; }
    [Parameter] public EventCallback<ChatGroup> OnGroupSelected { get; set; }

    private string? _currentUserId;
    private int? _currentUserBranchId;
    private List<ApplicationUser> _users = new();
    private List<ChatGroup> _groups = new();
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _currentUserId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (_currentUserId != null)
        {
            var currentUser = await UserManager.GetUserAsync(user);
            _currentUserBranchId = currentUser?.BranchId;
            _users = await ChatService.GetUsersAsync();
            _groups = await ChatService.GetUserGroupsAsync(_currentUserId);
        }
    }
}
