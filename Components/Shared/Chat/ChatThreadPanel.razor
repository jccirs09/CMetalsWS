@using CMetalsWS.Data.Chat
@using CMetalsWS.Services
@using CMetalsWS.Services.SignalR
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Web

@inject IChatRepository ChatRepository
@inject AuthenticationStateProvider AuthStateProvider
@inject ChatStateService ChatState
@inject ChatHubClient ChatHubClient

@implements IAsyncDisposable

<MudPaper Class="d-flex flex-column" Style="height: 100%; overflow:hidden;">
    <!-- Search -->
    <MudToolBar Dense="true">
        <MudTextField @bind-Value="_searchQuery"
                      Placeholder="Search messages..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      DebounceInterval="300"
                      OnDebounceIntervalElapsed="Refresh"
                      Variant="Variant.Text"
                      Margin="Margin.None"
                      HideDetails="true" />
    </MudToolBar>

    <!-- Real scrollable viewport for virtualization -->
    <div class="flex-grow-1" style="overflow-y: auto;">
        <MudList T="ThreadSummary" Dense="true" Class="py-0">
            <MudVirtualize T="ThreadSummary"
                           @ref="_virt"
                           ItemsProvider="LoadThreads"
                           Context="t"
                           ItemSize="72"
                           OverscanCount="4">
                <ChildContent>
                    <MudListItem T="ThreadSummary"
                                 Class="thread-item"
                                 Selected="@(t.Id == ChatState.ActiveThreadId)"
                                 OnClick="@(() => SelectThread(t))">

                        <!-- Avatar with fallback initials -->
                        <MudAvatar Size="Size.Medium" Class="mr-3">
                            @if (!string.IsNullOrWhiteSpace(t.AvatarUrl))
                            {
                                <MudImage Src="@t.AvatarUrl" />
                            }
                            else
                            {
                                @Initials(DisplayTitle(t))
                            }
                        </MudAvatar>

                        <!-- Title + last message preview -->
                        <div class="flex-grow-1 min-w-0">
                            <MudText Class="mud-font-weight-bold text-ellipsis">
                                @DisplayTitle(t)
                            </MudText>
                            <MudText Typo="Typo.caption"
                                     Class="@GetPreviewClass(t)">
                                @t.LastMessagePreview
                            </MudText>
                        </div>

                        <!-- Pin/Unpin at the end -->
                        <MudIconButton Icon="@(t.IsPinned ? Icons.Material.Filled.PushPin : Icons.Material.Outlined.PushPin)"
                                       Color="@(t.IsPinned ? Color.Primary : Color.Default)"
                                       OnClick="@((MouseEventArgs _) => PinThread(t))"
                                       OnClickStopPropagation="true"
                                       Edge="Edge.End" />
                    </MudListItem>
                </ChildContent>
            </MudVirtualize>
        </MudList>
    </div>
</div>

@if (_providerRan && _lastCount == 0)
{
    <div class="pa-3">
        <MudText Typo="Typo.caption" Class="mud-text-secondary">No conversations found.</MudText>
    </div>
}

@code {
    [Parameter] public EventCallback<ThreadSummary> OnThreadSelected { get; set; }

    private string _searchQuery = string.Empty;
    private string? _currentUserId;

    private MudVirtualize<ThreadSummary>? _virt;
    private bool _providerRan;
    private int _lastCount;
    private bool _autoSelected;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var u = authState.User;

        _currentUserId =
            u.FindFirstValue(ClaimTypes.NameIdentifier)
            ?? u.FindFirst("sub")?.Value
            ?? u.FindFirst("oid")?.Value
            ?? u.FindFirst("uid")?.Value;

        ChatHubClient.ThreadsUpdated += OnThreadsUpdated;
        await ChatHubClient.ConnectAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _virt != null)
            await _virt.RefreshDataAsync();
    }

    private Task Refresh() => _virt?.RefreshDataAsync() ?? Task.CompletedTask;

    private async Task OnThreadsUpdated()
    {
        await Refresh();
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectThread(ThreadSummary t)
    {
        ChatState.ActivateThread(t.Id!);
        await OnThreadSelected.InvokeAsync(t);
    }

    private async Task PinThread(ThreadSummary thread)
    {
        await ChatHubClient.PinThreadAsync(thread.Id!, !thread.IsPinned);
        await Refresh();
    }

    private async ValueTask<ItemsProviderResult<ThreadSummary>> LoadThreads(ItemsProviderRequest request)
    {
        _providerRan = true;

        if (string.IsNullOrEmpty(_currentUserId))
            return new ItemsProviderResult<ThreadSummary>(Array.Empty<ThreadSummary>(), 0);

        // Repo returns sorted (pinned first, then latest activity)
        var all = (await ChatRepository.GetThreadSummariesAsync(_currentUserId, _searchQuery)).ToList();
        _lastCount = all.Count;

        // Auto-select newest once
        if (!_autoSelected && string.IsNullOrEmpty(ChatState.ActiveThreadId) && all.Count > 0)
        {
            _autoSelected = true;
            var first = all[0];
            ChatState.ActivateThread(first.Id!);
            _ = OnThreadSelected.InvokeAsync(first);
        }

        var page = all.Skip(request.StartIndex).Take(request.Count);
        return new ItemsProviderResult<ThreadSummary>(page, all.Count);
    }

    private static string DisplayTitle(ThreadSummary t)
        => string.IsNullOrWhiteSpace(t.Title) ? "Conversation" : t.Title!;

    private static string Initials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length == 1
            ? parts[0].Substring(0, 1).ToUpperInvariant()
            : $"{parts[0][0]}{parts[^1][0]}".ToUpperInvariant();
    }

    private static string GetPreviewClass(ThreadSummary t)
        => t.UnreadCount > 0
            ? "text-ellipsis mud-font-weight-semibold mt-1"
            : "text-ellipsis mt-1";

    public ValueTask DisposeAsync()
    {
        ChatHubClient.ThreadsUpdated -= OnThreadsUpdated;
        return ValueTask.CompletedTask;
    }
}

<style>
/* single-line truncation */
.thread-item .text-ellipsis {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}
</style>
