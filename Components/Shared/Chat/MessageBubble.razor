@using CMetalsWS.Data.Chat
@using MudBlazor

<div class="d-flex @(IsMine ? "flex-row-reverse" : "flex-row") align-start message-container">
    @if (!IsMine)
    {
        <MudAvatar Size="Size.Medium" Class="mr-2 mt-1">@GetInitials(Message?.SenderName)</MudAvatar>
    }

    <div class="d-flex flex-column @(IsMine ? "align-end" : "align-start")" style="max-width: 75%;">
        <MudPaper Class="@($"pa-2 message-bubble {(IsMine ? "mine" : "theirs")}")" Elevation="1">
             @if (_isEditing)
            {
                <MudTextField T="string"
                              Value="@_editedContent"
                              ValueChanged="@((s) => _editedContent = s)"
                              OnKeyDown="OnEditKeyDown"
                              AutoFocus="true"
                              Variant="Variant.Text"
                              HideDetails="true"/>
            }
            else
            {
                <MudText>@Message?.Content</MudText>
            }
        </MudPaper>

        @if (Message?.Reactions.Any() == true)
        {
            <div class="d-flex flex-wrap mt-1" style="gap: 4px;">
                @foreach (var reaction in Message.Reactions)
                {
                    <MudTooltip Text="@GetReactionUsernames(reaction.Key)">
                        <MudChip T="string"
                                 Size="Size.Small"
                                 OnClick="@(() => OnReactionClicked.InvokeAsync(reaction.Key))"
                                 Style="cursor: pointer;">
                            @reaction.Key @reaction.Value.Count
                        </MudChip>
                    </MudTooltip>
                }
            </div>
        }

        <div class="d-flex align-center mt-1 px-1">
            @if (Message?.EditedAt != null)
            {
                <MudText Typo="Typo.caption" Class="mr-1 mud-text-secondary">(edited)</MudText>
            }
            <MudText Typo="Typo.caption" Class="mud-text-secondary">@Message?.CreatedAt.ToLocalTime().ToString("h:mm tt")</MudText>
            @if (IsMine)
            {
                <MudIcon Icon="@GetReadReceiptIcon()" Size="Size.Small" Style="@GetReadReceiptColor()" Class="ml-1" />
            }
        </div>
    </div>

    <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Size="Size.Small" Dense="true" Class="message-actions ml-1" IconClass="mud-text-secondary">
        <MudMenuItem OnClick="@(() => OnReactionClicked.InvokeAsync("üëç"))">React with üëç</MudMenuItem>
        <MudMenuItem OnClick="@(() => OnReactionClicked.InvokeAsync("‚ù§Ô∏è"))">React with ‚ù§Ô∏è</MudMenuItem>
        @if(IsMine)
        {
            <MudMenuItem OnClick="OnEditClicked">Edit</MudMenuItem>
            <MudMenuItem OnClick="@(() => OnDeleteClicked.InvokeAsync())">Delete</MudMenuItem>
        }
        <MudMenuItem OnClick="@(() => OnPinClicked.InvokeAsync())">@(Message?.IsPinned == true ? "Unpin" : "Pin")</MudMenuItem>
    </MudMenu>
</div>

@code {
    [Parameter] public MessageDto? Message { get; set; }
    [Parameter] public bool IsMine { get; set; }
    [Parameter] public EventCallback<string> OnReactionClicked { get; set; }
    [Parameter] public EventCallback<string> OnFinishEditing { get; set; }
    [Parameter] public EventCallback OnDeleteClicked { get; set; }
    [Parameter] public EventCallback OnPinClicked { get; set; }

    private bool _isEditing;
    private string _editedContent = string.Empty;

    private void OnEditClicked()
    {
        _isEditing = true;
        _editedContent = Message?.Content ?? string.Empty;
    }

    private async Task OnEditKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnFinishEditing.InvokeAsync(_editedContent);
            _isEditing = false;
        }
        else if (e.Key == "Escape")
        {
            _isEditing = false;
        }
    }

    private string GetReadReceiptIcon()
    {
        if (Message == null) return Icons.Material.Filled.AccessTime;
        var seenByOthersCount = Message.SeenBy.Count(s => s.Key != Message.SenderId);
        if (seenByOthersCount > 0) return Icons.Material.Filled.DoneAll;
        return Icons.Material.Filled.Check;
    }

    private string GetReadReceiptColor()
    {
        if (Message == null) return "color: var(--mud-palette-action-disabled);";
        var seenByOthersCount = Message.SeenBy.Count(s => s.Key != Message.SenderId);
        return seenByOthersCount > 0 ? "color: var(--mud-palette-info);" : "color: var(--mud-palette-action-disabled);";
    }

    private string? GetInitials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length == 1 ? parts[0].Substring(0, 1).ToUpperInvariant() : $"{parts[0][0]}{parts[^1][0]}".ToUpperInvariant();
    }

    private string GetReactionUsernames(string emoji)
    {
        if (Message?.Reactions.TryGetValue(emoji, out var userIds) != true || Message.ReactionUsers == null)
            return string.Empty;

        var names = userIds
            .Select(id => Message.ReactionUsers.GetValueOrDefault(id, "A user"))
            .ToList();

        return string.Join(", ", names);
    }
}