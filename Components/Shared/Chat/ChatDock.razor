@using CMetalsWS.Services
@using CMetalsWS.Data.Chat
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ChatStateService ChatState
@inject IChatRepository ChatRepository
@inject AuthenticationStateProvider AuthStateProvider

<div class="chat-dock @(_isMinimized ? "minimized" : "")">
    <MudPaper Elevation="4" Class="d-flex flex-column" Style="height: 400px; width: 350px;">
        <MudAppBar Dense="true" Color="Color.Primary" OnClick="ToggleMinimize" Class="chat-dock-header" Style="cursor: pointer;">
            <MudText Typo="Typo.subtitle1">@_threadTitle</MudText>
            <MudSpacer />
            <MudIconButton Icon="@(_isMinimized ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Size="Size.Small" OnClick="ToggleMinimize" OnClickStopPropagation="true" />
            <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="() => ChatState.CloseDock(ThreadId!)" OnClickStopPropagation="true"/>
        </MudAppBar>

        <div class="flex-grow-1" style="@(_isMinimized ? "display: none;" : "display: block; overflow: hidden;")">
            <ChatConversation ThreadId="@ThreadId" />
        </div>
    </MudPaper>
</div>

@code {
    [Parameter] public string? ThreadId { get; set; }

    private bool _isMinimized;
    private string? _threadTitle = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(ThreadId)) return;

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(currentUserId)) return;

        var summaries = await ChatRepository.GetThreadSummariesAsync(currentUserId);
        var summary = summaries.FirstOrDefault(s => s.Id == ThreadId);

        if (summary != null)
        {
            _threadTitle = DisplayTitle(summary);
        }
        else
        {
            // Fallback for direct chats where a summary might not exist yet
            var participants = await ChatRepository.GetThreadParticipantsAsync(ThreadId, currentUserId);
            var otherUser = participants.FirstOrDefault(p => p.Id != currentUserId);
            _threadTitle = otherUser?.UserName ?? "Chat";
        }
    }

    private void ToggleMinimize()
    {
        _isMinimized = !_isMinimized;
    }

    private static string DisplayTitle(ThreadSummary t)
    {
        var full = $"{t.FirstName} {t.LastName}".Trim();
        return string.IsNullOrWhiteSpace(full)
            ? (string.IsNullOrWhiteSpace(t.Title) ? "Conversation" : t.Title!)
            : full;
    }
}