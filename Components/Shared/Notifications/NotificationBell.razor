@using MudBlazor
@using CMetalsWS.Services

@inject NotificationService Notifications
@inject ChatStateService ChatState

<MudBadge Color="Color.Error"
          Content="@(Notifications.UnreadTotal)"
          MaxValue="99"
          Overlap="true"
          Visible="@(Notifications.UnreadTotal > 0)">
    <MudIconButton Id="@_anchorId"
                   Icon="@Icons.Material.Filled.Notifications"
                   Color="Color.Inherit"
                   OnClick="@Toggle" />
</MudBadge>

<MudPopover Open="@_open"
            AnchorReference="AnchorReference.Id"
            AnchorId="@_anchorId"
            AnchorOrigin="Origin.BottomRight"
            TransformOrigin="Origin.TopRight"
            Class="px-2 py-2"
            Elevation="8"
            OnClose="@Close">
    <MudList T="NotificationItem" Dense="true" Class="py-0" Style="width:360px; max-height:60vh; overflow:auto;">
        @if (Notifications.Recent.Count == 0)
        {
            <MudListItem T="NotificationItem">
                <MudText Typo="Typo.caption" Class="mud-text-secondary">No new messages</MudText>
            </MudListItem>
        }
        else
        {
            @foreach (var n in Notifications.Recent)
            {
                <MudListItem T="NotificationItem"
                             Class="thread-item"
                             OnClick="@(() => OpenThread(n.ThreadId))">
                    <div class="thread-row">

                        <div class="thread-avatar">
                            <MudBadge Dot="true"
                                      Color="Color.Primary"
                                      Overlap="true"
                                      Visible="@( !string.IsNullOrEmpty(n.ThreadId) && Notifications.GetThreadUnread(n.ThreadId) > 0 )">
                                <MudAvatar Size="Size.Medium">
                                    @if (!string.IsNullOrWhiteSpace(n.AvatarUrl))
                                    {
                                        <MudImage Src="@n.AvatarUrl" />
                                    }
                                    else
                                    {
                                        @Initials(DisplayTitle(n))
                                    }
                                </MudAvatar>
                            </MudBadge>
                        </div>

                        <div class="thread-main">
                            <MudText Class="name text-ellipsis">@DisplayTitle(n)</MudText>
                            <MudText Typo="Typo.caption" Class="preview text-ellipsis">
                                @n.Preview
                            </MudText>
                        </div>

                        <div class="thread-pin">
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                @n.Timestamp.ToLocalTime().ToShortTimeString()
                            </MudText>
                        </div>

                    </div>
                </MudListItem>
            }
        }
    </MudList>
</MudPopover>

@code {
    private bool _open;
    private readonly string _anchorId = $"notif-bell-{Guid.NewGuid()}";

    protected override async Task OnInitializedAsync()
    {
        Notifications.Changed += OnChanged;
        await Notifications.InitializeAsync();
    }

    private void OnChanged() => InvokeAsync(StateHasChanged);
    private void Toggle() => _open = !_open;
    private void Close() => _open = false;

    private async Task OpenThread(string threadId)
    {
        _open = false;
        if (!string.IsNullOrEmpty(threadId))
        {
            ChatState.ActivateThread(threadId);
            Notifications.ClearThread(threadId);
        }
        await InvokeAsync(StateHasChanged);
    }

    private static string DisplayTitle(NotificationItem n)
    {
        var full = $"{n.FirstName} {n.LastName}".Trim();
        if (!string.IsNullOrWhiteSpace(full))
            return full;

        return string.IsNullOrWhiteSpace(n.Title) ? "Conversation" : n.Title!;
    }

    private static string Initials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length == 1
             ? parts[0].Substring(0, 1).ToUpperInvariant()
             : $"{parts[0][0]}{parts[^1][0]}".ToUpperInvariant();
    }

    public void Dispose()
    {
        Notifications.Changed -= OnChanged;
    }
}
