@using CMetalsWS.Services
@using MudBlazor
@inject NotificationService Notifications
@inject ChatStateService ChatState

<MudBadge Color="Color.Error"
          Content="@(Notifications.UnreadTotal)"
          MaxValue="99"
          Overlap="true"
          Visible="@(Notifications.UnreadTotal > 0)">
    <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                   Color="Color.Inherit"
                   @onclick="Toggle" />
</MudBadge>

<MudPopover Open="@_open"
            AnchorOrigin="Origin.BottomRight"
            TransformOrigin="Origin.TopRight"
            Class="px-2 py-2"
            Elevation="8">
    <div class="d-flex justify-space-between align-center px-2 pb-1">
        <MudText Typo="Typo.subtitle2">Notifications</MudText>
        <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="@MarkAll">
            MARK ALL AS READ
        </MudButton>
    </div>

    <MudList T="NotificationItem" Dense="true" Class="notif-list">
        @if (Notifications.Recent.Count == 0)
        {
            <MudListItem>
                <MudText Typo="Typo.caption" Class="mud-text-secondary">No new messages</MudText>
            </MudListItem>
        }
        else
        {
            @foreach (var n in Notifications.Recent)
            {
                <MudListItem T="NotificationItem" Class="notif-item" OnClick="@(() => OpenThread(n.ThreadId))">
                    <MudAvatar Size="Size.Medium" Class="mr-2">
                        @if (!string.IsNullOrWhiteSpace(n.AvatarUrl))
                        {
                            <MudImage Src="@n.AvatarUrl" />
                        }
                        else
                        {
                            @Initials(n.Title)
                        }
                    </MudAvatar>
                    <div class="min-w-0">
                        <MudText Class="mud-font-weight-bold text-ellipsis">@n.Title</MudText>
                        <MudText Typo="Typo.caption" Class="text-ellipsis">@n.Preview</MudText>
                    </div>
                    <MudText Typo="Typo.caption" Class="ml-2 mud-text-secondary">
                        @n.Timestamp.ToLocalTime().ToShortTimeString()
                    </MudText>
                </MudListItem>
            }
        }
    </MudList>
</MudPopover>

@code {
    private bool _open;

    protected override async Task OnInitializedAsync()
    {
        Notifications.Changed += OnChanged;
        await Notifications.InitializeAsync();
    }

    private void OnChanged() => InvokeAsync(StateHasChanged);
    private void Toggle() => _open = !_open;

    private void MarkAll()
    {
        Notifications.ClearAll();
        StateHasChanged();
    }

    private void OpenThread(string threadId)
    {
        _open = false;
        ChatState.ActivateThread(threadId);
        Notifications.ClearThread(threadId);
    }

    private static string Initials(string? name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return parts.Length == 1 ? parts[0][0].ToString().ToUpper()
                                 : $"{char.ToUpper(parts[0][0])}{char.ToUpper(parts[^1][0])}";
    }

    public void Dispose() => Notifications.Changed -= OnChanged;
}

<style>
    .notif-list {
        width: 360px;
        max-height: 60vh;
        overflow: auto;
    }

    .notif-item .text-ellipsis {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>
