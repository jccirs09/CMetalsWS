@page "/customers/import"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Models
@using MudBlazor
@attribute [Authorize(Policy = Permissions.Customers.Import)]
@inject CustomerService CustomerService
@inject ISnackbar Snackbar

<style>
    .file-upload-input {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 10;
        opacity: 0;
        cursor: pointer;
    }
</style>

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Import Customers from Excel</MudText>
    <MudText Typo="Typo.body1" Class="mt-2 mb-4">Select or drop an Excel file to import customers directly.</MudText>

    <MudFileUpload T="IBrowserFile"
                   FilesChanged="ProcessFile"
                   Hidden="@false"
                   InputClass="file-upload-input"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="200px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height:100%">
                    <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" />
                    <MudText Typo="Typo.h6">
                        Drag and drop file here or click
                    </MudText>
                </MudStack>
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>

    @if (_isUploading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }

    @if (_importReport != null)
    {
        <MudCard Class="mt-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Import Report</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>Total Rows: @_importReport.TotalRows</MudText>
                <MudText Color="Color.Success">Successful Imports: @_importReport.SuccessfulImports</MudText>
                <MudText Color="Color.Error">Failed Imports: @_importReport.FailedImports</MudText>
                @if (_importReport.Errors.Any())
                {
                    <MudText Typo="Typo.subtitle1" Class="mt-2">Errors:</MudText>
                    <MudList T="string">
                        @foreach (var error in _importReport.Errors)
                        {
                            <MudListItem T="string" Icon="@Icons.Material.Filled.Error" IconColor="Color.Error">@error</MudListItem>
                        }
                    </MudList>
                }
            </MudCardContent>
        </MudCard>
    }
</MudPaper>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full d-flex align-center justify-center";
    private string _dragClass = DefaultDragClass;

    private bool _isUploading = false;
    private CustomerImportReport? _importReport;

    private async Task ProcessFile(IBrowserFile file)
    {
        if (file == null) return;

        _isUploading = true;
        _importReport = null;
        StateHasChanged();

        try
        {
            await using var ms = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5).CopyToAsync(ms);
            ms.Position = 0;

            var importRows = await CustomerService.PreviewImportAsync(ms);
            _importReport = await CustomerService.CommitImportAsync(importRows);

            Snackbar.Add($"Import complete. Success: {_importReport.SuccessfulImports}, Failed: {_importReport.FailedImports}", _importReport.FailedImports > 0 ? Severity.Warning : Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred during file processing: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}