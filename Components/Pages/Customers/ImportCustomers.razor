@page "/customers/import"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Models
@using MudBlazor
@attribute [Authorize(Policy = Permissions.Customers.Import)]
@inject CustomerService CustomerService
@inject ISnackbar Snackbar

<style>
    .file-upload-input {
        position: absolute;
        width: 100%;
        height: 100%;
        overflow: hidden;
        z-index: 10;
        opacity: 0;
        cursor: pointer;
    }
</style>

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Import Customers from Excel</MudText>
    <MudText Typo="Typo.body1" Class="mt-2 mb-4">Select an Excel file to begin the import process.</MudText>

    <MudFileUpload T="IBrowserFile"
                   FilesChanged="ProcessFile"
                   Hidden="@false"
                   InputClass="file-upload-input"
                   tabindex="-1"
                   @ondrop="@ClearDragClass"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Height="200px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height:100%">
                    <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" />
                    <MudText Typo="Typo.h6">
                        Drag and drop file here or click
                    </MudText>
                </MudStack>
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>

    @if (_isUploading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }

    @if (_importRows.Any())
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CommitImport" Disabled="@_isUploading" Class="mt-4">
            Commit Selections
        </MudButton>

        <MudTable Items="@_importRows" Class="mt-4" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Customer</MudTh>
                <MudTh>Address</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Customer">@context.Dto.CustomerName (@context.Dto.CustomerCode)</MudTd>
                <MudTd DataLabel="Address">@context.Dto.Address</MudTd>
                <MudTd DataLabel="Status">
                    @if (!string.IsNullOrWhiteSpace(context.Error))
                    {
                        <MudChip T="string" Color="Color.Error">@context.Error</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Success">Ready</MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full d-flex align-center justify-center";
    private string _dragClass = DefaultDragClass;

    private bool _isUploading = false;
    private List<CustomerImportRow> _importRows = new();

    private async Task ProcessFile(IBrowserFile file)
    {
        if (file == null) return;

        _isUploading = true;
        _importRows.Clear();
        StateHasChanged();

        try
        {
            await using var ms = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5).CopyToAsync(ms);
            ms.Position = 0;

            _importRows = await CustomerService.PreviewImportAsync(ms);
            Snackbar.Add("File processed. Please review the candidates.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred during file processing: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private async Task CommitImport()
    {
        var report = await CustomerService.CommitImportAsync(_importRows);
        Snackbar.Add($"Import committed. Success: {report.SuccessfulImports}, Failed: {report.FailedImports}", report.FailedImports > 0 ? Severity.Warning : Severity.Success);
        _importRows.Clear();
        StateHasChanged();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
