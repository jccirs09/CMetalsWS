@page "/customers/import"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Models
@using MudBlazor
@attribute [Authorize(Policy = Permissions.Customers.Import)]

@inject CustomerService CustomerService
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Import Customers from Excel</MudText>
    <MudText Typo="Typo.body1" Class="mt-2">Upload an Excel file with customer data to import.</MudText>

    <InputFile OnChange="OnFileChanged" class="mt-4" />

    @if (_importRows.Any())
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CommitImport" Disabled="@_isUploading" Class="mt-4">
            Commit Selections
        </MudButton>

        <MudTable Items="@_importRows" Class="mt-4" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Customer</MudTh>
                <MudTh>Address</MudTh>
                <MudTh>Candidates</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Customer">@context.Dto.CustomerName (@context.Dto.CustomerCode)</MudTd>
                <MudTd DataLabel="Address">@context.Dto.Address</MudTd>
                <MudTd DataLabel="Candidates">
                    @if (context.RequiresManualSelection)
                    {
                        <MudRadioGroup T="string" @bind-SelectedValue="context.SelectedPlaceId">
                            @foreach (var candidate in context.Candidates)
                            {
                                <MudRadio Value="@candidate.PlaceId">@candidate.FullAddress</MudRadio>
                            }
                        </MudRadioGroup>
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    @if (!string.IsNullOrWhiteSpace(context.Error))
                    {
                        <MudChip T="string" Color="Color.Error">@context.Error</MudChip>
                    }
                    else if (context.RequiresManualSelection)
                    {
                        <MudChip T="string" Color="Color.Warning">Requires Selection</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Success">Ready</MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private IBrowserFile? _file;
    private bool _isUploading = false;
    private List<CustomerImportRow> _importRows = new();

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;
        if (_file == null) return;

        _isUploading = true;
        StateHasChanged();

        try
        {
            await using var ms = new MemoryStream();
            await _file.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5).CopyToAsync(ms);
            ms.Position = 0;

            _importRows = await CustomerService.PreviewImportAsync(ms);
            Snackbar.Add("File processed. Please review the candidates.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred during file processing: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private async Task CommitImport()
    {
        var report = await CustomerService.CommitImportAsync(_importRows);
        Snackbar.Add($"Import committed. Success: {report.SuccessfulImports}, Failed: {report.FailedImports}", report.FailedImports > 0 ? Severity.Warning : Severity.Success);
        _importRows.Clear();
        StateHasChanged();
    }
}
