@using System.Security.Claims
@using CMetalsWS.Data
@using CMetalsWS.Models
@using CMetalsWS.Services
@using MudBlazor
@inject FulfillmentService FulfillmentService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Record Partial Pickup for @Order.CustomerName (@Order.OrderNumber)</MudText>
    </TitleContent>
    <DialogContent>
        @if (_isConfirming)
        {
            <MudText>Please review the quantities below and confirm the pickup.</MudText>
            <MudList T="string" Class="mt-4" Dense="true">
                @foreach (var pickup in _pickupsToConfirm)
                {
                    <MudListItem T="string">
                        <MudText><b>@pickup.Key.Description:</b> @pickup.Value.ToString("N2")</MudText>
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudStack Spacing="3" Class="mt-4">
                @foreach (var item in Order.Items)
                {
                    <MudPaper Outlined="true" Class="pa-3">
                        <MudGrid AlignItems="AlignItems.Center">
                            <MudItem xs="12" sm="6">
                                <MudText><b>@item.Description</b></MudText>
                                <MudText Typo="Typo.caption">Item ID: @item.Id</MudText>
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                <MudText>Ordered: @item.Quantity.ToString("N2")</MudText>
                                <MudText>Picked Up: @item.FulfilledQuantity.ToString("N2")</MudText>
                                <MudText Color="Color.Success"><b>Remaining: @item.RemainingQuantity.ToString("N2")</b></MudText>
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                @{
                                    var itemId = int.Parse(item.Id);
                                    var remaining = item.RemainingQuantity;
                                }
                                <div class="d-flex align-center">
                                    <MudCheckBox Checked="_itemCheckedState[itemId]"
                                                 T="bool"
                                                 Label="Full"
                                                 CheckedChanged="@((isChecked) => OnCheckboxChanged(isChecked, itemId, remaining))"
                                                 Class="mr-2" />
                                    <MudNumericField T="decimal"
                                                     Value="_pickupQuantities[itemId]"
                                                     ValueChanged="@((newValue) => OnPickupQuantityChanged(newValue, itemId, remaining))"
                                                     Label="Pickup Now"
                                                     Variant="Variant.Outlined"
                                                     Min="0"
                                                     Max="@remaining"
                                                     Step="1" />
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        @if (_isConfirming)
        {
            <MudButton OnClick="() => _isConfirming = false">Back to Edit</MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="SubmitConfirmed" Disabled="@_isSubmitting">Confirm Pickup</MudButton>
        }
        else
        {
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ProceedToConfirm">Record Pickup</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public AvailableOrder Order { get; set; } = new();

    private Dictionary<int, decimal> _pickupQuantities = new();
    private Dictionary<int, bool> _itemCheckedState = new();
    private Dictionary<OrderItem, decimal> _pickupsToConfirm = new();
    private bool _isConfirming = false;
    private bool _isSubmitting = false;

    protected override void OnInitialized()
    {
        foreach (var item in Order.Items)
        {
            if (int.TryParse(item.Id, out var itemId))
            {
                _pickupQuantities[itemId] = 0;
                _itemCheckedState[itemId] = false;
            }
        }
    }

    private void OnCheckboxChanged(bool isChecked, int itemId, decimal remainingQuantity)
    {
        _itemCheckedState[itemId] = isChecked;
        _pickupQuantities[itemId] = isChecked ? remainingQuantity : 0;
        StateHasChanged(); // Force update of the numeric field
    }

    private void OnPickupQuantityChanged(decimal newValue, int itemId, decimal remainingQuantity)
    {
        _pickupQuantities[itemId] = newValue;
        _itemCheckedState[itemId] = newValue == remainingQuantity && newValue > 0;
    }

    private void ProceedToConfirm()
    {
        _pickupsToConfirm = _pickupQuantities
            .Where(kvp => kvp.Value > 0)
            .ToDictionary(
                kvp => Order.Items.First(i => int.Parse(i.Id) == kvp.Key),
                kvp => kvp.Value
            );

        if (!_pickupsToConfirm.Any())
        {
            Snackbar.Add("No pickup quantities were entered.", Severity.Info);
            return;
        }
        _isConfirming = true;
    }

    private async Task SubmitConfirmed()
    {
        _isSubmitting = true;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        if (string.IsNullOrEmpty(userId))
        {
            Snackbar.Add("Error: User not found. Please log in again.", Severity.Error);
            _isSubmitting = false;
            return;
        }

        try
        {
            foreach (var pickup in _pickupsToConfirm)
            {
                await FulfillmentService.RecordFulfillmentAsync(
                    pickingListItemId: int.Parse(pickup.Key.Id),
                    fulfilledQuantity: pickup.Value,
                    fulfillmentType: FulfillmentType.CustomerPickup,
                    recordedById: userId,
                    notes: $"Partial pickup recorded via dialog for order {Order.OrderNumber}."
                );
            }
            Snackbar.Add("Pickup(s) recorded successfully!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}