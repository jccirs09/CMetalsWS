@page "/planning/unified-load-planning"
@using CMetalsWS.Data
@using System.Linq
@using CMetalsWS.Security
@using MudBlazor
@using System.Security.Claims
@attribute [Authorize(Policy = Permissions.PickingLists.ManageLoads)]

@inject CMetalsWS.Services.PickingListService PickingListService
@inject CMetalsWS.Services.TruckService TruckService
@inject CMetalsWS.Services.LoadService LoadService
@inject CMetalsWS.Services.DestinationRegionService DestinationRegionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudTabs Elevation="2" Rounded="true" PanelClass="pa-4" @bind-ActivePanelIndex="_activeTab">
    <MudTabPanel Text="Regional Overview">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            <MudGrid>
                <MudItem xs="12">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <div>
                            <MudText Typo="Typo.h5">Regional Delivery Management</MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">High-level overview of regional delivery metrics.</MudText>
                        </div>
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <MudGrid>
                        @foreach (var region in _regions)
                        {
                            var regionOrders = _allPickingLists.Where(o => o.DestinationRegionId == region.Id).ToList();
                            var activeOrders = regionOrders.Count(o => o.Status == PickingListStatus.Ready || o.Status == PickingListStatus.ReadyToShip);

                            <MudItem xs="12" sm="6" md="2">
                                <MudPaper Class="pa-4 rounded-lg" Style="height: 100%; cursor:pointer;" @onclick="@(() => NavigateToLoadManagement(region.Id))">
                                    <MudText Typo="Typo.subtitle1">@region.Name</MudText>
                                    <div class="d-flex justify-space-between mt-4">
                                        <MudText Typo="Typo.body2" Class="text-muted">Active Orders:</MudText>
                                        <MudText Typo="Typo.body2" Class="font-weight-bold">@activeOrders</MudText>
                                    </div>
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.body2" Class="text-muted">Total Orders:</MudText>
                                        <MudText Typo="Typo.body2" Class="font-weight-bold">@regionOrders.Count</MudText>
                                    </div>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader><MudText Typo="Typo.h6">Orders by Region</MudText></MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex flex-column gap-3">
                                @foreach (var region in _regions)
                                {
                                    var regionOrders = _allPickingLists.Where(o => o.DestinationRegionId == region.Id).ToList();
                                    <div class="d-flex align-center" style="width: 100%;">
                                        <div class="flex-grow-1">
                                            <MudText>@region.Name</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">@regionOrders.Sum(o => o.Items.Sum(i => i.RemainingQuantity * (i.Weight ?? 0))).ToString("N0") lbs</MudText>
                                        </div>
                                        <div class="text-right">
                                            <MudText>@regionOrders.Count orders</MudText>
                                        </div>
                                    </div>
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader><MudText Typo="Typo.h6">Fleet Assignment</MudText></MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex flex-column gap-3">
                                @foreach (var region in _regions)
                                {
                                    var regionTrucks = _trucks.Where(t => region.Branches.Any(b => b.Id == t.BranchId)).ToList();
                                    <div class="d-flex align-center" style="width: 100%;">
                                        <div class="flex-grow-1">
                                            <MudText>@region.Name</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">@regionTrucks.Count(t => t.IsActive) active trucks</MudText>
                                        </div>
                                        <div class="text-right">
                                            <MudText>@regionTrucks.Count total trucks</MudText>
                                        </div>
                                    </div>
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Load Management">
        <div class="d-flex justify-space-between align-center mb-4">
            <div>
                <MudText Typo="Typo.h5">Loads & Shipping</MudText>
                <MudText Typo="Typo.body2" Class="text-muted">Manage truck loads and shipping operations</MudText>
            </div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => _activeTab = 2)">New Load</MudButton>
        </div>

        <MudPaper Class="pa-2 mb-4 d-flex align-center gap-2">
            <MudTextField @bind-Value="_loadSearchTerm" Placeholder="Search loads..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="flex-grow-1" DebounceInterval="300" OnDebouncedTextChanged="@OnLoadFilterChanged" />
            <MudSelect T="LoadStatus?" @bind-Value="LoadStatusFilter" Label="Status" Clearable="true" Style="max-width: 150px;">
                @foreach (LoadStatus status in Enum.GetValues(typeof(LoadStatus)))
                {
                    <MudSelectItem Value="@status">@status.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="string" @bind-Value="LoadTypeFilter" Label="Type" Clearable="true" Style="max-width: 150px;">
                <MudSelectItem Value="@("flatbed")">Flatbed</MudSelectItem>
                <MudSelectItem Value="@("enclosed")">Enclosed</MudSelectItem>
            </MudSelect>
            <MudSelect T="int?" @bind-Value="LoadManagementRegionFilter" Label="Region" Clearable="true" Style="max-width: 150px;">
                @foreach (var region in _regions)
                {
                    <MudSelectItem Value="@region.Id">@region.Name</MudSelectItem>
                }
            </MudSelect>
        </MudPaper>

        <MudGrid Spacing="2">
            <MudItem xs="12" sm="3"><MudPaper Class="pa-4"><MudText Typo="Typo.h6">@_filteredLoads.Count(l => l.Status != LoadStatus.Delivered && l.Status != LoadStatus.Canceled)</MudText><MudText>Active Loads</MudText></MudPaper></MudItem>
            <MudItem xs="12" sm="3"><MudPaper Class="pa-4"><MudText Typo="Typo.h6">@_filteredLoads.Count(l => l.Status == LoadStatus.InTransit)</MudText><MudText>In Transit</MudText></MudPaper></MudItem>
            <MudItem xs="12" sm="3"><MudPaper Class="pa-4"><MudText Typo="Typo.h6">@_filteredLoads.Count(l => l.Status == LoadStatus.Delivered && l.ShippingDate?.Date == DateTime.Today)</MudText><MudText>Delivered Today</MudText></MudPaper></MudItem>
            <MudItem xs="12" sm="3"><MudPaper Class="pa-4"><MudText Typo="Typo.h6">0</MudText><MudText>Overdue</MudText></MudPaper></MudItem>
        </MudGrid>

        <div class="mt-4 d-flex flex-column gap-4">
            @foreach (var load in _filteredLoads)
            {
                var loadRegion = load.Items.FirstOrDefault()?.PickingListItem.PickingList.DestinationRegion;
                var utilization = (load.Truck?.CapacityWeight > 0) ? (int)((load.TotalWeight / load.Truck.CapacityWeight) * 100) : 0;

                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center gap-2">
                                <MudText Typo="Typo.h6">LD-@load.Id.ToString("D7")</MudText>
                                <MudChip T="string" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">@load.Status.ToString()</MudChip>
                                @if(loadRegion != null)
                                {
                                    <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Outlined">@loadRegion.Name</MudChip>
                                }
                            </div>
                            <MudText Typo="Typo.body2" Class="text-muted">@load.Truck?.Driver?.FullName - @load.Truck?.Name - @(load.Truck?.Driver?.PhoneNumber ?? "N/A")</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.caption">Load Utilization</MudText>
                        <MudProgressLinear Value="utilization" Class="my-1" />
                        <div class="d-flex justify-space-between">
                            <MudText Typo="Typo.body2">@utilization% utilized</MudText>
                            <MudText Typo="Typo.body2">@load.TotalWeight.ToString("N0") / @(load.Truck?.CapacityWeight.ToString("N0") ?? "0") lbs</MudText>
                        </div>
                        <MudGrid Class="mt-4">
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Scheduled Pickup</MudText>
                                <MudText>@load.ShippingDate?.ToString("f")</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Est. Delivery</MudText>
                                <MudText>@load.ShippingDate?.AddDays(2).ToString("f")</MudText>
                            </MudItem>
                        </MudGrid>

                        <MudText Typo="Typo.caption" Class="mt-4">Route</MudText>
                        @foreach(var item in load.Items)
                        {
                            <div class="d-flex justify-space-between align-center my-1">
                                <MudText>@item.PickingListItem.PickingList.Customer.CustomerName</MudText>
                                <div class="d-flex gap-4">
                                    <MudText>@item.ShippedWeight.ToString("N0") lbs</MudText>
                                    <MudText>@item.ShippedQuantity.ToString("N0") pcs</MudText>
                                </div>
                            </div>
                        }
                        @if(!string.IsNullOrWhiteSpace(load.Notes))
                        {
                            <MudText Typo="Typo.caption" Class="mt-4">Load Notes</MudText>
                            <MudText>@load.Notes</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            }
        </div>
    </MudTabPanel>
    <MudTabPanel Text="Simple Planning">
        <MudText Typo="Typo.h5">Simplified Load Creation</MudText>
        <MudText Typo="Typo.body2" Class="text-muted mb-4">Create loads by selecting ship dates and orders</MudText>
        <MudGrid>
            <MudItem xs="12" md="3">
                <MudText Typo="Typo.h6" Class="mb-2">Step 1: Ship Date</MudText>
                <div class="d-flex flex-column gap-3" style="max-height: 60vh; overflow-y: auto;">
                    @if(_groupedOrdersByDate != null)
                    {
                        @foreach(var dateGroup in _groupedOrdersByDate)
                        {
                            <MudPaper
                                Class="@($"pa-3 rounded-lg {_selectedShipDate == dateGroup.Key ? "mud-theme-primary-lighten-4" : ""}")"
                                @onclick="@(() => OnDateSelected(dateGroup.Key))">
                                <MudText Typo="Typo.h6">@dateGroup.Key.ToString("ddd, MMM dd")</MudText>
                                <MudText Typo="Typo.body2">@dateGroup.Sum(p => p.Items.Sum(i => i.RemainingQuantity * (i.Weight ?? 0))).ToString("N0") lbs</MudText>
                                <MudText Typo="Typo.body2" Class="text-muted">@dateGroup.Count() orders</MudText>
                            </MudPaper>
                        }
                    }
                </div>
            </MudItem>
            <MudItem xs="12" md="5">
                <MudText Typo="Typo.h6" Class="mb-2">Step 2: Select Orders</MudText>
                @if(_selectedShipDate.HasValue)
                {
                    <div class="d-flex flex-column gap-3" style="max-height: 60vh; overflow-y: auto;">
                        @foreach(var cityGroup in _allPickingLists.Where(p => p.ShipDate?.Date == _selectedShipDate.Value.Date).GroupBy(p => p.Customer.City ?? "Unknown"))
                        {
                            <MudText Typo="Typo.subtitle1">@cityGroup.Key</MudText>
                            @foreach(var pickingList in cityGroup)
                            {
                                <MudCard Outlined="true">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudCheckBox T="bool" Value="@_selectedOrdersForLoad.Contains(pickingList)" ValueChanged="@((val) => OnOrderSelected(val, pickingList))" />
                                            <MudText>@pickingList.Customer.CustomerName</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">@pickingList.Status.ToString()</MudChip>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <MudText Typo="Typo.body2">@pickingList.Items.Sum(i => i.RemainingQuantity * (i.Weight ?? 0)).ToString("N0") lbs</MudText>
                                        <MudText Typo="Typo.body2">@pickingList.Items.Count pcs</MudText>
                                    </MudCardContent>
                                </MudCard>
                            }
                        }
                    </div>
                }
                else
                {
                    <MudText Class="text-muted">Select a ship date to see available orders.</MudText>
                }
            </MudItem>
            <MudItem xs="12" md="4">
                <MudPaper Class="pa-4" Style="height: 100%;">
                    <MudText Typo="Typo.h6" Class="mb-2">Step 3: Load Summary</MudText>
                    @if(_selectedOrdersForLoad.Any())
                    {
                        <MudText><b>Ship Date:</b> @_selectedShipDate?.ToString("d")</MudText>
                        <MudText><b>Total Orders:</b> @_selectedOrdersForLoad.Count</MudText>
                        <MudText><b>Total Weight:</b> @_selectedOrdersForLoad.Sum(o => o.Items.Sum(i => i.RemainingQuantity * (i.Weight ?? 0))).ToString("N0") lbs</MudText>
                        <MudSelect T="int?" @bind-Value="_simplePlanningLoad.TruckId" Label="Select Truck" Class="mt-4">
                            @foreach(var truck in GetFilteredTrucksForSimplePlanning())
                            {
                                <MudSelectItem Value="@truck.Id">@truck.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudTextField @bind-Value="_simplePlanningLoad.Notes" Label="Load Notes (Optional)" Lines="3" Class="mt-4" />
                        <MudButton
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            OnClick="CreateLoadFromSimplePlanner"
                            Disabled="@(_simplePlanningLoad.TruckId == null)"
                            Class="mt-4">
                            Create Load
                        </MudButton>
                    }
                    else
                    {
                        <MudText Class="text-muted">Select orders to see a summary.</MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    // --- Tab and Navigation State ---
    private int _activeTab = 0;

    // --- Shared State ---
    private List<Truck> _trucks = new();
    private List<DestinationRegion> _regions = new();
    private List<PickingList> _allPickingLists = new();
    private int? _currentUserBranchId;

    // --- Load Management State ---
    private List<Load> _allLoads = new();
    private IEnumerable<Load> _filteredLoads = new List<Load>();
    private string _loadSearchTerm = "";
    private LoadStatus? _loadStatusFilter;
    public LoadStatus? LoadStatusFilter { get => _loadStatusFilter; set { _loadStatusFilter = value; OnLoadFilterChanged(); } }
    private string _loadTypeFilter = "";
    public string LoadTypeFilter { get => _loadTypeFilter; set { _loadTypeFilter = value; OnLoadFilterChanged(); } }
    private int? _loadManagementRegionFilter;
    public int? LoadManagementRegionFilter { get => _loadManagementRegionFilter; set { _loadManagementRegionFilter = value; OnLoadFilterChanged(); } }

    // --- Simple Planning State ---
    private ILookup<DateTime, PickingList> _groupedOrdersByDate = null!;
    private DateTime? _selectedShipDate;
    private HashSet<PickingList> _selectedOrdersForLoad = new();
    private Load _simplePlanningLoad = new();

    private void OnDateSelected(DateTime date)
    {
        _selectedShipDate = date;
        _selectedOrdersForLoad.Clear();
    }

    private void OnOrderSelected(bool isChecked, PickingList order)
    {
        if (isChecked) _selectedOrdersForLoad.Add(order);
        else _selectedOrdersForLoad.Remove(order);
        StateHasChanged();
    }

    private IEnumerable<Truck> GetFilteredTrucksForSimplePlanning()
    {
        if (!_selectedOrdersForLoad.Any()) return Enumerable.Empty<Truck>();
        var firstOrderRegionId = _selectedOrdersForLoad.First().DestinationRegionId;
        if (GetRegionCategory(_selectedOrdersForLoad.First()) == DestinationRegionCategory.LOCAL)
        {
            return _trucks.Where(t => !t.IsContractor && t.DestinationRegionId == firstOrderRegionId);
        }
        return _trucks.Where(t => t.IsContractor || t.DestinationRegionId == firstOrderRegionId);
    }

    private async Task CreateLoadFromSimplePlanner()
    {
        if (_simplePlanningLoad.TruckId == null || !_selectedOrdersForLoad.Any()) return;
        var newLoad = new Load
        {
            TruckId = _simplePlanningLoad.TruckId,
            Notes = _simplePlanningLoad.Notes,
            ShippingDate = _selectedShipDate ?? DateTime.Today,
            Items = _selectedOrdersForLoad.SelectMany(o => o.Items).Select(item => new LoadItem
            {
                PickingListItemId = item.Id,
                PickingListItem = item,
                ShippedQuantity = item.RemainingQuantity,
                ShippedWeight = item.RemainingQuantity * (item.Weight ?? 0)
            }).ToList()
        };

        await SaveLoad(newLoad);

        _simplePlanningLoad = new();
        _selectedOrdersForLoad.Clear();
        _selectedShipDate = null;
        _activeTab = 1;
    }

    private void OnLoadFilterChanged()
    {
        ApplyLoadFilters();
    }

    private void ApplyLoadFilters()
    {
        _filteredLoads = _allLoads.Where(l =>
        {
            if (LoadManagementRegionFilter.HasValue && !l.Items.Any(i => i.PickingListItem.PickingList.DestinationRegionId == LoadManagementRegionFilter.Value)) return false;
            if (LoadStatusFilter.HasValue && l.Status != LoadStatusFilter.Value) return false;
            if (!string.IsNullOrWhiteSpace(_loadSearchTerm) &&
                !l.Id.ToString().Contains(_loadSearchTerm, StringComparison.OrdinalIgnoreCase) &&
                !(l.Truck?.Name?.Contains(_loadSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) &&
                !l.Items.Any(i => i.PickingListItem.PickingList.Customer.CustomerName.Contains(_loadSearchTerm, StringComparison.OrdinalIgnoreCase)))
                return false;
            return true;
        });
    }

    private void NavigateToLoadManagement(int regionId)
    {
        LoadManagementRegionFilter = regionId;
        _activeTab = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var applicationUser = await UserManager.GetUserAsync(user);
            _currentUserBranchId = applicationUser?.BranchId;
        }
        await LoadData();
    }

    private DestinationRegionCategory GetRegionCategory(PickingList p)
    {
        if (p.Customer?.DestinationRegion is null) return DestinationRegionCategory.OUT_OF_TOWN;
        return DestinationRegionService.GetDestinationRegionCategory(p.Customer.DestinationRegion);
    }

    private async Task LoadData()
    {
        var allPickingLists = await PickingListService.GetAvailableForLoadingAsync();
        var allRegions = (await DestinationRegionService.GetDestinationRegionsAsync()).ToList();
        var allTrucks = await TruckService.GetTrucksAsync();
        var allLoads = (await LoadService.GetLoadsAsync()).ToList();

        if (_currentUserBranchId.HasValue)
        {
            _allPickingLists = allPickingLists.Where(p => p.BranchId == _currentUserBranchId.Value).ToList();
            _regions = allRegions.Where(r => r.Branches.Any(b => b.Id == _currentUserBranchId.Value)).ToList();
            var branchTruckIds = allTrucks.Where(t => t.BranchId == _currentUserBranchId.Value).Select(t => t.Id);
            _trucks = allTrucks.Where(t => branchTruckIds.Contains(t.Id)).ToList();
            _allLoads = allLoads.Where(l => branchTruckIds.Contains(l.TruckId ?? 0)).ToList();
        }
        else
        {
            _allPickingLists = allPickingLists.ToList();
            _regions = allRegions;
            _trucks = allTrucks.ToList();
            _allLoads = allLoads;
        }

        _groupedOrdersByDate = _allPickingLists.Where(p => p.ShipDate.HasValue).ToLookup(p => p.ShipDate.Value.Date);
        ApplyLoadFilters();
        StateHasChanged();
    }

    private async Task SaveLoad(Load loadToSave)
    {
        if (loadToSave is null) return;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Snackbar.Add("User is not authenticated.", Severity.Error);
            return;
        }
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            Snackbar.Add("Could not retrieve user ID.", Severity.Error);
            return;
        }

        try
        {
            await LoadService.CreateAsync(loadToSave, userId);
            Snackbar.Add("Load saved successfully!", Severity.Success);
            await LoadData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save load: {ex.Message}", Severity.Error);
        }
    }
}