@page "/planning/unified-load-planning"
@using CMetalsWS.Data
@using System.Linq
@using CMetalsWS.Security
@using MudBlazor
@attribute [Authorize(Policy = Permissions.PickingLists.ManageLoads)]

@inject CMetalsWS.Services.PickingListService PickingListService
@inject CMetalsWS.Services.TruckService TruckService
@inject CMetalsWS.Services.LoadService LoadService
@inject CMetalsWS.Services.DestinationRegionService DestinationRegionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4">Unified Load Planning</MudText>

<MudGrid>
    <MudItem xs="12" md="7">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudText Typo="Typo.h6">Available Picking Lists</MudText>

            <MudPaper Class="pa-2 mb-4">
                <MudToolBar>
                    <MudSelect T="DestinationRegionCategory"
                               Label="Filter by Region"
                               MultiSelection="true"
                               SelectedValues="_selectedCategoryFilters"
                               SelectedValuesChanged="OnFilterChanged"
                               Clearable="true">
                        @foreach (DestinationRegionCategory category in Enum.GetValues(typeof(DestinationRegionCategory)))
                        {
                            <MudSelectItem T="DestinationRegionCategory" Value="@category">@category.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudToolBar>
            </MudPaper>

            <div class="d-flex flex-column gap-4">
                @foreach (var group in _filteredSalesOrderGroups)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex align-center pa-1" style="width:100%">
                                <MudCheckBox T="bool" Value="@(_selectedGroups.Contains(group))" ValueChanged="@((bool val) => OnGroupChecked(val, group))" Class="mr-2" />
                                <MudCard Outlined="true" Class="flex-grow-1">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">SO: @group.Key</MudText>
                                            <MudText Typo="Typo.body1">@group.First().Customer?.CustomerName</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudTooltip Text="Create a load with a partial list of items from this SO">
                                                <MudIconButton Icon="@Icons.Material.Filled.Splitscreen" Size="Size.Small" OnClick="@(() => OpenPartialLoadDialog(group.ToList()))" />
                                            </MudTooltip>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent Class="d-flex flex-row gap-4">
                                        <div>
                                            <MudText Typo="Typo.caption">Weight</MudText>
                                            <MudText Typo="Typo.body1">@group.SelectMany(pl => pl.Items).Sum(pli => pli.RemainingWeight).ToString("N2") lbs</MudText>
                                        </div>
                                        <div>
                                            <MudText Typo="Typo.caption">Status</MudText>
                                            <MudText Typo="Typo.body1">@group.First().Status</MudText>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudTable Items="@(group.SelectMany(pl => pl.Items).ToList())" Dense="true" Striped="true" Hover="true" SortLabel="Sort By">
                                <HeaderContent>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.ItemId)">Item ID</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.ItemDescription)">Description</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.PulledWeight)">Pulled Wt.</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.PulledQuantity ?? 0)">Pulled Qty.</MudTableSortLabel></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
                                    <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                                    <MudTd DataLabel="Pulled Wt.">@context.PulledWeight</MudTd>
                                    <MudTd DataLabel="Pulled Qty.">@context.PulledQuantity</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </div>

            <AuthorizeView>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_selectedGroups.Any())" OnClick="CreateLoadFromSelected" Class="mt-4">Create Load with Selected</MudButton>
            </AuthorizeView>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="5">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudText Typo="Typo.h6">Load Builder</MudText>
            @if (_load != null)
            {
                <MudSelect T="int?" Label="Truck" Value="_load.TruckId" ValueChanged="@OnTruckChanged" For="@(() => _load.TruckId)">
                    @foreach (var truck in _trucks)
                    {
                        <MudSelectItem Value="@truck.Id">@truck.Name (@truck.CapacityWeight lbs)</MudSelectItem>
                    }
                </MudSelect>
                <MudDatePicker Label="Shipping Date" @bind-Date="_load.ShippingDate" />
                <MudTextField Label="Notes" @bind-Value="_load.Notes" Lines="2" />
                <MudText Typo="Typo.caption" Class="mt-2">Load Capacity:</MudText>
                <MudProgressLinear Color="@_loadCapacityColor" Value="@((double)_loadCapacity)" Class="my-1" />
                <MudText Typo="Typo.body2"><strong>Total Weight:</strong> @_load.TotalWeight lbs</MudText>

                <MudPaper Class="mt-4" Outlined="true">
                    <MudToolBar>
                        <MudText Typo="Typo.subtitle1">Items in Load</MudText>
                    </MudToolBar>
                    <MudContainer Style="max-height: 300px; overflow-y: auto">
                        @foreach (var item in _itemsInLoad)
                        {
                            <MudDropZone T="LoadItem" OnItemDropped="ItemDropped" Identifier="@(item.PickingListItemId.ToString())">
                                <MudPaper Elevation="2" Class="pa-2 ma-1">
                                    <MudGrid>
                                        <MudItem xs="1">@item.StopSequence</MudItem>
                                        <MudItem xs="3">@item.PickingListItem.PickingList.SalesOrderNumber</MudItem>
                                        <MudItem xs="4">@item.PickingListItem.PickingList.Customer.CustomerName</MudItem>
                                        <MudItem xs="2" Style="text-align:right">@item.ShippedWeight.ToString("N2")</MudItem>
                                        <MudItem xs="1">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveItemFromLoad(item))" />
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudDropZone>
                        }
                    </MudContainer>
                </MudPaper>

                <MudStack Row="true" Class="mt-4">
                    <AuthorizeView>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveLoad" Disabled="@(_load.TruckId == null)">Save Load</MudButton>
                    </AuthorizeView>
                    <MudButton Variant="Variant.Outlined" OnClick="ClearLoad">Clear</MudButton>
                </MudStack>
            }
            else
            {
                <MudText>Select picking lists or use the partial load action to start building a load.</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<IGrouping<string, PickingList>> _allSalesOrderGroups = new();
    private IEnumerable<IGrouping<string, PickingList>> _filteredSalesOrderGroups = new List<IGrouping<string, PickingList>>();
    private HashSet<DestinationRegionCategory> _selectedCategoryFilters = new();

    private HashSet<IGrouping<string, PickingList>> _selectedGroups = new();
    private Load? _load;
    private List<LoadItem> _itemsInLoad = new();
    private List<Truck> _trucks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private DestinationRegionCategory GetRegionCategory(PickingList p)
    {
        if (p.Customer?.DestinationRegion is null)
        {
            return DestinationRegionCategory.OUT_OF_TOWN;
        }
        return DestinationRegionService.GetDestinationRegionCategory(p.Customer.DestinationRegion);
    }

    private async Task LoadData()
    {
        ClearLoad();
        _allSalesOrderGroups.Clear();

        var allPickingLists = await PickingListService.GetAvailableForLoadingAsync();
        _allSalesOrderGroups = allPickingLists
            .OrderBy(p => p.ShipDate)
            .GroupBy(p => p.SalesOrderNumber)
            .ToList();

        ApplyFilters();
        _trucks = await TruckService.GetTrucksAsync();
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        _filteredSalesOrderGroups = _allSalesOrderGroups
            .Where(g => !_selectedCategoryFilters.Any() || _selectedCategoryFilters.Contains(GetRegionCategory(g.First())))
            .ToList();
        StateHasChanged();
    }

    private void OnFilterChanged(IEnumerable<DestinationRegionCategory> values)
    {
        _selectedCategoryFilters = new HashSet<DestinationRegionCategory>(values);
        ApplyFilters();
    }

    private void OnGroupChecked(bool isChecked, IGrouping<string, PickingList> group)
    {
        if (isChecked)
        {
            _selectedGroups.Add(group);
        }
        else
        {
            _selectedGroups.Remove(group);
        }
        StateHasChanged();
    }

    private void CreateLoadFromSelected()
    {
        if (!_selectedGroups.Any()) return;

        _load = new Load { ShippingDate = DateTime.Today };
        _itemsInLoad.Clear();

        var allItems = _selectedGroups.SelectMany(g => g).SelectMany(pl => pl.Items);
        foreach (var item in allItems)
        {
            _itemsInLoad.Add(new LoadItem
            {
                PickingListItemId = item.Id,
                PickingListItem = item,
                ShippedQuantity = item.RemainingQuantity,
                ShippedWeight = item.RemainingWeight
            });
        }
        RecalculateStopSequence();
        UpdateLoadCapacity();
    }

    private void AddToLoad(IEnumerable<PartialLoadDialog.PartialShipmentItem> itemsToAdd)
    {
        _load ??= new Load { ShippingDate = DateTime.Today };

        var allPickingListItemsOnPage = _allSalesOrderGroups
            .SelectMany(g => g)
            .SelectMany(p => p.Items)
            .ToDictionary(i => i.Id);

        foreach (var itemToAdd in itemsToAdd)
        {
            if (allPickingListItemsOnPage.TryGetValue(itemToAdd.PickingListItemId, out var originalItem))
            {
                _itemsInLoad.Add(new LoadItem
                {
                    PickingListItemId = originalItem.Id,
                    PickingListItem = originalItem,
                    ShippedQuantity = itemToAdd.Quantity,
                    ShippedWeight = itemToAdd.Weight
                });
            }
        }
        RecalculateStopSequence();
        UpdateLoadCapacity();
    }

    private void RemoveItemFromLoad(LoadItem item)
    {
        _itemsInLoad.Remove(item);
        RecalculateStopSequence();
        UpdateLoadCapacity();
    }

    private async Task SaveLoad()
    {
        if (_load is null) return;

        _load.Items = _itemsInLoad;
        try
        {
            await LoadService.CreateAsync(_load);
            Snackbar.Add("Load saved successfully!", Severity.Success);
            await LoadData();
            ClearLoad();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save load: {ex.Message}", Severity.Error);
        }
    }

    private void ClearLoad()
    {
        _load = null;
        _itemsInLoad.Clear();
        _selectedGroups.Clear();
        _loadCapacity = 0;
        StateHasChanged();
    }

    private void ItemDropped(MudItemDropInfo<LoadItem> dropItem)
    {
        if (dropItem.Item == null || dropItem.DropzoneIdentifier == null) return;

        var itemToMove = dropItem.Item;
        var targetIdentifier = dropItem.DropzoneIdentifier;
        var targetItem = _itemsInLoad.FirstOrDefault(x => x.PickingListItemId.ToString() == targetIdentifier);

        if (targetItem == null) return;

        _itemsInLoad.Remove(itemToMove);
        var targetIndex = _itemsInLoad.IndexOf(targetItem);
        _itemsInLoad.Insert(targetIndex, itemToMove);

        RecalculateStopSequence();
        StateHasChanged();
    }

    private void RecalculateStopSequence()
    {
        for (int i = 0; i < _itemsInLoad.Count; i++)
        {
            _itemsInLoad[i].StopSequence = i + 1;
        }
    }

    private decimal _loadCapacity;
    private Color _loadCapacityColor = Color.Success;

    private void OnTruckChanged(int? truckId)
    {
        if (_load != null)
        {
            _load.TruckId = truckId;
            UpdateLoadCapacity();
        }
    }

    private void UpdateLoadCapacity()
    {
        if (_load == null)
        {
            _loadCapacity = 0;
            return;
        }

        _load.TotalWeight = _itemsInLoad.Sum(i => i.ShippedWeight);
        var truck = _trucks.FirstOrDefault(t => t.Id == _load.TruckId);

        if (truck == null || truck.CapacityWeight == 0)
        {
            _loadCapacity = _load.TotalWeight > 0 ? 100 : 0;
        }
        else
        {
            _loadCapacity = (_load.TotalWeight / truck.CapacityWeight) * 100;
        }

        if (_loadCapacity > 100) _loadCapacityColor = Color.Error;
        else if (_loadCapacity > 85) _loadCapacityColor = Color.Warning;
        else _loadCapacityColor = Color.Success;
    }

    private async Task OpenPartialLoadDialog(List<PickingList> pickingLists)
    {
        var parameters = new DialogParameters
        {
            ["PickingListItems"] = pickingLists.SelectMany(g => g.Items).ToList()
        };

        var dialog = await DialogService.ShowAsync<PartialLoadDialog>("Partial Load Selection", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is List<PartialLoadDialog.PartialShipmentItem> selectedItems)
        {
            AddToLoad(selectedItems);
        }
    }
}
