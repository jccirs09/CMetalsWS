@page "/planning/simplified-load-planning"
@using CMetalsWS.Data
@using CMetalsWS.Security
@using System.Linq
@using MudBlazor
@attribute [Authorize(Policy = Permissions.PickingLists.ManageLoads)]

@inject CMetalsWS.Services.PickingListService PickingListService
@inject CMetalsWS.Services.TruckService TruckService
@inject CMetalsWS.Services.LoadService LoadService
@inject CMetalsWS.Services.DestinationRegionService DestinationRegionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudText Typo="Typo.h4" GutterBottom="true">Simplified Load Creation</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">Create loads by selecting ship dates and orders.</MudText>

<MudGrid Spacing="3">
    @* Step 1: Choose a Ship Date *@
    <MudItem xs="12" md="3">
        <MudPaper Class="pa-3" Style="height: 100%;">
            <MudText Typo="Typo.h6" GutterBottom="true">Step 1: Choose a Ship Date</MudText>
            <MudText Typo="Typo.body2" Class="mb-4">Choose a ship date to see available orders.</MudText>
            <div class="d-flex flex-column gap-3">
                @foreach (var dateGroup in _ordersGroupedByDate)
                {
                    <MudCard Outlined="true" Class="@(_selectedShipDate == dateGroup.Key ? "selected-card" : "")" @onclick="() => SelectShipDate(dateGroup.Key)">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@dateGroup.Key.ToString("ddd, MMM dd")</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2"><strong>@dateGroup.Count()</strong> orders</MudText>
                            <MudText Typo="Typo.body2"><strong>@dateGroup.Sum(pl => pl.TotalWeight).ToString("N0")</strong> lbs</MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        </MudPaper>
    </MudItem>

    @* Step 2: Select Orders *@
    <MudItem xs="12" md="5">
        <MudPaper Class="pa-3" Style="height: 100%;">
            <MudText Typo="Typo.h6" GutterBottom="true">Step 2: Select Orders</MudText>
            @if (_selectedShipDate.HasValue)
            {
                <MudText Typo="Typo.body2" Class="mb-4">Orders for <strong>@_selectedShipDate.Value.ToShortDateString()</strong></MudText>
                <div class="d-flex flex-column gap-3">
                    @foreach (var cityGroup in _ordersGroupedByCity)
                    {
                        <MudPaper Outlined="true" Class="pa-2">
                            <div class="d-flex align-center">
                                <MudCheckBox T="bool" Label="@cityGroup.Key" Value="@AreAllInCityGroupSelected(cityGroup)" ValueChanged="@((bool val) => OnCityGroupChecked(val, cityGroup))" />
                                <MudSpacer />
                                <MudText Typo="Typo.caption">@cityGroup.Count() orders</MudText>
                            </div>
                            <div class="d-flex flex-column gap-2 pl-4">
                                @foreach (var order in cityGroup)
                                {
                                    <MudCard Outlined="true">
                                        <div class="d-flex align-center pa-2">
                                            <MudCheckBox T="bool" Value="@_selectedOrders.Contains(order)" ValueChanged="@((bool val) => OnOrderChecked(val, order))" />
                                            <div class="ml-2">
                                                <MudText Typo="Typo.body1">@order.Customer?.CustomerName</MudText>
                                                <MudText Typo="Typo.caption">SO: @order.SalesOrderNumber</MudText>
                                            </div>
                                            <MudSpacer />
                                            <div class="text-right">
                                                <MudText Typo="Typo.body2">@order.TotalWeight.ToString("N0") lbs</MudText>
                                                <MudIconButton Icon="@Icons.Material.Filled.Splitscreen" Size="Size.Small" OnClick="@(() => OpenPartialLoadDialog(order))" />
                                            </div>
                                        </div>
                                    </MudCard>
                                }
                            </div>
                        </MudPaper>
                    }
                </div>
            }
            else
            {
                <MudText>Select a ship date to see orders.</MudText>
            }
        </MudPaper>
    </MudItem>

    @* Step 3: Load Summary *@
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-3" Style="height: 100%;">
            <MudText Typo="Typo.h6" GutterBottom="true">Step 3: Load Summary</MudText>
            @if (_currentLoad != null && _selectedOrders.Any())
            {
                <MudText><strong>Ship Date:</strong> @_currentLoad.ShippingDate?.ToShortDateString()</MudText>
                <MudText><strong>Orders:</strong> @_selectedOrders.Count</MudText>
                <MudText><strong>Total Weight:</strong> @_currentLoad.TotalWeight.ToString("N0") lbs</MudText>

                <MudSelect T="int?"
                           Label="Truck"
                           @bind-Value="_currentLoad.TruckId"
                           For="@(() => _currentLoad.TruckId)"
                           Class="mt-4"
                           Disabled="@(!_availableTrucks.Any())"
                           HelperText="@(!_availableTrucks.Any() ? "No trucks available for this region, or orders span multiple regions." : "")">
                    @foreach (var truck in _availableTrucks)
                    {
                        <MudSelectItem T="int?" Value="@truck.Id">@truck.Name (@truck.CapacityWeight.ToString("N0") lbs)</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Label="Load Notes (Optional)" @bind-Value="_currentLoad.Notes" Lines="3" Class="mt-4" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="mt-4"
                           OnClick="CreateLoad"
                           Disabled="@(_currentLoad?.TruckId == null)">
                    Create Load
                </MudButton>
            }
            else
            {
                <MudText>Select orders to build a load.</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    .selected-card {
        border: 2px solid var(--mud-palette-primary) !important;
    }
</style>

@code {
    private List<PickingList> _allPickingLists = new();
    private List<IGrouping<DateTime, PickingList>> _ordersGroupedByDate = new();
    private DateTime? _selectedShipDate;

    private List<PickingList> _ordersForSelectedDate = new();
    private List<IGrouping<string, PickingList>> _ordersGroupedByCity = new();

    private HashSet<PickingList> _selectedOrders = new();
    private Load? _currentLoad;
    private List<Truck> _availableTrucks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _allPickingLists = await PickingListService.GetAvailableForLoadingAsync();
        _ordersGroupedByDate = _allPickingLists
            .Where(pl => pl.ShipDate.HasValue)
            .GroupBy(pl => pl.ShipDate!.Value.Date)
            .OrderBy(g => g.Key)
            .ToList();

        StateHasChanged();
    }

    private void SelectShipDate(DateTime date)
    {
        _selectedShipDate = date;
        _ordersForSelectedDate = _allPickingLists
            .Where(pl => pl.ShipDate.HasValue && pl.ShipDate.Value.Date == date.Date)
            .ToList();

        _ordersGroupedByCity = _ordersForSelectedDate
            .GroupBy(pl => pl.Customer?.City ?? "Unknown")
            .OrderBy(g => g.Key)
            .ToList();

        // Reset selections
        _selectedOrders.Clear();
        _currentLoad = null;

        StateHasChanged();
    }

    private void OnOrderCheckedInternal(bool isChecked, PickingList order)
    {
        _currentLoad ??= new Load { ShippingDate = _selectedShipDate, Items = new List<LoadItem>() };
        if (isChecked)
        {
            if (_selectedOrders.Add(order))
            {
                var itemsToAdd = order.Items.Select(i => new LoadItem
                {
                    PickingListItemId = i.Id,
                    PickingListItem = i,
                    ShippedQuantity = i.RemainingQuantity,
                    ShippedWeight = i.RemainingWeight
                });
                ((List<LoadItem>)_currentLoad.Items).AddRange(itemsToAdd);
            }
        }
        else
        {
            if (_selectedOrders.Remove(order))
            {
                var itemIdsToRemove = order.Items.Select(i => i.Id).ToHashSet();
                ((List<LoadItem>)_currentLoad.Items).RemoveAll(i => itemIdsToRemove.Contains(i.PickingListItemId));
            }
        }
    }

    private async Task OnOrderChecked(bool isChecked, PickingList order)
    {
        OnOrderCheckedInternal(isChecked, order);
        await UpdateLoadSummaryAndTrucks();
    }

    private async Task OnCityGroupChecked(bool isChecked, IGrouping<string, PickingList> cityGroup)
    {
        foreach (var order in cityGroup)
        {
            OnOrderCheckedInternal(isChecked, order);
        }
        await UpdateLoadSummaryAndTrucks();
    }

    private bool AreAllInCityGroupSelected(IGrouping<string, PickingList> cityGroup)
    {
        return cityGroup.All(order => _selectedOrders.Contains(order));
    }

    private async Task UpdateLoadSummaryAndTrucks()
    {
        if (_currentLoad == null || !_currentLoad.Items.Any())
        {
            _currentLoad = null;
            _availableTrucks.Clear();
            StateHasChanged();
            return;
        }

        _currentLoad.TotalWeight = _currentLoad.Items.Sum(i => i.ShippedWeight);

        var pickingListIds = _currentLoad.Items.Select(i => i.PickingListItem.PickingListId).Distinct();
        var pickingListsInLoad = _allPickingLists.Where(p => pickingListIds.Contains(p.Id)).ToList();

        var regionId = pickingListsInLoad.FirstOrDefault()?.Customer?.DestinationRegionId;
        var allInSameRegion = pickingListsInLoad.All(p => p.Customer?.DestinationRegionId == regionId);

        if (!allInSameRegion)
        {
            Snackbar.Add("All orders in a load must belong to the same destination region.", Severity.Warning);
            _availableTrucks.Clear();
        }
        else
        {
            _currentLoad.DestinationRegionId = regionId;
            _availableTrucks = await TruckService.GetTrucksAsync(destinationRegionId: regionId);
        }

        StateHasChanged();
    }

    private async Task CreateLoad()
    {
        if (_currentLoad is null || !_currentLoad.Items.Any() || _currentLoad.TruckId is null) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            Snackbar.Add("Could not retrieve user ID.", Severity.Error);
            return;
        }

        var firstLoadItem = _currentLoad.Items.FirstOrDefault();
        if (firstLoadItem?.PickingListItem == null)
        {
            Snackbar.Add("Could not determine origin branch for the load.", Severity.Error);
            return;
        }
        var pickingList = _allPickingLists.FirstOrDefault(p => p.Id == firstLoadItem.PickingListItem.PickingListId);
        if (pickingList == null)
        {
            Snackbar.Add("Could not determine origin branch for the load.", Severity.Error);
            return;
        }
        _currentLoad.OriginBranchId = pickingList.BranchId;

        try
        {
            await LoadService.CreateAsync(_currentLoad, userId);
            Snackbar.Add("Load created successfully!", Severity.Success);

            await LoadData();
            _selectedShipDate = null;
            _ordersForSelectedDate.Clear();
            _ordersGroupedByCity.Clear();
            _selectedOrders.Clear();
            _currentLoad = null;
            _availableTrucks.Clear();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create load: {ex.Message}", Severity.Error);
        }
        StateHasChanged();
    }

    private async Task OpenPartialLoadDialog(PickingList order)
    {
        var parameters = new DialogParameters { ["PickingListItems"] = order.Items.ToList() };
        var dialog = await DialogService.ShowAsync<PartialLoadDialog>("Partial Load Selection", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is List<PartialLoadDialog.PartialShipmentItem> selectedItems)
        {
            _currentLoad ??= new Load { ShippingDate = _selectedShipDate, Items = new List<LoadItem>() };

            var itemIdsToRemove = order.Items.Select(i => i.Id).ToHashSet();
            ((List<LoadItem>)_currentLoad.Items).RemoveAll(i => itemIdsToRemove.Contains(i.PickingListItemId));
            _selectedOrders.Remove(order);

            var allItemsInOrder = order.Items.ToDictionary(i => i.Id);
            var itemsToAdd = selectedItems.Select(si => new LoadItem
            {
                PickingListItemId = si.PickingListItemId,
                PickingListItem = allItemsInOrder[si.PickingListItemId],
                ShippedQuantity = si.Quantity,
                ShippedWeight = si.Weight
            }).ToList();

            ((List<LoadItem>)_currentLoad.Items).AddRange(itemsToAdd);

            await UpdateLoadSummaryAndTrucks();
        }
    }
}