@page "/planning/unified-load-planning"
@using CMetalsWS.Data
@using System.Linq
@using CMetalsWS.Security
@using MudBlazor
@attribute [Authorize(Policy = Permissions.PickingLists.ManageLoads)]

@inject CMetalsWS.Services.PickingListService PickingListService
@inject CMetalsWS.Services.TruckService TruckService
@inject CMetalsWS.Services.LoadService LoadService
@inject CMetalsWS.Services.DestinationRegionService DestinationRegionService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_showDashboard)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudGrid>
            <MudItem xs="12">
                <div class="d-flex justify-space-between align-center mb-4">
                    <div>
                        <MudText Typo="Typo.h5">Regional Delivery Management</MudText>
                        <MudText Typo="Typo.body2" Class="text-muted">Manage deliveries across different geographical regions and service types</MudText>
                    </div>
                    <div class="d-flex gap-2">
                        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.AltRoute" Size="Size.Small">Optimize Routes</MudButton>
                        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Schedule" Size="Size.Small">Schedule Pools</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => _showDashboard = false)">New Load</MudButton>
                    </div>
                </div>
            </MudItem>

            <MudItem xs="12">
                <MudGrid>
                    @foreach (var region in _regionalData)
                    {
                        var isHighlighted = _highlightedRegionId == region.Id;
                        <MudItem xs="12" sm="6" md>
                            <MudPaper
                                @onmouseenter="@(() => _highlightedRegionId = region.Id)"
                                @onmouseleave="@(() => _highlightedRegionId = null)"
                                Class="@($"pa-4 rounded-lg d-flex flex-column justify-space-between mud-theme-{region.Color.ToString().ToLower()}-lighten-5")"
                                Style="height: 100%; cursor: pointer; transition: background-color 0.3s, box-shadow 0.3s;"
                                Elevation="@(isHighlighted ? 4 : 1)">

                                <div>
                                    <div class="d-flex justify-space-between align-start">
                                        <MudAvatar Class="@($"mud-theme-{region.Color.ToString().ToLower()}-lighten-4")">
                                            <MudIcon Icon="@region.Icon" Color="@region.Color"/>
                                        </MudAvatar>
                                        <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small">@region.UtilizationRate%</MudChip>
                                    </div>

                                    <div class="mt-3">
                                        <MudText Typo="Typo.subtitle1">@region.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="text-muted" Style="min-height: 48px;">@region.Description</MudText>
                                    </div>

                                    <div class="mt-3 space-y-1">
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Class="text-muted">Active Orders:</MudText>
                                            <MudText Typo="Typo.body2" Class="font-weight-bold">@region.ActiveOrders</MudText>
                                        </div>
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Class="text-muted">Avg Delivery:</MudText>
                                            <MudText Typo="Typo.body2" Class="font-weight-bold">@region.AverageDeliveryTime</MudText>
                                        </div>
                                        <div class="d-flex justify-space-between">
                                            <MudText Typo="Typo.body2" Class="text-muted">Cost/Delivery:</MudText>
                                            <MudText Typo="Typo.body2" Class="font-weight-bold">$@region.CostPerDelivery</MudText>
                                        </div>
                                        @if (region.PendingPickups > 0)
                                        {
                                            <div class="d-flex justify-space-between align-center">
                                                <MudText Typo="Typo.body2" Class="text-muted">Pending Pickups:</MudText>
                                                <MudChip Label="true" Color="Color.Error" Size="Size.Small">@region.PendingPickups</MudChip>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="mt-3 pt-3 border-t-1 border-solid border-gray-200">
                                    <MudText Typo="Typo.body2" Class="d-flex align-center gap-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small"/>
                                        @region.Coordinator
                                    </MudText>
                                    @if (isHighlighted)
                                    {
                                        <MudText Typo="Typo.body2" Class="d-flex align-center gap-2 mt-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small"/>
                                            @region.Phone
                                        </MudText>
                                        @if (region.FerryDependent)
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Primary" Class="d-flex align-center gap-2 mt-1">
                                                <MudIcon Icon="@Icons.Material.Filled.Navigation" Size="Size.Small"/>
                                                Ferry Dependent
                                            </MudText>
                                        }
                                        @if (region.RequiresPooling)
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Warning" Class="d-flex align-center gap-2 mt-1">
                                                <MudIcon Icon="@Icons.Material.Filled.Layers" Size="Size.Small"/>
                                                Pool Delivery
                                            </MudText>
                                        }
                                    }
                                </div>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.ViewList" Class="mr-2"/>
                                <MudText Typo="Typo.h6">Orders by Region</MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList Clickable="false">
                            @foreach (var region in _regionalData)
                            {
                                <MudListItem>
                                    <div class="d-flex align-center" style="width: 100%;">
                                        <MudAvatar Class="@($"mr-4 mud-theme-{region.Color.ToString().ToLower()}-lighten-4")">
                                            <MudIcon Icon="@region.Icon" Color="@region.Color" />
                                        </MudAvatar>
                                        <div class="flex-grow-1">
                                            <MudText>@region.Name</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">@region.TotalWeight.ToString("N0") lbs</MudText>
                                        </div>
                                        <div class="text-right">
                                            <MudText>@region.OrderCount orders</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">$@region.TotalValue.ToString("N0")</MudText>
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Class="mr-2"/>
                                <MudText Typo="Typo.h6">Fleet Assignment</MudText>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList Clickable="false">
                            @foreach (var region in _regionalData)
                            {
                                <MudListItem>
                                    <div class="d-flex align-center" style="width: 100%;">
                                        <MudAvatar Class="@($"mr-4 mud-theme-{region.Color.ToString().ToLower()}-lighten-4")">
                                            <MudIcon Icon="@region.Icon" Color="@region.Color" />
                                        </MudAvatar>
                                        <div class="flex-grow-1">
                                            <MudText>@region.Name</MudText>
                                            <MudText Typo="Typo.body2" Class="text-muted">@region.ActiveTrucks active • @region.PoolTrucks pool trucks</MudText>
                                        </div>
                                        <div class="text-right">
                                            <MudText>@region.TruckCount trucks</MudText>
                                            @if (region.FerryCapableTrucks > 0)
                                            {
                                                <MudText Typo="Typo.body2" Class="text-primary">@region.FerryCapableTrucks ferry capable</MudText>
                                            }
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="d-flex align-center gap-4 pa-4 rounded-lg mud-theme-warning-lighten-5">
                            <MudIcon Icon="@Icons.Material.Filled.Report" Color="Color.Warning" Size="Size.Large"/>
                            <div>
                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold mud-theme-warning-darken-1">Island Pool Alert</MudText>
                                <MudText Typo="Typo.body2" Class="mud-theme-warning-darken-1">Ferry booking required for 8 orders by 4 PM today</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="d-flex align-center gap-4 pa-4 rounded-lg mud-theme-info-lighten-5">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Large"/>
                            <div>
                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold mud-theme-info-darken-1">Okanagan Pool Ready</MudText>
                                <MudText Typo="Typo.body2" Class="mud-theme-info-darken-1">Pool consolidation complete - ready for dispatch</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudPaper Class="d-flex align-center gap-4 pa-4 rounded-lg mud-theme-success-lighten-5">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large"/>
                            <div>
                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold mud-theme-success-darken-1">Customer Pickup</MudText>
                                <MudText Typo="Typo.body2" Class="mud-theme-success-darken-1">3 orders scheduled for pickup today</MudText>
                            </div>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudContainer>
}
else
{
    <div class="d-flex justify-end mb-4">
        <MudButton Variant="Variant.Text" OnClick="@(() => _showDashboard = true)" Class="mb-4">Back to Dashboard</MudButton>
    </div>
    <MudGrid>
        <MudItem xs="12" md="7">
            <MudPaper Class="pa-4" Style="height: 100%;">
                <MudText Typo="Typo.h6">Available Picking Lists</MudText>

                <MudPaper Class="pa-2 mb-4">
                <MudToolBar>
                    <MudSelect T="DestinationRegionCategory"
                               Label="Filter by Region"
                               MultiSelection="true"
                               SelectedValues="_selectedCategoryFilters"
                               SelectedValuesChanged="OnFilterChanged"
                               Clearable="true">
                        @foreach (DestinationRegionCategory category in Enum.GetValues(typeof(DestinationRegionCategory)))
                        {
                            <MudSelectItem T="DestinationRegionCategory" Value="@category">@category.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudToolBar>
            </MudPaper>

            <div class="d-flex flex-column gap-4">
                @foreach (var group in _filteredSalesOrderGroups)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex align-center pa-1" style="width:100%">
                                <MudCheckBox T="bool" Value="@(_selectedGroups.Contains(group))" ValueChanged="@((bool val) => OnGroupChecked(val, group))" Class="mr-2" />
                                <MudCard Outlined="true" Class="flex-grow-1">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">SO: @group.Key</MudText>
                                            <MudText Typo="Typo.body1">@group.First().Customer?.CustomerName</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudTooltip Text="Create a load with a partial list of items from this SO">
                                                <MudIconButton Icon="@Icons.Material.Filled.Splitscreen" Size="Size.Small" OnClick="@(() => OpenPartialLoadDialog(group.ToList()))" />
                                            </MudTooltip>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                    <MudCardContent Class="d-flex flex-row gap-4">
                                        <div>
                                            <MudText Typo="Typo.caption">Weight</MudText>
                                            <MudText Typo="Typo.body1">@group.SelectMany(pl => pl.Items).Sum(pli => pli.RemainingWeight).ToString("N2") lbs</MudText>
                                        </div>
                                        <div>
                                            <MudText Typo="Typo.caption">Status</MudText>
                                            <MudText Typo="Typo.body1">@group.First().Status</MudText>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudTable Items="@(group.SelectMany(pl => pl.Items).ToList())" Dense="true" Striped="true" Hover="true" SortLabel="Sort By">
                                <HeaderContent>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.ItemId)">Item ID</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.ItemDescription)">Description</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.PulledWeight)">Pulled Wt.</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<PickingListItem, object>(x => x.PulledQuantity ?? 0)">Pulled Qty.</MudTableSortLabel></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
                                    <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                                    <MudTd DataLabel="Pulled Wt.">@context.PulledWeight</MudTd>
                                    <MudTd DataLabel="Pulled Qty.">@context.PulledQuantity</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </div>

            <AuthorizeView>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_selectedGroups.Any())" OnClick="CreateLoadFromSelected" Class="mt-4">Create Load with Selected</MudButton>
            </AuthorizeView>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md="5">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <MudText Typo="Typo.h6">Load Builder</MudText>
            @if (_load != null)
            {
                <MudSelect T="int?" Label="Truck" Value="_load.TruckId" ValueChanged="@OnTruckChanged" For="@(() => _load.TruckId)">
                    @foreach (var truck in _trucks)
                    {
                        <MudSelectItem Value="@truck.Id">@truck.Name (@truck.CapacityWeight lbs)</MudSelectItem>
                    }
                </MudSelect>
                <MudDatePicker Label="Shipping Date" @bind-Date="_load.ShippingDate" />
                <MudTextField Label="Notes" @bind-Value="_load.Notes" Lines="2" />
                <MudText Typo="Typo.caption" Class="mt-2">Load Capacity:</MudText>
                <MudProgressLinear Color="@_loadCapacityColor" Value="@((double)_loadCapacity)" Class="my-1" />
                <MudText Typo="Typo.body2"><strong>Total Weight:</strong> @_load.TotalWeight lbs</MudText>

                <MudPaper Class="mt-4" Outlined="true">
                    <MudToolBar>
                        <MudText Typo="Typo.subtitle1">Items in Load</MudText>
                    </MudToolBar>
                    <MudContainer Style="max-height: 300px; overflow-y: auto">
                        @foreach (var item in _itemsInLoad)
                        {
                            <MudDropZone T="LoadItem" OnItemDropped="ItemDropped" Identifier="@(item.PickingListItemId.ToString())">
                                <MudPaper Elevation="2" Class="pa-2 ma-1">
                                    <MudGrid>
                                        <MudItem xs="1">@item.StopSequence</MudItem>
                                        <MudItem xs="3">@item.PickingListItem.PickingList.SalesOrderNumber</MudItem>
                                        <MudItem xs="4">@item.PickingListItem.PickingList.Customer.CustomerName</MudItem>
                                        <MudItem xs="2" Style="text-align:right">@item.ShippedWeight.ToString("N2")</MudItem>
                                        <MudItem xs="1">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveItemFromLoad(item))" />
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudDropZone>
                        }
                    </MudContainer>
                </MudPaper>

                <MudStack Row="true" Class="mt-4">
                    <AuthorizeView>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveLoad" Disabled="@(_load.TruckId == null)">Save Load</MudButton>
                    </AuthorizeView>
                    <MudButton Variant="Variant.Outlined" OnClick="ClearLoad">Clear</MudButton>
                </MudStack>
            }
            else
            {
                <MudText>Select picking lists or use the partial load action to start building a load.</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>
}

@code {
    private bool _showDashboard = true;
    private string? _highlightedRegionId;
    private List<RegionalViewModel> _regionalData = new();

    private List<IGrouping<string, PickingList>> _allSalesOrderGroups = new();
    private IEnumerable<IGrouping<string, PickingList>> _filteredSalesOrderGroups = new List<IGrouping<string, PickingList>>();
    private HashSet<DestinationRegionCategory> _selectedCategoryFilters = new();
    private HashSet<IGrouping<string, PickingList>> _selectedGroups = new();
    private Load? _load;
    private List<LoadItem> _itemsInLoad = new();
    private List<Truck> _trucks = new();
    private List<DestinationRegion> _regions = new();
    private List<PickingList> _allPickingLists = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        InitializeRegionalViewModel();
    }

    private void InitializeRegionalViewModel()
    {
        var activeStatuses = new[] { PickingListStatus.Awaiting, PickingListStatus.InProgress, PickingListStatus.Scheduled, PickingListStatus.Picked, PickingListStatus.ReadyToShip, PickingListStatus.Ready };
        var newRegionalData = new List<RegionalViewModel>();

        foreach (var region in _regions)
        {
            var category = DestinationRegionService.GetDestinationRegionCategory(region);
            if (!_supplementaryRegionData.TryGetValue(category.ToString(), out var supData)) continue;

            var regionOrders = _allPickingLists.Where(o => o.DestinationRegionId == region.Id).ToList();
            var regionTrucks = _trucks.Where(t => t.BranchId == region.Branches.FirstOrDefault()?.Id).ToList();

            newRegionalData.Add(new RegionalViewModel
            {
                Id = region.Id.ToString(),
                Name = supData.Name,
                Type = category.ToString().ToLower().Replace("_", "-"),
                Description = supData.Desc,
                Icon = supData.Icon,
                Color = supData.Color,
                Coordinator = supData.Coord,
                Phone = supData.Phone,
                FerryDependent = supData.Ferry,
                RequiresPooling = supData.Pool,
                AverageDeliveryTime = supData.AvgTime,
                UtilizationRate = supData.Util,
                CostPerDelivery = supData.Cost,
                PendingPickups = supData.Pending,
                ActiveOrders = regionOrders.Count(o => activeStatuses.Contains(o.Status)),
                OrderCount = regionOrders.Count,
                TotalWeight = regionOrders.Sum(o => o.TotalWeight),
                TotalValue = 0, // Placeholder
                TruckCount = regionTrucks.Count,
                ActiveTrucks = regionTrucks.Count(t => t.IsActive),
                PoolTrucks = (category == DestinationRegionCategory.ISLAND || category == DestinationRegionCategory.OKANAGAN) ? regionTrucks.Count : 0,
                FerryCapableTrucks = category == DestinationRegionCategory.ISLAND ? regionTrucks.Count : 0
            });
        }

        // Add special Customer Pickup category
        var pickupSupData = _supplementaryRegionData["CUSTOMER_PICKUP"];
        var pickupOrders = _allPickingLists.Where(o => o.Destination?.Contains("pickup", StringComparison.OrdinalIgnoreCase) == true).ToList();
        newRegionalData.Add(new RegionalViewModel
        {
            Id = "customer-pickup",
            Name = pickupSupData.Name,
            Type = "customer-pickup",
            Description = pickupSupData.Desc,
            Icon = pickupSupData.Icon,
            Color = pickupSupData.Color,
            Coordinator = pickupSupData.Coord,
            Phone = pickupSupData.Phone,
            ActiveOrders = pickupOrders.Count(o => activeStatuses.Contains(o.Status)),
            PendingPickups = pickupSupData.Pending,
            AverageDeliveryTime = pickupSupData.AvgTime,
            UtilizationRate = pickupSupData.Util,
            CostPerDelivery = pickupSupData.Cost,
            OrderCount = pickupOrders.Count,
            TotalWeight = pickupOrders.Sum(o => o.TotalWeight)
        });

        _regionalData = newRegionalData.OrderBy(d => d.Name).ToList();
    }

    private DestinationRegionCategory GetRegionCategory(PickingList p)
    {
        if (p.Customer?.DestinationRegion is null)
        {
            return DestinationRegionCategory.OUT_OF_TOWN;
        }
        return DestinationRegionService.GetDestinationRegionCategory(p.Customer.DestinationRegion);
    }

    private async Task LoadData()
    {
        ClearLoad();
        _allSalesOrderGroups.Clear();

        _allPickingLists = await PickingListService.GetAvailableForLoadingAsync();
        _regions = (await DestinationRegionService.GetDestinationRegionsAsync()).ToList();

        _allSalesOrderGroups = _allPickingLists
            .OrderBy(p => p.ShipDate)
            .GroupBy(p => p.SalesOrderNumber)
            .ToList();

        ApplyFilters();
        _trucks = await TruckService.GetTrucksAsync();
        StateHasChanged();
    }

    private static readonly Dictionary<string, (string Name, string Desc, string Icon, Color Color, string Coord, string Phone, bool Ferry, bool Pool, string AvgTime, int Util, int Cost, int Pending)> _supplementaryRegionData = new()
    {
        { "LOCAL", ("Local Delivery", "Same-day and next-day deliveries within metro area", Icons.Material.Filled.Apartment, Color.Success, "Sarah Chen", "(604) 555-0123", false, false, "4-8 hours", 85, 125, 0) },
        { "OUT_OF_TOWN", ("Multi Out of Town Lanes", "Regional deliveries to multiple towns and cities", Icons.Material.Filled.Route, Color.Info, "Mike Rodriguez", "(604) 555-0456", false, true, "2-4 days", 72, 850, 3) },
        { "ISLAND", ("Island Pool Trucks", "Consolidated ferry-dependent deliveries to Vancouver Island", Icons.Material.Filled.Navigation, Color.Primary, "Jennifer Wilson", "(604) 555-0789", true, true, "3-5 days", 68, 320, 8) },
        { "OKANAGAN", ("Okanagan Pool Trucks", "Pooled deliveries to Okanagan Valley region", Icons.Material.Filled.Map, Color.Warning, "Carlos Martinez", "(604) 555-0321", false, true, "4-7 days", 58, 420, 5) },
        { "CUSTOMER_PICKUP", ("Customer Pickup", "Customer self-pickup coordination and scheduling", Icons.Material.Filled.People, Color.Default, "Lisa Thompson", "(604) 555-0654", false, false, "Same day", 95, 0, 9) }
    };

    public class RegionalViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public Color Color { get; set; }
        public string Coordinator { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public bool FerryDependent { get; set; }
        public bool RequiresPooling { get; set; }
        public int ActiveOrders { get; set; }
        public int PendingPickups { get; set; }
        public string AverageDeliveryTime { get; set; } = string.Empty;
        public int UtilizationRate { get; set; }
        public int CostPerDelivery { get; set; }
        public int OrderCount { get; set; }
        public decimal TotalWeight { get; set; }
        public decimal TotalValue { get; set; }
        public int TruckCount { get; set; }
        public int ActiveTrucks { get; set; }
        public int PoolTrucks { get; set; }
        public int FerryCapableTrucks { get; set; }
    }

    private void ApplyFilters()
    {
        _filteredSalesOrderGroups = _allSalesOrderGroups
            .Where(g => !_selectedCategoryFilters.Any() || _selectedCategoryFilters.Contains(GetRegionCategory(g.First())))
            .ToList();
        StateHasChanged();
    }

    private void OnFilterChanged(IEnumerable<DestinationRegionCategory> values)
    {
        _selectedCategoryFilters = new HashSet<DestinationRegionCategory>(values);
        ApplyFilters();
    }

    private void OnGroupChecked(bool isChecked, IGrouping<string, PickingList> group)
    {
        if (isChecked)
        {
            _selectedGroups.Add(group);
        }
        else
        {
            _selectedGroups.Remove(group);
        }
        StateHasChanged();
    }

    private void CreateLoadFromSelected()
    {
        if (!_selectedGroups.Any()) return;

        _load = new Load { ShippingDate = DateTime.Today };
        _itemsInLoad.Clear();

        var allItems = _selectedGroups.SelectMany(g => g).SelectMany(pl => pl.Items);
        foreach (var item in allItems)
        {
            _itemsInLoad.Add(new LoadItem
            {
                PickingListItemId = item.Id,
                PickingListItem = item,
                ShippedQuantity = item.RemainingQuantity,
                ShippedWeight = item.RemainingWeight
            });
        }
        RecalculateStopSequence();
        UpdateLoadCapacity();
    }

    private void AddToLoad(IEnumerable<PartialLoadDialog.PartialShipmentItem> itemsToAdd)
    {
        _load ??= new Load { ShippingDate = DateTime.Today };

        var allPickingListItemsOnPage = _allSalesOrderGroups
            .SelectMany(g => g)
            .SelectMany(p => p.Items)
            .ToDictionary(i => i.Id);

        foreach (var itemToAdd in itemsToAdd)
        {
            if (allPickingListItemsOnPage.TryGetValue(itemToAdd.PickingListItemId, out var originalItem))
            {
                _itemsInLoad.Add(new LoadItem
                {
                    PickingListItemId = originalItem.Id,
                    PickingListItem = originalItem,
                    ShippedQuantity = itemToAdd.Quantity,
                    ShippedWeight = itemToAdd.Weight
                });
            }
        }
        RecalculateStopSequence();
        UpdateLoadCapacity();
    }

    private void RemoveItemFromLoad(LoadItem item)
    {
        _itemsInLoad.Remove(item);
        RecalculateStopSequence();
        UpdateLoadCapacity();
    }

    private async Task SaveLoad()
    {
        if (_load is null) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Snackbar.Add("User is not authenticated.", Severity.Error);
            return;
        }
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            Snackbar.Add("Could not retrieve user ID.", Severity.Error);
            return;
        }

        _load.Items = _itemsInLoad;
        try
        {
            await LoadService.CreateAsync(_load, userId);
            Snackbar.Add("Load saved successfully!", Severity.Success);
            await LoadData();
            ClearLoad();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save load: {ex.Message}", Severity.Error);
        }
    }

    private void ClearLoad()
    {
        _load = null;
        _itemsInLoad.Clear();
        _selectedGroups.Clear();
        _loadCapacity = 0;
        StateHasChanged();
    }

    private void ItemDropped(MudItemDropInfo<LoadItem> dropItem)
    {
        if (dropItem.Item == null || dropItem.DropzoneIdentifier == null) return;

        var itemToMove = dropItem.Item;
        var targetIdentifier = dropItem.DropzoneIdentifier;
        var targetItem = _itemsInLoad.FirstOrDefault(x => x.PickingListItemId.ToString() == targetIdentifier);

        if (targetItem == null) return;

        _itemsInLoad.Remove(itemToMove);
        var targetIndex = _itemsInLoad.IndexOf(targetItem);
        _itemsInLoad.Insert(targetIndex, itemToMove);

        RecalculateStopSequence();
        StateHasChanged();
    }

    private void RecalculateStopSequence()
    {
        for (int i = 0; i < _itemsInLoad.Count; i++)
        {
            _itemsInLoad[i].StopSequence = i + 1;
        }
    }

    private decimal _loadCapacity;
    private Color _loadCapacityColor = Color.Success;

    private void OnTruckChanged(int? truckId)
    {
        if (_load != null)
        {
            _load.TruckId = truckId;
            UpdateLoadCapacity();
        }
    }

    private void UpdateLoadCapacity()
    {
        if (_load == null)
        {
            _loadCapacity = 0;
            return;
        }

        _load.TotalWeight = _itemsInLoad.Sum(i => i.ShippedWeight);
        var truck = _trucks.FirstOrDefault(t => t.Id == _load.TruckId);

        if (truck == null || truck.CapacityWeight == 0)
        {
            _loadCapacity = _load.TotalWeight > 0 ? 100 : 0;
        }
        else
        {
            _loadCapacity = (_load.TotalWeight / truck.CapacityWeight) * 100;
        }

        if (_loadCapacity > 100) _loadCapacityColor = Color.Error;
        else if (_loadCapacity > 85) _loadCapacityColor = Color.Warning;
        else _loadCapacityColor = Color.Success;
    }

    private async Task OpenPartialLoadDialog(List<PickingList> pickingLists)
    {
        var parameters = new DialogParameters
        {
            ["PickingListItems"] = pickingLists.SelectMany(g => g.Items).ToList()
        };

        var dialog = await DialogService.ShowAsync<PartialLoadDialog>("Partial Load Selection", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is List<PartialLoadDialog.PartialShipmentItem> selectedItems)
        {
            AddToLoad(selectedItems);
        }
    }
}
