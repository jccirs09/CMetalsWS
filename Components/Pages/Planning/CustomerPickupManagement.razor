@using CMetalsWS.Models
@using MudBlazor

<MudPaper Class="pa-4" Style="height: 100%;">
    <MudText Typo="Typo.h6" GutterBottom="true">Customer Pickup Management</MudText>
    <MudText Typo="Typo.body2" Class="text-muted mb-4">Manage orders scheduled for self-pickup by customers.</MudText>

    @if (PickupOrders == null || !PickupOrders.Any())
    {
        <MudAlert Severity="Severity.Info">There are no orders scheduled for customer pickup.</MudAlert>
    }
    else
    {
        <MudStack Spacing="3">
            @foreach (var order in PickupOrders)
            {
                <MudPaper Outlined="true" Class="pa-3">
                    <div class="d-flex justify-space-between align-center">
                        <div class="flex-grow-1">
                            <MudText Typo="Typo.h6">@order.CustomerName</MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">Order: @order.OrderNumber</MudText>
                            <MudText Typo="Typo.caption">Ready Date: @order.ReadyDate.ToString("D")</MudText>
                        </div>
                        <div class="text-right mr-4">
                            <MudText><b>@order.Weight.ToString("N0") lbs</b></MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">@order.Pieces pcs</MudText>
                        </div>
                        <div>
                            <MudChip T="string" Color="@GetStatusColor(order.PickingStatus)">@order.PickingStatus</MudChip>
                        </div>
                        <div class="ml-4">
                            <MudButton Variant="Variant.Outlined" Size="Size.Small" Class="mr-2">Mark as Ready</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">Mark as Picked Up</MudButton>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter]
    public List<AvailableOrder> PickupOrders { get; set; } = new();

    private Color GetStatusColor(string status) => status.ToLower() switch
    {
        "ready" => Color.Success,
        "pending" => Color.Warning,
        "inprogress" => Color.Info,
        _ => Color.Default
    };
}