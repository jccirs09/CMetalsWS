@using System.Security.Claims
@using CMetalsWS.Models
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@inject IDialogService DialogService
@inject FulfillmentService FulfillmentService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider

<MudPaper Class="pa-4" Style="height: 100%;">
    <MudText Typo="Typo.h6" GutterBottom="true">Customer Pickup Orders</MudText>
    <MudText Typo="Typo.body2" Class="text-muted mb-4">Select an order to record a customer pickup.</MudText>

    @if (PickupOrders == null || !PickupOrders.Any())
    {
        <MudAlert Severity="Severity.Info">There are no orders scheduled for customer pickup in this region.</MudAlert>
    }
    else
    {
        <MudStack Spacing="3">
            @foreach (var order in PickupOrders)
            {
                <MudPaper Outlined="true" Class="pa-3">
                    <div class="d-flex justify-space-between align-center">
                        <div class="flex-grow-1">
                            <MudText Typo="Typo.h6">@order.CustomerName</MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">Order: @order.OrderNumber</MudText>
                            <MudText Typo="Typo.caption">Ready Date: @order.ReadyDate.ToString("D")</MudText>
                        </div>
                        <div class="text-right mr-4">
                            <MudText><b>@order.Weight.ToString("N0") lbs</b></MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">@order.Pieces pcs</MudText>
                        </div>
                        <div class="ml-4">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="@(() => ManagePickup(order))">
                                Manage Pickup
                            </MudButton>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter]
    public List<AvailableOrder> PickupOrders { get; set; } = new();

    [Parameter]
    public EventCallback OnPickupRecorded { get; set; }

    private async Task ManagePickup(AvailableOrder order)
    {
        var selectionDialog = await DialogService.ShowAsync<PickupTypeSelectionDialog>("Select Pickup Type");
        var selectionResult = await selectionDialog.Result;

        if (!selectionResult.Canceled && selectionResult.Data is bool isFullOrder)
        {
            if (isFullOrder)
            {
                // Full order pickup
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
                if (string.IsNullOrEmpty(userId))
                {
                    Snackbar.Add("User not found.", Severity.Error);
                    return;
                }

                if (int.TryParse(order.Id, out var orderId))
                {
                    try
                    {
                        await FulfillmentService.RecordFullOrderPickupAsync(orderId, userId);
                        Snackbar.Add("Full order pickup recorded successfully!", Severity.Success);
                        await OnPickupRecorded.InvokeAsync();
                    }
                    catch (Exception ex)
                    {
                        Snackbar.Add($"Error recording full pickup: {ex.Message}", Severity.Error);
                    }
                }
            }
            else
            {
                // Partial pickup
                var parameters = new DialogParameters { ["Order"] = order };
                var pickupDialog = await DialogService.ShowAsync<RecordPickupDialog>("Record Partial Pickup", parameters);
                var pickupResult = await pickupDialog.Result;

                if (!pickupResult.Canceled && pickupResult.Data is bool pickupWasRecorded && pickupWasRecorded)
                {
                    await OnPickupRecorded.InvokeAsync();
                }
            }
        }
    }
}