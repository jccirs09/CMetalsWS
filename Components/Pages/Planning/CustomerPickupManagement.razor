@using CMetalsWS.Models
@using MudBlazor
@inject IDialogService DialogService

<MudPaper Class="pa-4" Style="height: 100%;">
    <MudText Typo="Typo.h6" GutterBottom="true">Customer Pickup Orders</MudText>
    <MudText Typo="Typo.body2" Class="text-muted mb-4">Select an order to record a partial or full customer pickup.</MudText>

    @if (PickupOrders == null || !PickupOrders.Any())
    {
        <MudAlert Severity="Severity.Info">There are no orders scheduled for customer pickup in this region.</MudAlert>
    }
    else
    {
        <MudStack Spacing="3">
            @foreach (var order in PickupOrders)
            {
                <MudPaper Outlined="true" Class="pa-3">
                    <div class="d-flex justify-space-between align-center">
                        <div class="flex-grow-1">
                            <MudText Typo="Typo.h6">@order.CustomerName</MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">Order: @order.OrderNumber</MudText>
                            <MudText Typo="Typo.caption">Ready Date: @order.ReadyDate.ToString("D")</MudText>
                        </div>
                        <div class="text-right mr-4">
                            <MudText><b>@order.Weight.ToString("N0") lbs</b></MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">@order.Pieces pcs</MudText>
                        </div>
                        <div class="ml-4">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       OnClick="@(() => OpenPickupDialog(order))">
                                Record Pickup
                            </MudButton>
                        </div>
                    </div>
                </MudPaper>
            }
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter]
    public List<AvailableOrder> PickupOrders { get; set; } = new();

    [Parameter]
    public EventCallback OnPickupRecorded { get; set; }

    private async Task OpenPickupDialog(AvailableOrder order)
    {
        var parameters = new DialogParameters { ["Order"] = order };
        var dialog = await DialogService.ShowAsync<RecordPickupDialog>("Record Customer Pickup", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool pickupWasRecorded && pickupWasRecorded)
        {
            // A pickup was recorded, so we should notify the parent to refresh data.
            await OnPickupRecorded.InvokeAsync();
        }
    }
}