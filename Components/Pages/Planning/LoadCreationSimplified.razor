@using System.Security.Claims
@using CMetalsWS.Data
@using CMetalsWS.Models
@using CMetalsWS.Services
@using MudBlazor
@inject LoadService LoadService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider

<MudGrid Spacing="4">
    @* Ship Dates Column *@
    <MudItem xs="12" md="3">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h6">Ship Dates</MudText>
                <div class="text-right">
                    <MudText Typo="Typo.body2"><b>@FilteredAvailableOrders.Sum(o => o.Weight).ToString("N0") lbs</b></MudText>
                    <MudText Typo="Typo.caption" Class="text-muted">@FilteredAvailableOrders.Count() orders total</MudText>
                </div>
            </div>
            <MudList T="DateTime?" Clickable="true" SelectedValue="SelectedShipDate" SelectedValueChanged="OnSelectedShipDateChanged" Style="max-height: 70vh; overflow-y: auto;">
                @foreach (var date in AvailableShipDates)
                {
                    var ordersForDate = OrdersByDate(date);
                    <MudListItem Value="@((DateTime?)date)">
                        <div class="d-flex justify-space-between align-center" style="width:100%">
                            <div>
                                <MudText><b>@date.ToString("dddd, MMM dd")</b></MudText>
                                <MudText Typo="Typo.caption" Class="text-muted">@date.ToString("yyyy")</MudText>
                            </div>
                            <div class="text-right">
                                <MudText Typo="Typo.body2"><b>@ordersForDate.Sum(o => o.Weight).ToString("N0") lbs</b></MudText>
                                <MudText Typo="Typo.caption" Class="text-muted">@ordersForDate.Count() orders</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>

    @* Orders & Line Items Column *@
    <MudItem xs="12" md="5">
        <MudPaper Class="pa-4" Style="height: 100%;">
            <div class="d-flex justify-space-between align-center mb-4">
                <div>
                    <MudText Typo="Typo.h6">Orders & Line Items</MudText>
                    <MudText Typo="Typo.body2" Class="text-muted">@OrdersForSelectedDate.Count() Available Orders</MudText>
                </div>
                <MudButton Variant="Variant.Text" @onclick="ClearSelections">Clear Selections</MudButton>
            </div>

            <div class="d-flex flex-column gap-4" style="max-height: 70vh; overflow-y: auto;">
                @foreach (var order in OrdersForSelectedDate)
                {
                    <MudPaper Outlined="true">
                        <MudExpansionPanel Text="@($"{order.CustomerName} ({order.OrderNumber})")">
                            <TitleContent>
                                <div class="d-flex align-center pa-1" style="width:100%">
                                    <MudCheckBox T="bool" Value="@(SelectedOrderIds.Contains(order.Id))" ValueChanged="@((bool val) => ToggleOrderSelection(order, val))" Class="mr-2" />
                                    <div class="flex-grow-1">
                                        <MudText><b>@order.CustomerName</b></MudText>
                                        <MudText Typo="Typo.body2" Class="text-muted">@order.OrderNumber</MudText>
                                    </div>
                                    <div class="text-right">
                                        <MudText>@order.Weight.ToString("N0") lbs</MudText>
                                        <MudText Typo="Typo.body2" Class="text-muted">@order.Pieces pcs</MudText>
                                    </div>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudTable Items="@order.Items" Dense="true" Hover="true" Class="mt-2">
                                    <HeaderContent>
                                        <MudTh></MudTh>
                                        <MudTh>Description</MudTh>
                                        <MudTh>Total Weight / Qty</MudTh>
                                        <MudTh>Load Weight</MudTh>
                                        <MudTh>Status</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="item">
                                        <MudTd>
                                            <MudCheckBox T="bool"
                                                         @key="item.Id"
                                                         Immediate="true"
                                                         Value="@IsItemSelected(item)"
                                                         ValueChanged="@((bool val) => ToggleItemSelection(order, item, val))" />
                                        </MudTd>
                                        <MudTd DataLabel="Description">@item.Description</MudTd>
                                        <MudTd DataLabel="Total Weight / Qty">@item.Weight.ToString("N0") lbs / @item.Quantity.ToString("N0") pcs</MudTd>
                                        <MudTd DataLabel="Load Weight">
                                            <MudNumericField T="decimal"
                                                             Value="PartialWeights.GetValueOrDefault(item.Id)"
                                                             ValueChanged="@((decimal v) => { PartialWeights[item.Id] = v; StateHasChanged(); })"
                                                             Disabled="@(!IsItemSelected(item))"
                                                             Variant="Variant.Outlined"
                                                             Min="0" Max="@item.Weight" Adornment="Adornment.End" AdornmentText="lbs"
                                                             Style="width: 140px;"
                                                             Class="pa-0 ma-0" Margin="Margin.Dense" />
                                        </MudTd>
                                        <MudTd DataLabel="Status"><MudChip T="string" Size="Size.Small" Color="GetStatusColor(item.Status)">@item.Status</MudChip></MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudPaper>
                }
            </div>
        </MudPaper>
    </MudItem>

    @* Create Load Column *@
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-4" Style="height: 100%; display: flex; flex-direction: column;">
            <MudText Typo="Typo.h6" GutterBottom="true">Create Load</MudText>

            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1"><b>Line Items:</b> @SelectedItemIds.Count</MudText>
                    <MudText Typo="Typo.subtitle1"><b>Orders:</b> @SelectedOrderIds.Count</MudText>
                    <MudText Typo="Typo.h5" Class="mt-2"><b>@TotalSelectedWeight.ToString("N2") lbs</b></MudText>
                </MudCardContent>
            </MudCard>

            <div style="flex-grow: 1;">
                <MudForm>
                    <MudDatePicker Label="Scheduled Ship Date" @bind-Date="ScheduledShipDate" Class="mb-4" />
                    <MudTextField @bind-Value="LoadNotes" Label="Load Notes (Optional)" T="string" Lines="3" Class="mb-4" />

                    <MudButton OnClick="OpenTruckDialogAsync" Variant="Variant.Outlined" FullWidth="true" Class="@(SelectedTruckId.HasValue ? "mb-2" : "mb-4")">
                        @(SelectedTruck is not null ? $"Selected: {SelectedTruck.Name}" : "Select Truck")
                    </MudButton>

                    @if (SelectedTruck is not null)
                    {
                        <MudCard Outlined="true" Class="mb-4">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@SelectedTruck.Name @(SelectedTruck.IsRecommended ? "(Recommended)" : "")</MudText>
                                <MudText Typo="Typo.body2" GutterBottom="true">@SelectedTruck.Type - @SelectedTruck.Driver</MudText>
                                <MudProgressLinear Value="@GetProjectedLoadPercentage(SelectedTruck)" Color="@GetProjectedLoadColor(SelectedTruck)" Class="my-1" />
                                <MudText Typo="Typo.caption">Projected Load: @GetProjectedLoad(SelectedTruck).ToString("N0") / @SelectedTruck.Capacity.ToString("N0") lbs</MudText>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudForm>
            </div>

            <div class="mt-auto">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-4" Disabled="@(!CanCreate)" OnClick="CreateLoadAsync">Create Load</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool CanCreate => SelectedItemIds.Any() && SelectedTruckId.HasValue && ScheduledShipDate.HasValue;
    [Parameter] public List<AvailableOrder> AllAvailableOrders { get; set; } = new();
    [Parameter] public List<TruckInfo> AvailableTrucks { get; set; } = new();
    [Parameter] public EventCallback OnLoadCreated { get; set; }
    [Parameter] public string? SelectedRegionName { get; set; }

    private DateTime? SelectedShipDate { get; set; }
    private DateTime? ScheduledShipDate { get; set; }
    private string? LoadNotes { get; set; }
    private int? SelectedTruckId { get; set; }

    private TruckInfo? SelectedTruck => SelectedTruckId.HasValue
        ? AvailableTrucks.FirstOrDefault(t => int.TryParse(t.Id, out var id) && id == SelectedTruckId.Value)
        : null;

    private HashSet<string> SelectedOrderIds { get; set; } = new();
    private HashSet<string> SelectedItemIds { get; set; } = new();
    private Dictionary<string, decimal> PartialWeights { get; set; } = new();

    private List<AvailableOrder> FilteredAvailableOrders => string.IsNullOrEmpty(SelectedRegionName)
        ? AllAvailableOrders
        : AllAvailableOrders.Where(o => o.DeliveryRegion == SelectedRegionName).ToList();

    private List<DateTime> AvailableShipDates => FilteredAvailableOrders
        .Select(o => o.ReadyDate.Date)
        .Distinct()
        .OrderBy(d => d)
        .ToList();

    private readonly Dictionary<DateTime, List<AvailableOrder>> _ordersByDateCache = new();

    private IEnumerable<AvailableOrder> OrdersByDate(DateTime date)
    {
        if (!_ordersByDateCache.TryGetValue(date.Date, out var orders))
        {
            orders = FilteredAvailableOrders.Where(o => o.ReadyDate.Date == date.Date).ToList();
            _ordersByDateCache[date.Date] = orders;
        }
        return orders;
    }

    private IEnumerable<AvailableOrder> OrdersForSelectedDate => SelectedShipDate.HasValue
        ? OrdersByDate(SelectedShipDate.Value)
        : Enumerable.Empty<AvailableOrder>();

    private decimal TotalSelectedWeight => PartialWeights.Values.Sum();

    private async Task OpenTruckDialogAsync()
    {
        var parameters = new DialogParameters
        {
            ["AvailableTrucks"] = AvailableTrucks,
            ["TotalSelectedWeight"] = (int)TotalSelectedWeight
        };

        var dialog = await DialogService.ShowAsync<TruckSelectionDialog>("Select a Truck", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is int truckId)
        {
            SelectedTruckId = truckId;
            StateHasChanged();
        }
    }

    private void OnSelectedShipDateChanged(DateTime? newDate)
    {
        SelectedShipDate = newDate;
        ScheduledShipDate = newDate;
        ClearSelections();
        _ordersByDateCache.Clear();
        StateHasChanged();
    }

    private void ClearSelections()
    {
        SelectedOrderIds.Clear();
        SelectedItemIds.Clear();
        PartialWeights.Clear();
    }

    private void ToggleOrderSelection(AvailableOrder order, bool isSelected)
    {
        if (isSelected)
        {
            SelectedOrderIds.Add(order.Id);
            foreach (var item in order.Items)
            {
                if (SelectedItemIds.Add(item.Id))
                {
                    PartialWeights[item.Id] = item.Weight;
                }
            }
        }
        else
        {
            SelectedOrderIds.Remove(order.Id);
            foreach (var item in order.Items)
            {
                if (SelectedItemIds.Remove(item.Id))
                {
                    PartialWeights.Remove(item.Id);
                }
            }
        }
        StateHasChanged();
    }

    private void ToggleItemSelection(AvailableOrder order, OrderItem item, bool isSelected)
    {
        if (isSelected)
        {
            SelectedItemIds.Add(item.Id);
            PartialWeights[item.Id] = item.Weight; // Default to full weight on selection
        }
        else
        {
            SelectedItemIds.Remove(item.Id);
            PartialWeights.Remove(item.Id);
        }

        if (order.Items.All(i => SelectedItemIds.Contains(i.Id)))
        {
            SelectedOrderIds.Add(order.Id);
        }
        else
        {
            SelectedOrderIds.Remove(order.Id);
        }
        StateHasChanged();
    }

    private bool IsItemSelected(OrderItem item) => SelectedItemIds.Contains(item.Id);

    private Color GetStatusColor(string status) => status switch
    {
        "picked" => Color.Info,
        "packed" => Color.Success,
        "ready" => Color.Primary,
        _ => Color.Default
    };

    private double GetProjectedLoadPercentage(TruckInfo truck)
    {
        if (truck.Capacity <= 0) return 0;
        var pct = (double)GetProjectedLoad(truck) / truck.Capacity * 100;
        return Math.Max(0, Math.Min(100, pct));
    }

    private decimal GetProjectedLoad(TruckInfo truck) => truck.CurrentLoad + TotalSelectedWeight;

    private Color GetProjectedLoadColor(TruckInfo truck)
    {
        if (truck.Capacity <= 0) return Color.Default;
        var percentage = GetProjectedLoadPercentage(truck);
        if (percentage > 100) return Color.Error;
        if (percentage > 90) return Color.Warning;
        return Color.Primary;
    }

    protected override void OnParametersSet()
    {
        var hadDate = SelectedShipDate;

        if (SelectedShipDate is null && AvailableShipDates.Any())
            SelectedShipDate = AvailableShipDates.First();

        if (SelectedShipDate is not null && !AvailableShipDates.Contains(SelectedShipDate.Value.Date))
            SelectedShipDate = AvailableShipDates.FirstOrDefault();

        if (ScheduledShipDate is null || ScheduledShipDate?.Date != SelectedShipDate?.Date)
            ScheduledShipDate = SelectedShipDate;
    }

    private async Task CreateLoadAsync()
    {
        if (!CanCreate)
        {
            Snackbar.Add("Please select items, a truck, and a ship date.", Severity.Warning);
            return;
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        if (!(SelectedTruckId is int truckId))
        {
            Snackbar.Add("Truck selection is invalid. Please re-select a truck.", Severity.Error);
            return;
        }

        var selectedTruck = AvailableTrucks.FirstOrDefault(t => int.TryParse(t.Id, out var id) && id == truckId);
        if (selectedTruck == null)
        {
            Snackbar.Add("Selected truck not found.", Severity.Error);
            return;
        }

        var newLoad = new Load
        {
            TruckId = truckId,
            ShippingDate = ScheduledShipDate,
            Status = LoadStatus.Pending,
            Notes = LoadNotes,
            OriginBranchId = selectedTruck.BranchId,
            TotalWeight = TotalSelectedWeight
        };

        var loadItems = new List<Data.LoadItem>();
        var ordersWithSelectedItems = AllAvailableOrders.Where(o => o.Items.Any(i => SelectedItemIds.Contains(i.Id)));

        foreach (var order in ordersWithSelectedItems)
        {
            if (!int.TryParse(order.Id, out var orderId))
            {
                Snackbar.Add($"Invalid Order ID format: {order.Id}. Skipping order.", Severity.Warning);
                continue;
            }

            var itemsToLoad = order.Items.Where(i => SelectedItemIds.Contains(i.Id));
            foreach (var item in itemsToLoad)
            {
                if (!int.TryParse(item.Id, out var itemId))
                {
                    Snackbar.Add($"Invalid Item ID format: {item.Id}. Skipping item.", Severity.Warning);
                    continue;
                }

                var shippedWeight = PartialWeights.GetValueOrDefault(item.Id, 0);
                if (shippedWeight <= 0) continue; // Don't add items with no weight

                var shippedQuantity = (item.Weight > 0 && shippedWeight < item.Weight)
                    ? Math.Round(item.Quantity * (shippedWeight / item.Weight), 2)
                    : item.Quantity;

                loadItems.Add(new Data.LoadItem
                {
                    PickingListId = orderId,
                    PickingListItemId = itemId,
                    ShippedWeight = shippedWeight,
                    ShippedQuantity = shippedQuantity
                });
            }
        }

        if (!loadItems.Any())
        {
            Snackbar.Add("No valid items were selected to create the load.", Severity.Error);
            return;
        }

        newLoad.Items = loadItems;

        try
        {
            await LoadService.CreateAsync(newLoad, userId);
            Snackbar.Add("Load created successfully!", Severity.Success);
            ClearSelections();
            await OnLoadCreated.InvokeAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating load: {ex.Message}", Severity.Error);
        }
    }
}