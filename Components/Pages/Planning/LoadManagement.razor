@page "/planning/load-management/{RegionId:int}"
@using CMetalsWS.Data
@using CMetalsWS.Services
@inject LoadService LoadService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" GutterBottom="true">Load Management</MudText>

@if (_loads.Any())
{
    <MudGrid Spacing="3">
        @foreach (var load in _loads)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Load #@load.Id</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText><strong>Truck:</strong> @load.Truck?.Name</MudText>
                        <MudText><strong>Shipping Date:</strong> @(load.ShippingDate.HasValue ? load.ShippingDate.Value.ToShortDateString() : "N/A")</MudText>
                        <MudText><strong>Total Weight:</strong> @load.TotalWeight lbs</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else
{
    <MudText>No loads found for this region.</MudText>
}

@code {
    [Parameter]
    public int RegionId { get; set; }

    private List<Load> _loads = new();

    protected override async Task OnInitializedAsync()
    {
        _loads = await LoadService.GetLoadsByRegionAsync(RegionId);
    }
}