@page "/schedule/pulling"
@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.WorkOrders.Schedule)]

@inject PickingListService PickingListService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Pulling Schedule</MudText>
        </MudStack>

        <MudGrid>
            <MudItem xs="12" sm="9">
                <MudCalendar T="SchedItem"
                             Items="_items"
                             View="_view"
                             MonthCellMinHeight="120"
                             EnableDragItems="true"
                             EnableResizeItems="true"
                             CanDragItem="@(it => it.Start >= DateTime.Now)"
                             CanDropItem="@((it, date, view) => (view == CalendarView.Month && date.Add(it.Start.TimeOfDay) >= DateTime.Now) || date >= DateTime.Now)"
                             ItemChanged="HandleItemChanged"
                             ItemClicked="HandleItemClick">
                    <CellTemplate>
                        <PickingListCalendarItem PickingList="context.PickingList" />
                    </CellTemplate>
                </MudCalendar>
            </MudItem>

            <MudItem xs="12" sm="3">
                <MudText Typo="Typo.h6">Unscheduled Pulling Orders</MudText>
                <MudList T="PickingList" Dense="true">
                    @foreach (var pl in _unscheduled)
                    {
                        <MudListItem T="PickingList" Value="@pl">
                            @pl.SalesOrderNumber - @pl.Customer.CustomerName
                        </MudListItem>
                    }
                </MudList>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudPaper>

@code {
    private sealed class SchedItem : CalendarItem
    {
        public PickingList PickingList { get; init; } = default!;
    }

    private List<PickingList> _all = new();
    private List<PickingList> _unscheduled = new();
    private List<SchedItem> _items = new();

    private CalendarView _view = CalendarView.Week;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        await LoadPickingLists(branchId);
        BuildCalendarItems();

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("PickingListUpdated", async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadPickingLists(branchId);
                BuildCalendarItems();
                StateHasChanged();
            });
        });

        await _hub.StartAsync();
    }

    private async Task LoadPickingLists(int? branchId)
    {
        _all = await PickingListService.GetPendingPullingOrdersAsync(branchId);

        // Unscheduled = no item has a ScheduledShipDate
        _unscheduled = _all
            .Where(p => !p.Items.Any(i => i.ScheduledShipDate.HasValue))
            .OrderBy(p => p.SalesOrderNumber)
            .ToList();
    }

    private void BuildCalendarItems()
    {
        // Scheduled = use the earliest item-level ScheduledShipDate
        _items = _all
            .Select(p => new
            {
                PL = p,
                Min = p.Items
                    .Where(i => i.ScheduledShipDate.HasValue)
                    .Select(i => i.ScheduledShipDate!.Value)
                    .DefaultIfEmpty()
                    .Min()
            })
            .Where(x => x.Min != default)
            .Select(x => new SchedItem
            {
                Start = x.Min,
                End = x.Min.AddHours(1),
                AllDay = false,
                PickingList = x.PL,
                Text = $"{x.PL.SalesOrderNumber} - {x.PL.Customer.CustomerName}"
            })
            .OrderBy(i => i.Start)
            .ToList();
    }

    private async Task HandleItemChanged(CalendarItem e)
    {
        if (e is not SchedItem item) return;

        var pl = item.PickingList;

        // Update all PL items' ScheduledShipDate to the new start
        foreach (var pli in pl.Items)
            pli.ScheduledShipDate = item.Start;

        await PickingListService.UpdateAsync(pl);

        // Refresh
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        await LoadPickingLists(branchId);
        BuildCalendarItems();
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("PickingListUpdated", pl.Id);
    }

    private Task HandleItemClick(SchedItem item)
    {
        // If you want to navigate to details later, uncomment:
        // NavigationManager.NavigateTo($"/picking-lists/{item.PickingList.Id}");
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
