@page "/schedule/pulling"
@using MudBlazor
@using MudBlazor.Utilities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.WorkOrders.Schedule)]

@inject PickingListService PickingListService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Pulling Schedule</MudText>
        </MudStack>

        <MudDropContainer @ref="_container" T="PickingList" Items="_pickingLists" ItemsSelector="@((list,zone) => GetMachineIdForPickingList(list) == zone)" ItemDropped="ItemDropped" Class="d-flex flex-wrap flex-grow-1">
            <ItemRenderer>
                <MudPaper Class="pa-4 my-2" Style="min-width: 300px;">
                    <MudText Typo="Typo.h6">@context.SalesOrderNumber</MudText>
                    <MudText Typo="Typo.body2">@context.Customer?.CustomerName</MudText>
                    <MudDivider Class="my-2" />
                    <MudGrid Spacing="1">
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Ship Date:</MudText>
                            <MudText Typo="Typo.body2">@context.ShipDate?.ToShortDateString()</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Total Items:</MudText>
                            <MudText Typo="Typo.body2">@context.Items.Count</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.caption">Total Sheet Weight:</MudText>
                            <MudText Typo="Typo.body2">@context.Items.Where(i => i.Machine?.Category == MachineCategory.Sheet).Sum(i => i.Weight ?? 0).ToString("N3")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </ItemRenderer>
            <ChildContent>
                <div class="d-flex flex-wrap">
                    @foreach (var machine in _machines)
                    {
                        <MudPaper Class="pa-6 ma-2 mud-border-dotted">
                            <MudText Typo="Typo.h6" Class="mb-4">@machine.Name</MudText>
                            <MudDropZone T="PickingList" Identifier="@(machine.Id.ToString())" />
                        </MudPaper>
                    }
                </div>
            </ChildContent>
        </MudDropContainer>
    </MudStack>
</MudPaper>

@code {
    private List<PickingList> _pickingLists = new();
    private List<Machine> _machines = new();
    private MudDropContainer<PickingList> _container = new();
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        await LoadData(branchId);

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("PickingListUpdated", async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadData(branchId);
                StateHasChanged();
            });
        });

        await _hub.StartAsync();
    }

    private async Task LoadData(int? branchId)
    {
        _machines = (await MachineService.GetMachinesAsync()).Where(m => m.Category == MachineCategory.Sheet).ToList();
        _pickingLists = await PickingListService.GetSheetPullingQueueListsAsync();
        if (branchId.HasValue)
        {
            _pickingLists = _pickingLists.Where(p => p.BranchId == branchId.Value).ToList();
        }
    }

    private string GetMachineIdForPickingList(PickingList list)
    {
        // A picking list is associated with the machine of its first sheet item.
        // This determines which drop zone it appears in.
        return list.Items
            .FirstOrDefault(i => i.Machine?.Category == MachineCategory.Sheet)?
            .MachineId.ToString() ?? "0"; // Should not be 0, but as a fallback.
    }

    private async Task ItemDropped(MudItemDropInfo<PickingList> dropItem)
    {
        var listToMove = dropItem.Item;
        var newZoneId = dropItem.DropzoneIdentifier;
        var newMachineId = int.Parse(newZoneId);

        // The `UpdateOrder` extension method handles the re-ordering of the list based on the drop event.
        // We use the `Priority` property as the "Order" field.
        _pickingLists.UpdateOrder(dropItem, item => item.Priority);

        // The list is now in the correct global order, with `Priority` reflecting this global order.
        // We can now call the service to persist the changes.
        // The service layer will be responsible for converting the global priority into the date-scoped priority.

        await PickingListService.UpdatePullingQueueOrderAsync(_pickingLists, listToMove.Id, newMachineId);

        // After the update, we must reload the data to get the fresh state from the database,
        // which includes the newly calculated date-scoped priorities and machine assignments.
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;
        await LoadData(branchId);

        Snackbar.Add($"Moved {listToMove.SalesOrderNumber} to machine {_machines.FirstOrDefault(m => m.Id == newMachineId)?.Name}", Severity.Success);

        if (_hub is not null)
        {
            await _hub.SendAsync("PickingListUpdated", listToMove.Id);
        }

        // We must call StateHasChanged here to ensure the UI re-renders with the reloaded data.
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
