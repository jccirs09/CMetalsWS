@page "/schedule/pulling"
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.WorkOrders.Schedule)]

@inject PickingListService PickingListService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Pulling Schedule</MudText>
        </MudStack>

        <MudDropContainer @ref="_container" T="PickingListItem" Items="_items" ItemsSelector="@((item,zone) => (item.MachineId?.ToString() ?? "0") == zone)" ItemDropped="ItemDropped" Class="d-flex flex-wrap flex-grow-1">
            <ItemRenderer>
                <MudPaper Class="pa-4 my-2">
                    <MudText Typo="Typo.body1">@context.PickingList.SalesOrderNumber</MudText>
                    <MudText Typo="Typo.body2">@context.PickingList.Customer?.CustomerName</MudText>
                </MudPaper>
            </ItemRenderer>
            <ChildContent>
                <div class="d-flex flex-wrap">
                    @foreach (var machine in _machines)
                    {
                        <MudPaper Class="pa-6 ma-2 mud-border-dotted">
                            <MudText Typo="Typo.h6" Class="mb-4">@machine.Name</MudText>
                            <MudDropZone T="PickingListItem" Identifier="@(machine.Id.ToString())" />
                        </MudPaper>
                    }
                </div>
                <MudPaper Class="pa-6 ma-2 mud-border-dotted">
                    <MudText Typo="Typo.h6" Class="mb-4">Unassigned</MudText>
                    <MudDropZone T="PickingListItem" Identifier="0" />
                </MudPaper>
            </ChildContent>
        </MudDropContainer>
    </MudStack>
</MudPaper>

@code {
    private List<PickingListItem> _items = new();
    private List<Machine> _machines = new();
    private MudDropContainer<PickingListItem> _container = new();
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        await LoadData(branchId);

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("PickingListUpdated", async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadData(branchId);
                StateHasChanged();
            });
        });

        await _hub.StartAsync();
    }

    private async Task LoadData(int? branchId)
    {
        _machines = (await MachineService.GetMachinesAsync()).Where(m => m.Category == MachineCategory.Sheet).ToList();
        _items = await PickingListService.GetSheetPullingQueueAsync();
        if (branchId.HasValue)
        {
            _items = _items.Where(i => i.PickingList?.BranchId == branchId.Value).ToList();
        }
    }

    private async Task ItemDropped(MudItemDropInfo<PickingListItem> dropItem)
    {
        // The underlying collection is updated by the drop container automatically.
        // We just need to recalculate priorities and persist.

        var newOrderedList = new List<PickingListItem>();

        // Process machine zones
        foreach (var machine in _machines)
        {
            var zoneItems = _container.GetItems(machine.Id.ToString()).ToList();
            for (int i = 0; i < zoneItems.Count; i++)
            {
                var item = zoneItems[i];
                item.MachineId = machine.Id;
                item.PickingList.Priority = i;
                newOrderedList.Add(item);
            }
        }

        // Process unassigned zone
        var unassignedItems = _container.GetItems("0").ToList();
        for (int i = 0; i < unassignedItems.Count; i++)
        {
            var item = unassignedItems[i];
            item.MachineId = 0;
            item.PickingList.Priority = i;
            newOrderedList.Add(item);
        }

        _items = newOrderedList.OrderBy(i => i.MachineId).ThenBy(i => i.PickingList.Priority).ToList();

        await PickingListService.UpdatePullingQueueAsync(_items);

        var machineName = _machines.FirstOrDefault(m => m.Id == dropItem.Item.MachineId)?.Name;
        Snackbar.Add($"Moved {dropItem.Item.PickingList.SalesOrderNumber} to {(string.IsNullOrEmpty(machineName) ? "Unassigned" : $"machine {machineName}")}", Severity.Success);

        if (_hub is not null)
        {
            await _hub.SendAsync("PickingListUpdated", dropItem.Item.PickingListId);
        }

        // We need to refresh the container to reflect the changes.
        _container.Refresh();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
