@page "/schedule/pulling"
@using MudBlazor
@using MudBlazor.Utilities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.WorkOrders.Schedule)]

@inject PickingListService PickingListService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Pulling Schedule</MudText>
        </MudStack>

        <MudDropContainer @ref="_container" T="PickingList" Items="_pickingLists" ItemsSelector="@((list,zone) => GetZoneIdentifierForPickingList(list) == zone)" ItemDropped="ItemDropped" Class="d-flex flex-wrap flex-grow-1">
            <ItemRenderer>
                <MudPaper Class="pa-4 my-2" Style="min-width: 300px;">
                    <MudText Typo="Typo.h6">@context.SalesOrderNumber</MudText>
                    <MudText Typo="Typo.body2">@context.Customer?.CustomerName</MudText>
                    <MudDivider Class="my-2" />
                    <MudGrid Spacing="1">
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Ship Date:</MudText>
                            <MudText Typo="Typo.body2">@context.ShipDate?.ToShortDateString()</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.caption">Total Items:</MudText>
                            <MudText Typo="Typo.body2">@context.Items.Count</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Typo="Typo.caption">Total Sheet Weight:</MudText>
                            <MudText Typo="Typo.body2">@context.Items.Where(i => i.Machine?.Category == MachineCategory.Sheet).Sum(i => i.Weight ?? 0).ToString("N3")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </ItemRenderer>
            <ChildContent>
                <div class="d-flex flex-wrap">
                    @foreach (var machine in _machines)
                    {
                        <MudPaper Class="pa-4 ma-2 mud-border-dotted" Style="min-width: 350px;">
                            <MudText Typo="Typo.h6" Class="mb-2">@machine.Name</MudText>
                            <MudList T="object" Clickable="false" Dense="true">
                                @foreach (var date in _distinctDates)
                                {
                                    <MudListItem>
                                        <div class="d-flex flex-column" style="width: 100%;">
                                            <MudText Typo="Typo.subtitle2">@date.ToString("ddd, MMM dd")</MudText>
                                            <MudDropZone T="PickingList" Identifier="@($"{machine.Id}-{date:yyyy-MM-dd}")" Class="pa-2 mud-border-dashed" />
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    }
                </div>
            </ChildContent>
        </MudDropContainer>
    </MudStack>
</MudPaper>

@code {
    private List<PickingList> _pickingLists = new();
    private List<Machine> _machines = new();
    private List<DateTime> _distinctDates = new();
    private MudDropContainer<PickingList> _container = new();
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        await LoadData(branchId);

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("PickingListUpdated", async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadData(branchId);
                StateHasChanged();
            });
        });

        await _hub.StartAsync();
    }

    private async Task LoadData(int? branchId)
    {
        _machines = (await MachineService.GetMachinesAsync()).Where(m => m.Category == MachineCategory.Sheet).OrderBy(m => m.Name).ToList();
        _pickingLists = await PickingListService.GetSheetPullingQueueListsAsync();
        if (branchId.HasValue)
        {
            _pickingLists = _pickingLists.Where(p => p.BranchId == branchId.Value).ToList();
        }

        // Date-based grouping logic
        _distinctDates = _pickingLists
            .SelectMany(p => p.Items)
            .Where(i => i.ScheduledProcessingDate.HasValue)
            .Select(i => i.ScheduledProcessingDate.Value.Date)
            .Distinct()
            .ToList();

        // Add the next 5 business days (Mon-Fri)
        var today = DateTime.Today;
        var businessDaysAdded = 0;
        for (int i = 0; businessDaysAdded < 5; i++)
        {
            var date = today.AddDays(i);
            if (date.DayOfWeek >= DayOfWeek.Monday && date.DayOfWeek <= DayOfWeek.Friday)
            {
                if (!_distinctDates.Contains(date))
                {
                    _distinctDates.Add(date);
                }
                businessDaysAdded++;
            }
        }
        _distinctDates = _distinctDates.OrderBy(d => d).ToList();

    }

    private string GetZoneIdentifierForPickingList(PickingList list)
    {
        var sheetItem = list.Items.FirstOrDefault(i => i.Machine?.Category == MachineCategory.Sheet);
        if (sheetItem?.MachineId == null || sheetItem.ScheduledProcessingDate == null)
        {
            return "no-zone";
        }

        return $"{sheetItem.MachineId}-{sheetItem.ScheduledProcessingDate.Value:yyyy-MM-dd}";
    }

    private int CalculateIndexOffset(string zoneId)
    {
        int offset = 0;
        foreach (var machine in _machines)
        {
            foreach (var date in _distinctDates)
            {
                string currentZone = $"{machine.Id}-{date:yyyy-MM-dd}";
                if (currentZone == zoneId)
                {
                    return offset;
                }
                offset += _pickingLists.Count(l => GetZoneIdentifierForPickingList(l) == currentZone);
            }
        }
        return offset;
    }

    private async Task ItemDropped(MudItemDropInfo<PickingList> dropItem)
    {
        var listToMove = dropItem.Item;
        var newZoneId = dropItem.DropzoneIdentifier;

        var zoneParts = newZoneId.Split('-');
        if (zoneParts.Length < 2) return;

        var newMachineId = int.Parse(zoneParts[0]);
        var newDate = DateTime.Parse(string.Join("-", zoneParts.Skip(1)));

        // Update the item in memory before reordering
        foreach (var item in listToMove.Items)
        {
            if (item.Machine?.Category == MachineCategory.Sheet)
            {
                item.MachineId = newMachineId;
                item.ScheduledProcessingDate = newDate;
            }
        }

        var indexOffset = CalculateIndexOffset(newZoneId);
        _pickingLists.UpdateOrder(dropItem, item => item.Priority, indexOffset);

        await PickingListService.UpdatePullingQueueOrderAsync(_pickingLists, listToMove.Id, newMachineId, newDate);

        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;
        await LoadData(branchId);

        Snackbar.Add($"Moved {listToMove.SalesOrderNumber} to machine {_machines.FirstOrDefault(m => m.Id == newMachineId)?.Name} on {newDate:ddd, MMM dd}", Severity.Success);

        if (_hub is not null)
        {
            await _hub.SendAsync("PickingListUpdated", listToMove.Id);
        }

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
