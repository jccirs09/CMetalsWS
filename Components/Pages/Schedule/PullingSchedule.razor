@page "/schedule/pulling"
@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services

@inject PickingListService PickingListService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Pulling Schedule</MudText>
        </MudStack>

        <MudGrid>
            <MudItem xs="12" sm="9">
                <MudCalendar T="SchedItem"
                             Items="_items"
                             View="_view"
                             StartHour="_startHour"
                             EndHour="_endHour"
                             MonthCellMinHeight="120"
                             EnableDragItems="true"
                             EnableResizeItems="true"
                             CanDragItem="@(it => it.Start >= DateTime.Now)"
                             CanDropItem="@((it, date, view) => (view == CalendarView.Month && date.Add(it.Start.TimeOfDay) >= DateTime.Now) || date >= DateTime.Now)"
                             OnItemDrop="HandleDrop"
                             OnItemClick="HandleClick">
                    <CellTemplate Context="evt">
                        @{
                            var pl = evt.PickingList!;
                            var stripe = "var(--mud-palette-info)";
                            var sub = $"{pl.CustomerName} â€¢ Due {pl.ShipDate:yyyy-MM-dd}";
                        }
                        <div style="width:100%;border:1px solid var(--mud-palette-lines-default);border-left:4px solid @stripe;border-radius:6px;overflow:hidden;">
                            <div style="display:flex;align-items:center;gap:.5rem;padding:.25rem .5rem;">
                                <MudIcon Icon="@Icons.Material.Filled.PanTool" Size="Size.Small" />
                                <MudText Typo="Typo.body2">@pl.SalesOrderNumber</MudText>
                                <MudSpacer />
                                <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">PL @pl.Id</MudChip>
                            </div>
                            <div style="padding:0 .5rem .5rem .5rem;">
                                <MudText Typo="Typo.caption">@sub</MudText>
                            </div>
                        </div>
                    </CellTemplate>
                </MudCalendar>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudText Typo="Typo.h6">Unscheduled Pulling Orders</MudText>
                <MudList T="PickingList" Dense="true">
                    @foreach (var pl in _unscheduled)
                    {
                        <MudListItem T="PickingList" Value="@pl">
                            @pl.SalesOrderNumber - @pl.CustomerName - Due: @pl.ShipDate?.ToString("yyyy-MM-dd")
                        </MudListItem>
                    }
                </MudList>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudPaper>

@code {
    private sealed class SchedItem : CalendarItem
    {
        public PickingList PickingList { get; init; } = default!;
    }

    private List<PickingList> _all = new();
    private List<PickingList> _unscheduled = new();
    private List<SchedItem> _items = new();

    private CalendarView _view = CalendarView.Week;
    private int _startHour = 5;
    private int _endHour = 23;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        await LoadPickingLists(branchId);
        BuildCalendarItems();

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("PickingListUpdated", async (id) =>
        {
            await LoadPickingLists(branchId);
            BuildCalendarItems();
            StateHasChanged();
        });

        await _hub.StartAsync();
    }

    private async Task LoadPickingLists(int? branchId)
    {
        _all = await PickingListService.GetPendingPullingOrdersAsync(branchId);
        _unscheduled = _all.Where(p => p.ShipDate == null || p.ShipDate.Value.Date < DateTime.Today).ToList();
    }

    private void BuildCalendarItems()
    {
        _items = _all
            .Where(p => p.ShipDate != null && p.ShipDate.Value.Date >= DateTime.Today)
            .Select(p => new SchedItem
            {
                Text = p.SalesOrderNumber,
                Start = p.ShipDate!.Value,
                End = p.ShipDate!.Value.AddHours(1),
                AllDay = false,
                PickingList = p
            })
            .ToList();
    }

    private async Task HandleDrop(object e)
    {
        dynamic d = e;
        var item = (SchedItem)d.Item;
        var newStart = (DateTime)d.NewStart;

        var pl = item.PickingList;
        pl.ShipDate = newStart;

        await PickingListService.ScheduleListAsync(pl.Id, newStart);
        await LoadPickingLists(null);
        BuildCalendarItems();
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("PickingListUpdated", pl.Id);
    }

    private Task HandleClick(SchedItem item)
    {
        // For consistency, could navigate to a picking list detail view
        // NavigationManager.NavigateTo($"/picking-lists/{item.PickingList.Id}");
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
