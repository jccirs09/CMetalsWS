@page "/schedule/ctl"

@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services

@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<MudDropContainer T="WorkOrder" Items="_allWorkOrders" ItemDropped="OnWorkOrderDropped" ItemsSelector="@((wo, zone) => GetWorkOrderZone(wo) == zone)" Class="d-flex flex-grow-1">
    <ChildContent>
        <MudGrid>
            <MudItem xs="12" sm="9">
                <MudCalendar T="WorkOrder" Items="_allWorkOrders.Where(wo => wo.ScheduledStartDate != null).ToList()"
                             EnableDragItems="true" ItemResized="OnWorkOrderItemResized" ItemDropped="OnCalendarItemMoved"
                             EnableResizeItems="true" MonthCellMinHeight="120"
                             StartTime="new TimeSpan(5, 0, 0)" EndTime="new TimeSpan(23, 0, 0)">
                    <CellTemplate>
                        <div class="d-flex flex-column flex-grow-1" style="height: 100%">
                            <MudDropZone T="WorkOrder" Identifier="@context.Date.ToString("yyyy-MM-dd")" Class="flex-grow-1" />
                        </div>
                    </CellTemplate>
                    <ItemTemplate Context="workOrder">
                        <div @onclick:ctrlKey="() => ToggleSelectItem(workOrder)" @onclick:metaKey="() => ToggleSelectItem(workOrder)" @onclick:preventDefault="true"
                             style="@GetItemStyle(workOrder)" title="@workOrder.TagNumber">
                            <MudText><b>@workOrder.WorkOrderNumber</b></MudText>
                            <MudText Typo="Typo.caption">Due: @workOrder.DueDate.ToString("MMM dd")</MudText>
                        </div>
                    </ItemTemplate>
                </MudCalendar>
            </MudItem>
            <MudItem xs="12" sm="3" Class="d-flex flex-column">
                <MudText Typo="Typo.h6">Unscheduled CTL Work Orders</MudText>
                <MudPaper Class="flex-grow-1 overflow-y-auto" Elevation="0">
                    <MudDropZone T="WorkOrder" Identifier="unscheduled" Class="pa-4">
                        @foreach (var wo in _allWorkOrders.Where(wo => wo.ScheduledStartDate == null))
                        {
                            <MudPaper Elevation="2" Class="pa-2 ma-1">
                                <MudText>@wo.WorkOrderNumber</MudText>
                                <MudText Typo="Typo.caption">@wo.TagNumber - Due: @wo.DueDate.ToString("yyyy-MM-dd")</MudText>
                            </MudPaper>
                        }
                    </MudDropZone>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-2 ma-1">
            <MudText>@context.WorkOrderNumber</MudText>
            <MudText Typo="Typo.caption">@context.TagNumber</MudText>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private List<Machine> _machines = new();
    private List<WorkOrder> _allWorkOrders = new();
    private List<WorkOrder> _selectedItems = new();
    private int _selectedMachineId;
    private HubConnection? _hub;

    private string GetWorkOrderZone(WorkOrder wo) => wo.ScheduledStartDate == null ? "unscheduled" : "calendar";

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.Category == MachineCategory.CTL && (!branchId.HasValue || m.BranchId == branchId.Value))
            .ToList();
        if (_machines.Any()) _selectedMachineId = _machines.First().Id;

        await LoadWorkOrders(branchId);
        SetupSignalR(branchId);
    }

    private async Task LoadWorkOrders(int? branchId)
    {
        _allWorkOrders = (await WorkOrderService.GetByCategoryAsync(MachineCategory.CTL, branchId))
            .Where(w => _selectedMachineId == 0 || w.MachineId == _selectedMachineId)
            .ToList();
    }

    private void SetupSignalR(int? branchId)
    {
        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();
        _hub.On<int>("WorkOrderUpdated", async (id) => {
            await LoadWorkOrders(branchId);
            _selectedItems.Clear(); // Clear selection on refresh
            StateHasChanged();
        });
        _hub.StartAsync();
    }

    private void ToggleSelectItem(WorkOrder wo)
    {
        if (_selectedItems.Contains(wo))
        {
            _selectedItems.Remove(wo);
        }
        else
        {
            _selectedItems.Add(wo);
        }
        StateHasChanged();
    }

    private string GetItemStyle(WorkOrder wo)
    {
        var color = wo.ScheduledStartDate == null ? "var(--mud-palette-warning)" : "var(--mud-palette-primary)";
        var style = $"width:100%; height:100%; border-left: 4px solid {color}; padding: 2px; cursor: pointer;";
        if (_selectedItems.Contains(wo))
        {
            style += "background-color: var(--mud-palette-action-hover);";
        }
        return style;
    }

    private async Task OnWorkOrderDropped(MudItemDropInfo<WorkOrder> dropItem)
    {
        var workOrder = dropItem.Item;
        if (dropItem.DropzoneIdentifier == "unscheduled")
        {
            workOrder.ScheduledStartDate = null;
            workOrder.ScheduledEndDate = null;
        }
        else
        {
            if (DateTime.TryParse(dropItem.DropzoneIdentifier, out var dropDate))
            {
                workOrder.ScheduledStartDate = dropDate.Date + workOrder.DueDate.TimeOfDay;
                workOrder.ScheduledEndDate = workOrder.ScheduledStartDate.Value.AddMinutes(30);
            }
        }
        await WorkOrderService.ScheduleAsync(workOrder.Id, workOrder.ScheduledStartDate, workOrder.ScheduledEndDate);
        if (_hub is not null) await _hub.SendAsync("WorkOrderUpdated", workOrder.Id);
    }

    private async Task OnCalendarItemMoved(CalendarItem item, DateTime newDate)
    {
        if (item is not WorkOrder draggedWorkOrder)
            return;

        var tasks = new List<Task>();

        // If the dragged item is part of a multi-selection, process all selected items.
        if (_selectedItems.Count > 1 && _selectedItems.Contains(draggedWorkOrder))
        {
            // Calculate the offset from the single item that was actually dragged
            var offset = newDate - draggedWorkOrder.ScheduledStartDate.Value;

            foreach (var selectedWo in _selectedItems)
            {
                selectedWo.ScheduledStartDate = selectedWo.ScheduledStartDate.Value.Add(offset);
                if (selectedWo.ScheduledEndDate.HasValue)
                {
                    selectedWo.ScheduledEndDate = selectedWo.ScheduledEndDate.Value.Add(offset);
                }
                tasks.Add(WorkOrderService.ScheduleAsync(selectedWo.Id, selectedWo.ScheduledStartDate, selectedWo.ScheduledEndDate));
            }
        }
        else // Otherwise, just handle the single dragged item.
        {
            var duration = (draggedWorkOrder.ScheduledEndDate ?? draggedWorkOrder.ScheduledStartDate.Value.AddMinutes(30)) - draggedWorkOrder.ScheduledStartDate.Value;
            draggedWorkOrder.ScheduledStartDate = newDate;
            draggedWorkOrder.ScheduledEndDate = newDate.Add(duration);
            tasks.Add(WorkOrderService.ScheduleAsync(draggedWorkOrder.Id, draggedWorkOrder.ScheduledStartDate, draggedWorkOrder.ScheduledEndDate));
        }

        await Task.WhenAll(tasks);
        _selectedItems.Clear();

        if (_hub is not null)
        {
            await _hub.SendAsync("WorkOrderUpdated", 0); // Send generic update since multiple items might have changed
        }
    }

    private async Task OnWorkOrderItemResized((CalendarItem Item, DateTime NewStart, DateTime? NewEnd) args)
    {
        if (args.Item is WorkOrder workOrder && args.NewEnd.HasValue)
        {
            workOrder.ScheduledStartDate = args.NewStart;
            workOrder.ScheduledEndDate = args.NewEnd.Value;
            await WorkOrderService.ScheduleAsync(workOrder.Id, workOrder.ScheduledStartDate, workOrder.ScheduledEndDate);
            if (_hub is not null) await _hub.SendAsync("WorkOrderUpdated", workOrder.Id);
        }
    }

    private async Task OnSelectedMachineChanged(int value)
    {
        _selectedMachineId = value;
        await LoadWorkOrders(null);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null) await _hub.DisposeAsync();
    }
}
