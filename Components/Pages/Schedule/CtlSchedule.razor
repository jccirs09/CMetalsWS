@page "/schedule/ctl"
@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services

@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">CTL Schedule</MudText>
            <MudSpacer />
            <MudSelect T="int" Label="Machine" @bind-Value="_selectedMachineId" Dense="true" Style="min-width:240px">
                @foreach (var m in _machines)
                {
                    <MudSelectItem T="int" Value="@m.Id">@m.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>

        <MudGrid>
            <MudItem xs="12" sm="9">
                <MudCalendar T="SchedItem"
                             Items="_items"
                             View="_view"
                             MonthCellMinHeight="120"
                             EnableDragItems="true"
                             EnableResizeItems="true"
                             CanDragItem="@(it => it.Start >= DateTime.Now)"
                             CanDropItem="@((it, date, view) => (view == CalendarView.Month && date.Add(it.Start.TimeOfDay) >= DateTime.Now) || date >= DateTime.Now)"
                             ItemDropped="HandleDrop"
                             DayDrop="HandleDayDrop"
                             StartTime="new TimeSpan(5, 0, 0)"
                             EndTime="new TimeSpan(23, 0, 0)"
                             OnItemClick="HandleClick">
                    <ItemTemplate>
                        @{
                            var wo = context.WorkOrder!;
                            var customers = string.Join(", ", wo.Items.Select(i => i.CustomerName).Distinct());
                            var pickingLists = string.Join(", ", wo.Items.Select(i => i.SalesOrderNumber).Distinct());
                        }
                        <div class="d-flex flex-column" style="width:100%; height:100%;">
                            <MudText Typo="Typo.body2"><b>@wo.WorkOrderNumber</b></MudText>
                            <MudText Typo="Typo.caption">@customers</MudText>
                            <MudText Typo="Typo.caption">PLs: @pickingLists</MudText>
                            <MudText Typo="Typo.caption">Tag: @wo.TagNumber</MudText>
                            <MudText Typo="Typo.caption">Instructions: @wo.Instructions</MudText>
                        </div>
                    </CellTemplate>
                </MudCalendar>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudText Typo="Typo.h6">Unscheduled CTL Work Orders</MudText>
                <MudDropContainer T="WorkOrder" Items="_unscheduled" ItemsSelector="@((item,dropzone) => true)" ItemDropped="UnscheduledItemDropped" Class="d-flex flex-column flex-grow-1 pa-4 mud-border-2 mud-border-dashed">
                    <ChildContent>
                        @foreach (var wo in _unscheduled)
                        {
                            <MudDropItem T="WorkOrder" Item="wo">
                                <MudPaper Elevation="2" Class="pa-2">
                                    <MudText>@wo.WorkOrderNumber</MudText>
                                    <MudText Typo="Typo.caption">@wo.TagNumber - Due: @wo.DueDate.ToString("yyyy-MM-dd")</MudText>
                                </MudPaper>
                            </MudDropItem>
                        }
                    </ChildContent>
                </MudDropContainer>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudPaper>

@code {
    private sealed class SchedItem : CalendarItem
    {
        public WorkOrder WorkOrder { get; init; } = default!;
    }

    private List<Machine> _machines = new();
    private List<WorkOrder> _all = new();
    private List<WorkOrder> _unscheduled = new();
    private List<SchedItem> _items = new();

    private int _selectedMachineId;
    private CalendarView _view = CalendarView.Week;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.Category == MachineCategory.CTL && (!branchId.HasValue || m.BranchId == branchId.Value))
            .ToList();

        if (_machines.Any())
            _selectedMachineId = _machines.First().Id;

        await LoadWorkOrders(branchId);
        BuildCalendarItems();

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("WorkOrderUpdated", async (id) =>
        {
            await LoadWorkOrders(branchId);
            BuildCalendarItems();
            StateHasChanged();
        });

        await _hub.StartAsync();
    }

    private async Task LoadWorkOrders(int? branchId)
    {
        _all = (await WorkOrderService.GetByCategoryAsync(MachineCategory.CTL, branchId))
            .Where(w => _selectedMachineId == 0 || w.MachineId == _selectedMachineId)
            .ToList();

        _unscheduled = _all.Where(w => w.ScheduledStartDate == null).ToList();
    }

    private void BuildCalendarItems()
    {
        _items = _all
            .Where(w => w.ScheduledStartDate != null)
            .Select(w => new SchedItem
            {
                Text = w.WorkOrderNumber,
                Start = w.ScheduledStartDate!.Value,
                End = w.ScheduledEndDate ?? w.ScheduledStartDate!.Value.AddHours(1),
                AllDay = false,
                WorkOrder = w
            })
            .ToList();
    }

    // Use dynamic to avoid direct dependency on ItemDropEventArgs<T>
    private async Task HandleDrop(object e)
    {
        dynamic d = e; // d.Item (SchedItem), d.NewStart (DateTime), d.NewEnd (DateTime?)
        var item = (SchedItem)d.Item;
        var newStart = (DateTime)d.NewStart;
        var newEnd = (DateTime?)(d.NewEnd ?? null) ?? newStart.AddHours(1);

        var wo = item.WorkOrder;
        wo.ScheduledStartDate = newStart;
        wo.ScheduledEndDate = newEnd;

        await WorkOrderService.UpdateAsync(wo, "system");
        // refresh from source to keep references consistent
        await LoadWorkOrders(null);
        BuildCalendarItems();
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("WorkOrderUpdated", wo.Id);
    }

    private async Task HandleDayDrop((CalendarItem Item, DateTime Date) args)
    {
        var item = (WorkOrder)args.Item;
        var date = args.Date;

        item.ScheduledStartDate = date.Date.AddHours(5); // Default to 5 AM, start of shift
        item.ScheduledEndDate = item.ScheduledStartDate.Value.AddHours(1); // Default to 1 hour duration

        await WorkOrderService.ScheduleAsync(item.Id, item.ScheduledStartDate.Value, item.ScheduledEndDate);
        await LoadWorkOrders(null);
        BuildCalendarItems();
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("WorkOrderUpdated", item.Id);
    }

    private void UnscheduledItemDropped(MudItemDropInfo<WorkOrder> dropItem)
    {
        _unscheduled.Remove(dropItem.Item);
        _unscheduled.Insert(dropItem.IndexInZone, dropItem.Item);
        StateHasChanged();
    }

    private Task HandleClick(SchedItem item)
    {
        // Navigate to a WO details page if you have one (adjust route as needed)
         NavigationManager.NavigateTo($"/work-orders/{item.WorkOrder.Id}");
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }

    // React to machine change
    private async Task OnSelectedMachineChanged(int value)
    {
       
        await LoadWorkOrders(null);
        BuildCalendarItems();
        StateHasChanged();
    }
}
