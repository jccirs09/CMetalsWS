@page "/schedule/ctl"
@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services

@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">CTL Schedule</MudText>
            <MudSpacer />
            <MudSelect T="int" Label="Machine" @bind-Value="_selectedMachineId" Dense="true" Style="min-width:240px">
                @foreach (var m in _machines)
                {
                    <MudSelectItem T="int" Value="@m.Id">@m.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>

        <MudGrid>
            <MudItem xs="12" sm="9">
                <MudCalendar T="SchedItem" Items="_items" MonthCellMinHeight="120"
                             StartTime="new TimeSpan(5, 0, 0)" EndTime="new TimeSpan(23, 0, 0)"
                             CellClicked="OnCellClicked">
                    <ItemTemplate>
                        <div style="width:100%; height:100%; border-left: 4px solid var(--mud-palette-primary);">
                            <MudText>@context.WorkOrder.WorkOrderNumber</MudText>
                            <MudText Typo="Typo.caption">@context.WorkOrder.TagNumber</MudText>
                        </div>
                    </ItemTemplate>
                </MudCalendar>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudText Typo="Typo.h6">Unscheduled CTL Work Orders</MudText>
                <MudList T="WorkOrder" Clickable="true" @bind-SelectedItem="_selectedWorkOrder">
                    @foreach (var wo in _unscheduled)
                    {
                        <MudListItem Value="wo">
                            <MudPaper Elevation="2" Class="pa-2 ma-1" Style="@(wo == _selectedWorkOrder ? "background-color: var(--mud-palette-action-default);" : "")">
                                <MudText>@wo.WorkOrderNumber</MudText>
                                <MudText Typo="Typo.caption">@wo.TagNumber - Due: @wo.DueDate.ToString("yyyy-MM-dd")</MudText>
                            </MudPaper>
                        </MudListItem>
                    }
                </MudList>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudPaper>

@code {
    private sealed class SchedItem : CalendarItem
    {
        public WorkOrder WorkOrder { get; init; } = default!;
    }

    private List<Machine> _machines = new();
    private List<WorkOrder> _all = new();
    private List<WorkOrder> _unscheduled = new();
    private List<SchedItem> _items = new();

    private int _selectedMachineId;
    private WorkOrder? _selectedWorkOrder;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.Category == MachineCategory.CTL && (!branchId.HasValue || m.BranchId == branchId.Value))
            .ToList();

        if (_machines.Any())
            _selectedMachineId = _machines.First().Id;

        await LoadWorkOrders(branchId);

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("WorkOrderUpdated", async (id) =>
        {
            await LoadWorkOrders(branchId);
            StateHasChanged();
        });

        await _hub.StartAsync();
    }

    private async Task LoadWorkOrders(int? branchId)
    {
        _all = (await WorkOrderService.GetByCategoryAsync(MachineCategory.CTL, branchId))
            .Where(w => _selectedMachineId == 0 || w.MachineId == _selectedMachineId)
            .ToList();

        _unscheduled = _all.Where(w => w.ScheduledStartDate == null).ToList();
        _items = _all.Where(w => w.ScheduledStartDate != null)
            .Select(w => new SchedItem
            {
                Start = w.ScheduledStartDate.Value,
                End = w.ScheduledEndDate,
                WorkOrder = w
            }).ToList();
    }

    private async Task OnCellClicked(DateTime date)
    {
        if (_selectedWorkOrder == null)
        {
            Snackbar.Add("Please select a work order from the list first.", Severity.Info);
            return;
        }

        _selectedWorkOrder.ScheduledStartDate = date.Date.AddHours(5); // Default to 5 AM, start of shift
        _selectedWorkOrder.ScheduledEndDate = _selectedWorkOrder.ScheduledStartDate.Value.AddHours(1); // Default to 1 hour duration

        await WorkOrderService.ScheduleAsync(_selectedWorkOrder.Id, _selectedWorkOrder.ScheduledStartDate.Value, _selectedWorkOrder.ScheduledEndDate);

        _selectedWorkOrder = null; // Deselect after scheduling
        await LoadWorkOrders(null); // Reload all data
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("WorkOrderUpdated", 0); // Send a generic update signal
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }

    private async Task OnSelectedMachineChanged(int value)
    {
        await LoadWorkOrders(null);
        StateHasChanged();
    }
}
