@page "/schedule/ctl"

@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor.Utilities

@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">CTL Schedule</MudText>
            <MudSpacer />
            <MudSelect T="int" Label="Machine" @bind-Value="_selectedMachineId" Dense="true" Style="min-width:240px" ValueChanged="OnSelectedMachineChanged">
                @foreach (var m in _machines)
                {
                    <MudSelectItem T="int" Value="@m.Id">@m.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>

        <MudCalendar T="SchedItem" Items="_items" MonthCellMinHeight="120"
                     EnableDragItems="true" ItemDropped="OnItemDropped"
                     StartTime="new TimeSpan(5, 0, 0)" EndTime="new TimeSpan(23, 0, 0)">
        </MudCalendar>
    </MudStack>
</MudPaper>

@code {
    private sealed class SchedItem : CalendarItem
    {
        public WorkOrder WorkOrder { get; init; } = default!;
        public Color Color { get; set; } = Color.Primary;
    }

    private List<Machine> _machines = new();
    private List<WorkOrder> _all = new();
    private List<SchedItem> _items = new();

    private int _selectedMachineId;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.Category == MachineCategory.CTL && (!branchId.HasValue || m.BranchId == branchId.Value))
            .ToList();

        if (_machines.Any())
            _selectedMachineId = _machines.First().Id;

        await LoadWorkOrders(branchId);

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("WorkOrderUpdated", async (id) =>
        {
            await LoadWorkOrders(branchId);
            StateHasChanged();
        });

        await _hub.StartAsync();
    }

    private async Task LoadWorkOrders(int? branchId)
    {
        _all = (await WorkOrderService.GetByCategoryAsync(MachineCategory.CTL, branchId))
            .Where(w => _selectedMachineId == 0 || w.MachineId == _selectedMachineId)
            .ToList();

        _items = _all.Select(w => new SchedItem
            {
                Start = w.ScheduledStartDate ?? w.DueDate,
                End = w.ScheduledEndDate ?? w.DueDate.AddMinutes(30),
                WorkOrder = w,
                Text = w.WorkOrderNumber, // Required for Heron.MudCalendar
                Color = w.ScheduledStartDate == null ? Color.Warning : Color.Primary
            }).ToList();
    }

    private async Task OnItemDropped(CalendarItem item, DateTime dropDate)
    {
        if (item is not SchedItem schedItem)
            return;

        var workOrder = schedItem.WorkOrder;

        // Preserve the original time of the event if it was already scheduled
        var startTime = workOrder.ScheduledStartDate?.TimeOfDay ?? dropDate.TimeOfDay;

        workOrder.ScheduledStartDate = dropDate.Date + startTime;
        workOrder.ScheduledEndDate = workOrder.ScheduledStartDate.Value.AddMinutes(30);

        await WorkOrderService.ScheduleAsync(workOrder.Id, workOrder.ScheduledStartDate.Value, workOrder.ScheduledEndDate);

        if (_hub is not null)
        {
            // Send a specific ID to allow other clients to potentially highlight the change
            await _hub.SendAsync("WorkOrderUpdated", workOrder.Id);
        }
    }


    private async Task OnSelectedMachineChanged(int value)
    {
        _selectedMachineId = value;
        await LoadWorkOrders(null); // Assuming branchId is handled globally or not needed here
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }
}
