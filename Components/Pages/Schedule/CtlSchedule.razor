@page "/schedule/ctl"
@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services

@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">CTL Schedule</MudText>
            <MudSpacer />
            <MudSelect T="int" Label="Machine" @bind-Value="_selectedMachineId" Dense="true" Style="min-width:240px">
                @foreach (var m in _machines)
                {
                    <MudSelectItem T="int" Value="@m.Id">@m.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>

        <MudDropContainer T="WorkOrder" Items="_all" ItemDropped="HandleItemDropped" ItemsSelector="@((item,dropzone) => GetWorkOrderSelector(item) == dropzone)" Class="d-flex flex-grow-1">
            <MudItem xs="12" sm="9">
                <MudCalendar MonthCellMinHeight="120"
                             StartTime="new TimeSpan(5, 0, 0)"
                             EndTime="new TimeSpan(23, 0, 0)">
                    <CellTemplate>
                        <MudDropZone T="WorkOrder" Identifier="@context.Date.ToString("yyyy-MM-dd")" Class="d-flex flex-column flex-grow-1" Style="height: 100%;" />
                    </CellTemplate>
                </MudCalendar>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudText Typo="Typo.h6">Unscheduled CTL Work Orders</MudText>
                <MudDropZone T="WorkOrder" Identifier="unscheduled" Class="d-flex flex-column flex-grow-1 pa-4 mud-border-2 mud-border-dashed" />
            </MudItem>
            <ItemRenderer>
                <MudPaper Elevation="2" Class="pa-2 ma-1">
                    <MudText>@context.WorkOrderNumber</MudText>
                    <MudText Typo="Typo.caption">@context.TagNumber - Due: @context.DueDate.ToString("yyyy-MM-dd")</MudText>
                </MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    </MudStack>
</MudPaper>

@code {
    private List<Machine> _machines = new();
    private List<WorkOrder> _all = new();

    private int _selectedMachineId;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.Category == MachineCategory.CTL && (!branchId.HasValue || m.BranchId == branchId.Value))
            .ToList();

        if (_machines.Any())
            _selectedMachineId = _machines.First().Id;

        await LoadWorkOrders(branchId);

        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("WorkOrderUpdated", async (id) =>
        {
            await LoadWorkOrders(branchId);
            StateHasChanged();
        });

        await _hub.StartAsync();
    }

    private async Task LoadWorkOrders(int? branchId)
    {
        _all = (await WorkOrderService.GetByCategoryAsync(MachineCategory.CTL, branchId))
            .Where(w => _selectedMachineId == 0 || w.MachineId == _selectedMachineId)
            .ToList();
    }

    private string GetWorkOrderSelector(WorkOrder wo)
    {
        return wo.ScheduledStartDate?.ToString("yyyy-MM-dd") ?? "unscheduled";
    }

    private async Task HandleItemDropped(MudItemDropInfo<WorkOrder> dropItem)
    {
        var item = dropItem.Item;

        if (dropItem.DropzoneIdentifier == "unscheduled")
        {
            item.ScheduledStartDate = null;
            item.ScheduledEndDate = null;
            await WorkOrderService.UpdateAsync(item, "system");
        }
        else if (DateTime.TryParse(dropItem.DropzoneIdentifier, out var newDate))
        {
            item.ScheduledStartDate = newDate.Date.AddHours(5); // Default to 5 AM, start of shift
            item.ScheduledEndDate = item.ScheduledStartDate.Value.AddHours(1); // Default to 1 hour duration
            await WorkOrderService.ScheduleAsync(item.Id, item.ScheduledStartDate.Value, item.ScheduledEndDate);
        }

        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("WorkOrderUpdated", item.Id);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null)
            await _hub.DisposeAsync();
    }

    private async Task OnSelectedMachineChanged(int value)
    {
        await LoadWorkOrders(null);
        StateHasChanged();
    }
}
