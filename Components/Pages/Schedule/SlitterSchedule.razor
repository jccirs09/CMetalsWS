@page "/schedule/slitter"

@using System.Linq
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor.Utilities

@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@implements IAsyncDisposable

<MudPaper Class="pa-4" Style="height: 100%;" Elevation="0">
    <MudCalendar T="ScheduleEvent" Items="_events"
                 EnableDragItems="true" ItemResized="OnWorkOrderItemResized" ItemDropped="OnCalendarItemMoved"
                 EnableResizeItems="true" MonthCellMinHeight="120"
                 ItemClicked="OnItemClicked"
                 StartTime="new TimeSpan(5, 0, 0)" EndTime="new TimeSpan(23, 0, 0)">
        <ToolbarContent>
            <MudText Typo="Typo.h5">Slitter Schedule</MudText>
            <MudSpacer />
            <MudSelect T="int" Label="Machine" Value="_selectedMachineId" ValueChanged="OnSelectedMachineChanged" Dense="true" Margin="Margin.Dense" Style="min-width:240px">
                @foreach (var m in _machines)
                {
                    <MudSelectItem T="int" Value="@m.Id">@m.Name</MudSelectItem>
                }
            </MudSelect>
        </ToolbarContent>
    </MudCalendar>
</MudPaper>

@code {
    private class ScheduleEvent : CalendarItem
    {
        public WorkOrder WorkOrder { get; init; } = default!;
    }

    private List<Machine> _machines = new();
    private List<ScheduleEvent> _events = new();
    private int _selectedMachineId;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var branches = await BranchService.GetBranchesAsync();
        int? branchId = user.IsInRole("Admin") ? null : branches.FirstOrDefault()?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.Category == MachineCategory.Slitter && (!branchId.HasValue || m.BranchId == branchId.Value))
            .ToList();
        if (_machines.Any()) _selectedMachineId = _machines.First().Id;

        await LoadWorkOrders(branchId);
        SetupSignalR(branchId);
    }

    private async Task LoadWorkOrders(int? branchId)
    {
        var workOrders = (await WorkOrderService.GetByCategoryAsync(MachineCategory.Slitter, branchId))
            .Where(w => _selectedMachineId == 0 || w.MachineId == _selectedMachineId)
            .ToList();

        _events = workOrders.Select(wo => new ScheduleEvent
        {
            WorkOrder = wo,
            Start = wo.ScheduledStartDate.Value, // All WOs are now scheduled
            End = wo.ScheduledEndDate.Value,
            Text = wo.WorkOrderNumber,
            Color = Color.Secondary // Differentiate from CTL
        }).ToList();
    }

    private void SetupSignalR(int? branchId)
    {
        _hub = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();
        _hub.On<int>("WorkOrderUpdated", async (id) => {
            await LoadWorkOrders(branchId);
            StateHasChanged();
        });
        _hub.StartAsync();
    }

    private async Task OnItemClicked(CalendarItem item)
    {
        if (item is ScheduleEvent scheduleEvent)
        {
            var parameters = new DialogParameters<Dialogs.WorkOrderDetailsDialog>
            {
                { x => x.WorkOrderId, scheduleEvent.WorkOrder.Id }
            };

            var dialog = await DialogService.ShowAsync<Dialogs.WorkOrderDetailsDialog>("Work Order Details", parameters);
            var result = await dialog.Result;
        }
    }

    private async Task OnCalendarItemMoved(CalendarItem item, DateTime newDate)
    {
        if (item is ScheduleEvent scheduleEvent)
        {
            var workOrder = scheduleEvent.WorkOrder;
            var duration = workOrder.ScheduledEndDate.Value - workOrder.ScheduledStartDate.Value;
            workOrder.ScheduledStartDate = newDate;
            workOrder.ScheduledEndDate = newDate.Add(duration);
            await WorkOrderService.ScheduleAsync(workOrder.Id, workOrder.ScheduledStartDate, workOrder.ScheduledEndDate);
            if (_hub is not null) await _hub.SendAsync("WorkOrderUpdated", workOrder.Id);
        }
    }

    private async Task OnWorkOrderItemResized((CalendarItem Item, DateTime NewStart, DateTime? NewEnd) args)
    {
        if (args.Item is ScheduleEvent scheduleEvent && args.NewEnd.HasValue)
        {
            var workOrder = scheduleEvent.WorkOrder;
            workOrder.ScheduledStartDate = args.NewStart;
            workOrder.ScheduledEndDate = args.NewEnd.Value;
            await WorkOrderService.ScheduleAsync(workOrder.Id, workOrder.ScheduledStartDate, workOrder.ScheduledEndDate);
            if (_hub is not null) await _hub.SendAsync("WorkOrderUpdated", workOrder.Id);
        }
    }

    private async Task OnSelectedMachineChanged(int value)
    {
        _selectedMachineId = value;
        await LoadWorkOrders(null);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null) await _hub.DisposeAsync();
    }
}
