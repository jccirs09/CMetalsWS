@page "/schedule/logistics"


@inject PickingListService PickingListService
@inject NavigationManager Nav

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Logistics Schedule (Picking Lists & Partial Lines)</MudText>
            <MudSpacer />
            <MudSwitch T="bool" @bind-Checked="_showListEvents" Color="Color.Primary">Lists</MudSwitch>
            <MudSwitch T="bool" @bind-Checked="_showItemEvents" Color="Color.Secondary">Items</MudSwitch>
        </MudStack>

        <MudCalendar T="SchedItem"
                     Items="_events"
                     View="_view"
                     StartHour="_startHour"
                     EndHour="_endHour"
                     MonthCellMinHeight="120"
                     EnableDragItems="true"
                     EnableResizeItems="true"
                     CanDragItem="@(item => item.Start >= DateTime.Now)"
                     CanDropItem="@((item, date, view) => (view == CalendarView.Month && date.Add(item.Start.TimeOfDay) >= DateTime.Now) || date >= DateTime.Now)"
                     OnItemDrop="HandleDrop"
                     OnItemClick="HandleClick">
            <CellTemplate Context="evt">
                @{
                    var pl = evt.PickingList!;
                    var truck = pl.Truck?.Name ?? "Unassigned";
                    var header = evt.IsItem
                    ? $"{pl.SalesOrderNumber} • L{evt.LineNumber}"
                    : $"{pl.SalesOrderNumber}";
                    var sub = evt.IsItem
                    ? evt.ItemDescription
                    : (pl.Customer?.CustomerName ?? pl.CustomerName ?? "");
                    var stripe = evt.IsItem ? "var(--mud-palette-secondary)" : "var(--mud-palette-primary)";
                }
                <div style="width:100%;border:1px solid var(--mud-palette-lines-default);border-left:4px solid @stripe;border-radius:6px;overflow:hidden;">
                    <div style="display:flex;align-items:center;gap:.5rem;padding:.25rem .5rem;">
                        <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Size="Size.Small" />
                        <MudText Typo="Typo.body2">@header</MudText>
                        <MudSpacer />
                        <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">@truck</MudChip>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(sub))
                    {
                        <div style="padding:0 .5rem .5rem .5rem;">
                            <MudText Typo="Typo.caption">@sub</MudText>
                        </div>
                    }
                </div>
            </CellTemplate>
        </MudCalendar>
    </MudStack>
</MudPaper>

@code {
    // Custom calendar item carrying our payload
    private sealed class SchedItem : CalendarItem
    {
        public bool IsItem { get; init; }
        public PickingList PickingList { get; init; } = default!;
        public int LineNumber { get; init; }            // used when IsItem
        public string? ItemDescription { get; init; }   // used when IsItem
    }

    private List<SchedItem> _events = new();
    private CalendarView _view = CalendarView.Week;
    private int _startHour = 5;
    private int _endHour = 23;
    private HubConnection? _hub;

    private bool _showListEvents = true;
    private bool _showItemEvents = true;

    // Avoid direct generic event-args references; use dynamic
    private async Task HandleDrop(object e)
    {
        dynamic d = e; // d.Item (SchedItem), d.NewStart (DateTime), d.NewEnd (DateTime?), d.View (CalendarView)
        var item = (SchedItem)d.Item;
        var newStart = (DateTime)d.NewStart;

        if (item.IsItem)
        {
            var line = item.PickingList.Items?.FirstOrDefault(x => x.LineNumber == item.LineNumber);
            if (line != null)
                line.ScheduledShipDate = newStart;
        }
        else
        {
            item.PickingList.ShipDate = newStart;
        }

        await PickingListService.UpdateAsync(item.PickingList);
        await LoadData();
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("ScheduleChanged", item.PickingList.Id);
    }

    // OnItemClick supplies the item itself
    private Task HandleClick(SchedItem item)
    {
        if (!item.IsItem)
            Nav.NavigateTo($"/picking-lists?open={item.PickingList.Id}");
        return Task.CompletedTask;
    }

    private async Task LoadData()
    {
        var all = await PickingListService.GetAsync();
        var evts = new List<SchedItem>();

        if (_showListEvents)
        {
            foreach (var pl in all.Where(pl => pl.ShipDate != null))
            {
                var start = pl.ShipDate!.Value;
                evts.Add(new SchedItem
                {
                    Start = start,
                    End = start.AddHours(1),
                    Text = $"{pl.SalesOrderNumber}",
                    IsItem = false,
                    PickingList = pl,
                    AllDay = false
                });
            }
        }

        if (_showItemEvents)
        {
            foreach (var pl in all)
            {
                if (pl.Items is null) continue;
                foreach (var line in pl.Items.Where(i => i.ScheduledShipDate != null))
                {
                    var start = line.ScheduledShipDate!.Value;
                    evts.Add(new SchedItem
                    {
                        Start = start,
                        End = start.AddHours(1),
                        Text = $"{pl.SalesOrderNumber} • L{line.LineNumber}",
                        IsItem = true,
                        PickingList = pl,
                        LineNumber = line.LineNumber,
                        ItemDescription = line.ItemDescription,
                        AllDay = false
                    });
                }
            }
        }

        _events = evts;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        _hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();
        await _hub.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null) await _hub.DisposeAsync();
    }
}
