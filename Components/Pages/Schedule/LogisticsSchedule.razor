@page "/schedule/logistics"
@using System.Linq
@using MudBlazor
@using CMetalsWS.Data
@using CMetalsWS.Services
@using System.ComponentModel.DataAnnotations

@inject LoadService LoadService
@inject PickingListService PickingListService
@inject TruckService TruckService

<MudPaper Class="pa-4">
    <MudDropContainer T="PickingList" Items="_pickingLists" ItemsSelector="@((item,zone) => GetPickingListZone(item) == zone)" ItemDropped="ItemDropped" Class="d-flex flex-row">
        <ChildContent>
            <MudPaper Class="pa-4" Elevation="0" MinWidth="300px">
                <MudText Typo="Typo.h6">Pending Picking Lists</MudText>
                <MudAccordion>
                    @foreach (var group in _pendingGroups)
                    {
                        <MudExpansionPanel Text="@group.Key.ToString("yyyy-MM-dd")">
                            <MudDropZone T="PickingList" Identifier="@group.Key.ToString("yyyy-MM-dd")" Class="d-flex flex-column flex-grow-1" Style="min-height: 100px;" />
                        </MudExpansionPanel>
                    }
                </MudAccordion>
            </MudPaper>
            @foreach (var load in _loads)
            {
                <MudPaper Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg" MinWidth="300px">
                    <MudToolBar Gutters="false">
                        <MudText Typo="Typo.subtitle1"><b>@load.LoadNumber</b></MudText>
                        <MudSpacer />
                        <MudText Typo="Typo.subtitle2">@load.Truck?.Name</MudText>
                    </MudToolBar>
                    <MudDropZone T="PickingList" Identifier="@load.Id.ToString()" Class="flex-grow-1" />
                </MudPaper>
            }
            <MudPaper Class="pa-4" Elevation="0" Width="300px">
                @if (_addLoadOpen)
                {
                    <MudPaper Elevation="0" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                        <EditForm Model="_newLoadModel" OnValidSubmit="OnValidLoadSubmit">
                            <DataAnnotationsValidator />
                            <MudTextField @bind-Value="_newLoadModel.Name" For="@(() => _newLoadModel.Name)" Placeholder="New Load Name" Underline="false"></MudTextField>
                            <MudSelect T="int" @bind-Value="_newLoadModel.TruckId" For="@(() => _newLoadModel.TruckId)" Label="Truck">
                                @foreach (var truck in _trucks)
                                {
                                    <MudSelectItem T="int" Value="@truck.Id">@truck.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true" Class="mt-2">Add Load</MudButton>
                        </EditForm>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="() => _addLoadOpen = true" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Load</MudButton>
                }
            </MudPaper>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-2 ma-1">
                <MudText>@context.SalesOrderNumber</MudText>
                <MudText Typo="Typo.caption">@context.CustomerName</MudText>
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
</MudPaper>

@code {
    private List<PickingList> _pickingLists = new();
    private List<Load> _loads = new();
    private List<Truck> _trucks = new();
    private IGrouping<DateTime, PickingList>[] _pendingGroups = Array.Empty<IGrouping<DateTime, PickingList>>();

    private bool _addLoadOpen;
    private NewLoadModel _newLoadModel = new();

    protected override async Task OnInitializedAsync()
    {
        _trucks = await TruckService.GetTrucksAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        _pickingLists = await PickingListService.GetAsync();
        _loads = await LoadService.GetAsync();

        _pendingGroups = _pickingLists
            .Where(pl => pl.ShipDate.HasValue && pl.LoadId == null)
            .GroupBy(pl => pl.ShipDate.Value.Date)
            .ToArray();
    }

    private string GetPickingListZone(PickingList pl)
    {
        if (pl.LoadId.HasValue)
        {
            return pl.LoadId.Value.ToString();
        }
        if (pl.ShipDate.HasValue)
        {
            return pl.ShipDate.Value.ToString("yyyy-MM-dd");
        }
        return "unscheduled"; // Should not happen with current logic
    }

    private async Task ItemDropped(MudItemDropInfo<PickingList> dropItem)
    {
        if (int.TryParse(dropItem.DropzoneIdentifier, out var loadId))
        {
            // Dropped on a load
            dropItem.Item.LoadId = loadId;
            await LoadService.AddPickingListToLoadAsync(loadId, dropItem.Item.Id);
        }
        else if (DateTime.TryParse(dropItem.DropzoneIdentifier, out var shipDate))
        {
            // Dropped on a date
            dropItem.Item.LoadId = null;
            // You might want to update the ShipDate here if needed
            // await PickingListService.UpdateAsync(dropItem.Item);
        }

        await LoadData();
        StateHasChanged();
    }

    private async Task OnValidLoadSubmit()
    {
        var newLoad = new Load
        {
            LoadNumber = _newLoadModel.Name,
            TruckId = _newLoadModel.TruckId
        };
        await LoadService.CreateAsync(newLoad);
        _newLoadModel = new();
        _addLoadOpen = false;
        await LoadData();
    }

    public class NewLoadModel
    {
        [Required]
        public string Name { get; set; }
        [Required]
        public int TruckId { get; set; }
    }
}
