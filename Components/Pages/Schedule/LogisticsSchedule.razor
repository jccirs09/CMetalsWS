@page "/schedule/logistics"
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Data.Scheduling
@using CMetalsWS.Services
@inject LoadService LoadService
@inject NavigationManager Nav

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Logistics Schedule</MudText>
            <MudSpacer />
            <MudToggleGroup T="CalendarView" @bind-Value="_view" Color="Color.Primary" Size="Size.Small">
                <MudToggleGroupItem Value="CalendarView.Day">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarViewDay" /> Day
                </MudToggleGroupItem>
                <MudToggleGroupItem Value="CalendarView.Week">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarViewWeek" /> Week
                </MudToggleGroupItem>
                <MudToggleGroupItem Value="CalendarView.Month">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" /> Month
                </MudToggleGroupItem>
            </MudToggleGroup>
            <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                <MudText>Hours</MudText>
                <MudNumericField T="int" Min="0" Max="23" @bind-Value="_startHour" Dense="true" Style="width:85px" />
                <MudText>-</MudText>
                <MudNumericField T="int" Min="1" Max="24" @bind-Value="_endHour" Dense="true" Style="width:85px" />
            </MudStack>
        </MudStack>

        <MudGrid>
            <MudItem xs="12" md="9">
                <MudCalendar T="WorkOrderCalendarItem"
                             Items="_calendarItems"
                             View="_view"
                             StartHour="_startHour"
                             EndHour="_endHour"
                             OnItemDrop="OnItemDrop"
                             OnItemClick="OnItemClick">
                    <ItemContent>
                        @* context refers to the calendar item (WorkOrderCalendarItem) *@
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="px-1">
                            <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Size="Size.Small" />
                            <MudText Typo="Typo.body2">@context.Text</MudText>
                            @if (!string.IsNullOrWhiteSpace(context.LocationCode))
                            {
                                @* specify T explicitly to avoid inference error *@
                                <MudChip T="string" Size="Size.Small" Color="@context.ChipColor" Variant="Variant.Outlined">
                                    @context.LocationCode
                                </MudChip>
                            }
                        </MudStack>
                    </ItemContent>
                </MudCalendar>
            </MudItem>

            <MudItem xs="12" md="3">
                <MudPaper Class="pa-2">
                    <MudText Typo="Typo.h6" GutterBottom="true">Unscheduled Loads</MudText>
                    <MudList T="Load" Dense="true">
                        @foreach (var l in _unscheduledLoads)
                        {
                            <MudListItem>
                                <MudListItemText>
                                    @l.LoadNumber - Truck: @(l.Truck?.Name ?? "Unassigned")
                                    -
                                    Ready: @(l.ScheduledStart?.ToString("yyyy-MM-dd HH:mm") ?? "—")
                                </MudListItemText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudStack>
</MudPaper>

@code {
    private List<WorkOrderCalendarItem> _calendarItems = new();
    private List<Load> _unscheduledLoads = new();
    private CalendarView _view = CalendarView.Week;
    private int _startHour = 6;
    private int _endHour = 18;
    private HubConnection? _hub;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await StartSignalR();
    }

    private async Task LoadData()
    {
        var all = await LoadService.GetLoadsAsync();
        // scheduled loads (ScheduledStart != null) go onto the calendar
        var scheduled = all.Where(l => l.ScheduledStart != null).ToList();
        // unscheduled loads (ScheduledStart == null) appear in the side list
        _unscheduledLoads = all.Where(l => l.ScheduledStart == null).ToList();

        _calendarItems = scheduled.Select(l => new WorkOrderCalendarItem
        {
            WorkOrderId = l.Id,
            WorkOrderNumber = l.LoadNumber,
            Text = $"{l.LoadNumber} • {(l.Truck?.Name ?? "Unassigned")}",
            Start = l.ScheduledStart!.Value,
            End = l.ScheduledEnd ?? l.ScheduledStart!.Value.AddHours(1),
            AllDay = false,
            // location code could be computed from your customer region logic
            LocationCode = LoadService.GetLoadRegionCode(l),
            ChipColor = Color.Info
        }).ToList();
    }

    private async Task OnItemDrop(CalendarItemDropEventArgs<WorkOrderCalendarItem> e)
    {
        // update schedule for this load
        await LoadService.ScheduleAsync(e.Item.WorkOrderId, e.NewStart, e.NewEnd);
        await LoadData();
        StateHasChanged();
        if (_hub != null) await _hub.SendAsync("ScheduleChanged", e.Item.WorkOrderId);
    }

    private Task OnItemClick(CalendarItemClickEventArgs<WorkOrderCalendarItem> e)
    {
        // optionally navigate to detail page
        // Nav.NavigateTo($"/loads/{e.Item.WorkOrderId}");
        return Task.CompletedTask;
    }

    private async Task StartSignalR()
    {
        _hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();

        _hub.On<int>("ScheduleChanged", async _ =>
        {
            await LoadData();
            StateHasChanged();
        });

        await _hub.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub != null) await _hub.DisposeAsync();
    }
}
