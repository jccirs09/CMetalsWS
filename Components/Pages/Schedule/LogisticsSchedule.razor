@page "/schedule/logistics"
@using MudBlazor
@using Heron.MudCalendar
@using Microsoft.AspNetCore.SignalR.Client
@using CMetalsWS.Data
@using CMetalsWS.Services
@inject LoadService LoadService
@inject NavigationManager Nav

@implements IAsyncDisposable

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudText Typo="Typo.h5">Logistics Schedule</MudText>
            <MudSpacer />
        </MudStack>

        <MudCalendar T="CalendarItem"
                     Items="_events"
                     View="_view"
                     StartHour="_startHour"
                     EndHour="_endHour"
                     EnableDragItems="true"
                     EnableResizeItems="true"
                     CanDragItem="@(item => item.Start >= DateTime.Now)"
                     CanDropItem="@((item, date, view) => (view == CalendarView.Month && date.Add(item.Start.TimeOfDay) >= DateTime.Now) || date >= DateTime.Now)"
                     OnItemDrop="OnItemDrop"
                     OnItemClick="OnItemClick">
            <ItemContent>
                @{
                    var load = context.Data as Load;
                    var region = LoadService.GetLoadRegionCode(load);
                }
                <MudStack Row AlignItems="AlignItems.Center" Spacing="1" Class="px-1">
                    <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Size="Size.Small" />
                    <MudText Typo="Typo.body2">@context.Text</MudText>
                    @if (!string.IsNullOrWhiteSpace(region))
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Info" Variant="Variant.Outlined">@region</MudChip>
                    }
                </MudStack>
            </ItemContent>
        </MudCalendar>
    </MudStack>
</MudPaper>

@code {
    private List<CalendarItem> _events = new();
    private CalendarView _view = CalendarView.Week;
    private int _startHour = 6;
    private int _endHour = 18;
    private HubConnection? _hub;

    // correct type
    private async Task OnItemDrop(ItemDropEventArgs<CalendarItem> e)
    {
        var load = e.Item.Data as Load;
        if (load is null) return;

        var start = e.NewStart;
        var end = e.NewEnd ?? start.AddHours(1);

        await LoadService.ScheduleAsync(load.Id, start, end);
        await LoadData();
        StateHasChanged();

        if (_hub is not null)
            await _hub.SendAsync("ScheduleChanged", load.Id);
    }

    // correct type
    private Task OnItemClick(ItemClickEventArgs<CalendarItem> e)
    {
        var load = e.Item.Data as Load;
        // if you don’t need a click handler, remove OnItemClick from <MudCalendar> and this method
        return Task.CompletedTask;
    }

    private async Task LoadData()
    {
        var all = await LoadService.GetLoadsAsync();
        var scheduled = all.Where(x => x.ScheduledStart != null).ToList();

        _events = scheduled.Select(l => new CalendarItem
        {
            Start = l.ScheduledStart!.Value,
            End = l.ScheduledEnd ?? l.ScheduledStart!.Value.AddHours(1),
            Text = $"{l.LoadNumber} • {(l.Truck?.Name ?? "Unassigned")}",
            Data = l,
            AllDay = false
        }).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        _hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/hubs/schedule"))
            .WithAutomaticReconnect()
            .Build();
        await _hub.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is not null) await _hub.DisposeAsync();
    }
}
