@using MudBlazor
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization

@inject WorkOrderService WorkOrderService
@inject AuthenticationStateProvider AuthStateProvider
@inject TaskAuditEventService AuditEventService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Work Order: @(_workOrder?.WorkOrderNumber)</MudText>
    </TitleContent>
    <DialogContent>
        @if (_workOrder == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudText><b>Tag Number:</b> @_workOrder.TagNumber</MudText>
                </MudItem>

                @foreach(var item in _workOrder.Items)
                {
                    <MudItem xs="12"><MudDivider /></MudItem>
                    <MudItem xs="12">
                        <MudText><b>Description:</b> @item.Description</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><b>Sales Order:</b> @item.SalesOrderNumber</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudText><b>Customer:</b> @item.CustomerName</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudText><b>Quantity:</b> @item.OrderQuantity</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudText><b>Weight:</b> @item.OrderWeight</MudText>

                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudText><b>Width:</b> @item.Width</MudText>
                    </MudItem>

                    @if (MachineCategory == MachineCategory.CTL)
                    {
                        <MudItem xs="12" sm="3">
                            <MudText><b>Length:</b> @item.Length</MudText>
                        </MudItem>
                    }
                }
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <AuthorizeView Roles="Planner, Admin">
            <MudButton Color="Color.Secondary" OnClick="Edit">Edit</MudButton>
        </AuthorizeView>
        <AuthorizeView Roles="Operator">
            <MudButton Color="Color.Primary" OnClick="Process">Process</MudButton>
        </AuthorizeView>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public int WorkOrderId { get; set; }
    [Parameter] public MachineCategory MachineCategory { get; set; }

    private WorkOrder? _workOrder;

    protected override async Task OnInitializedAsync()
    {
        _workOrder = await WorkOrderService.GetByIdAsync(WorkOrderId);
    }

    private void Edit()
    {
        // Logic for editing the work order would go here.
        throw new NotImplementedException("Editing a work order is not yet implemented.");
    }

    private async Task Process()
    {
        if (_workOrder is null) return;

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.Identity?.Name ?? "Unknown";

            await WorkOrderService.SetStatusAsync(_workOrder.Id, WorkOrderStatus.InProgress, userId);
            await AuditEventService.CreateAuditEventAsync(_workOrder.Id, TaskType.WorkOrder, AuditEventType.Start, userId, $"Work Order {_workOrder.WorkOrderNumber} processing started.");

            Snackbar.Add("Work Order processing started.", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing Work Order: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
