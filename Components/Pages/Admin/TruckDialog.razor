@using CMetalsWS.Data
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudIcon Icon="@Icons.Material.Filled.LocalShipping" />
            <MudText Typo="Typo.h6">@Title</MudText>
        </MudStack>
    </TitleContent>

    <DialogContent>
        <MudPaper Class="pa-4" Elevation="0">
            <MudForm Model="@Model" @ref="form">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Model.Name" Label="Name" Required="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="Model.Identifier" Label="Identifier" Required="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="Model.Description" Label="Description" Lines="3" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <!-- BranchId is int (non-nullable) so use T="int" -->
                        <MudSelect T="int" Label="Branch" @bind-Value="Model.BranchId" Required="true" RequiredError="Branch is required">
                            <MudSelectItem T="int" Value="0" Disabled="true">Select Branch</MudSelectItem>
                            @foreach (var b in Branches)
                            {
                                <MudSelectItem T="int" Value="b.Id">@b.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="string" Label="Driver" @bind-Value="Model.DriverId" Clearable="true">
                            <MudSelectItem T="string" Value="@(null as string)" Disabled="true">Unassigned</MudSelectItem>
                            @foreach (var d in Drivers)
                            {
                                <MudSelectItem T="string" Value="@d.Id">@($"{d.FirstName} {d.LastName}".Trim())</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField T="decimal" @bind-Value="Model.CapacityWeight" Label="Capacity Weight" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="decimal" @bind-Value="Model.CapacityVolume" Label="Capacity Volume" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public Truck Model { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public List<ApplicationUser> Drivers { get; set; } = new();

    private MudForm form = default!;

    [CascadingParameter] public IMudDialogInstance Dialog { get; set; } = default!;

    private async Task Save()
    {
        await form.Validate();
        if (!form.IsValid) return;
        Dialog.Close(DialogResult.Ok(Model));
    }

    private void Cancel() => Dialog.Cancel();
}
