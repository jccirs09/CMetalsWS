@page "/trucks"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using MudBlazor
@attribute [Authorize(Policy = CMetalsWS.Security.Permissions.Trucks.View)]

@inject TruckService TruckService
@inject BranchService BranchService
@inject UserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IAuthorizationService AuthorizationService

<MudPaper Class="p-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">Trucks</MudText>
        <AuthorizeView Policy="@Permissions.Trucks.Add">
            <Authorized>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddTruck">
                    Add Truck
                </MudButton>
            </Authorized>
        </AuthorizeView>
    </MudStack>

    <MudTable Items="items" Hover="true" Dense="true" Context="truck">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Identifier</MudTh>
            <MudTh>Branch</MudTh>
            <MudTh>Driver</MudTh>
            <MudTh class="text-right">Capacity Weight</MudTh>
            <MudTh class="text-right">Capacity Volume</MudTh>
            <MudTh>Active</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@truck.Name</MudTd>
            <MudTd DataLabel="Identifier">@truck.Identifier</MudTd>
            <MudTd DataLabel="Branch">@truck.Branch?.Name</MudTd>
            <MudTd DataLabel="Driver">@($"{truck.Driver?.FirstName} {truck.Driver?.LastName}".Trim())</MudTd>
            <MudTd DataLabel="Capacity Weight" Class="text-right">@truck.CapacityWeight.ToString("N2")</MudTd>
            <MudTd DataLabel="Capacity Volume" Class="text-right">@truck.CapacityVolume.ToString("N2")</MudTd>
            <MudTd DataLabel="Active">
                <MudIcon Icon="@(truck.IsActive? Icons.Material.Filled.CheckCircle : Icons.Material.Outlined.RadioButtonUnchecked)" Color="@(truck.IsActive? Color.Success: Color.Default)" />
            </MudTd>
            <MudTd DataLabel="Actions">
                @if (_canEdit)
                {
                    <MudIconButton Color="Color.Info"
                                   Icon="@Icons.Material.Filled.Edit"
                                   title="Edit"
                                   OnClick="@(async () => await EditTruck(truck))" />
                }
                @if (_canDelete)
                {
                    <MudIconButton Color="Color.Error"
                                   Icon="@Icons.Material.Filled.Delete"
                                   title="Delete"
                                   OnClick="@(async () => await DeleteTruck(truck))" />
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Truck> items = new();
    private List<ApplicationUser> drivers = new();
    private bool _canEdit;
    private bool _canDelete;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        _canEdit = (await AuthorizationService.AuthorizeAsync(user, Permissions.Trucks.Edit)).Succeeded;
        _canDelete = (await AuthorizationService.AuthorizeAsync(user, Permissions.Trucks.Delete)).Succeeded;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        items = await TruckService.GetTrucksAsync();
        await LoadDriversAsync();
        StateHasChanged();
    }

    private async Task LoadDriversAsync()
    {
        drivers = new();
        var allUsers = await UserService.GetUsersAsync();
        foreach (var u in allUsers)
        {
            var roles = await UserService.GetRolesForUserAsync(u);
            if (roles.Contains("Driver"))
                drivers.Add(u);
        }
    }

    private async Task AddTruck()
    {
        var branches = await BranchService.GetBranchesAsync();

        var parameters = new DialogParameters
        {
            ["Model"] = new Truck { IsActive = true },
            ["Branches"] = branches,
            ["Drivers"] = drivers,
            ["IsEdit"] = false,
            ["Title"] = "Add Truck"
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<TruckDialog>("Add Truck", parameters, options);
        if (dialogRef is not null)
        {
            var result = await dialogRef.Result;
            if (result is not null && !result.Canceled && result.Data is Truck model)
            {
                await TruckService.CreateAsync(model);
                Snackbar.Add("Truck created.", Severity.Success);
                await LoadAsync();
            }
        }
    }

    private async Task EditTruck(Truck item)
    {
        var branches = await BranchService.GetBranchesAsync();

        var clone = new Truck
        {
            Id = item.Id,
            Name = item.Name,
            Identifier = item.Identifier,
            Description = item.Description,
            BranchId = item.BranchId,
            CapacityWeight = item.CapacityWeight,
            CapacityVolume = item.CapacityVolume,
            IsActive = item.IsActive,
            DriverId = item.DriverId
        };

        var parameters = new DialogParameters
        {
            ["Model"] = clone,
            ["Branches"] = branches,
            ["Drivers"] = drivers,
            ["IsEdit"] = true,
            ["Title"] = "Edit Truck"
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };
        var dialogRef = await DialogService.ShowAsync<TruckDialog>("Edit Truck", parameters, options);
        if (dialogRef is not null)
        {
            var result = await dialogRef.Result;
            if (result is not null && !result.Canceled && result.Data is Truck model)
            {
                await TruckService.UpdateAsync(model);
                Snackbar.Add("Truck updated.", Severity.Success);
                await LoadAsync();
            }
        }
    }

    private async Task DeleteTruck(Truck item)
    {
        bool? confirm = await DialogService.ShowMessageBox("Delete Confirmation", $"Delete truck '{item.Name}'?", yesText: "Delete", cancelText: "Cancel");
        if (confirm == true)
        {
            await TruckService.DeleteAsync(item.Id);
            Snackbar.Add("Truck deleted.", Severity.Success);
            await LoadAsync();
        }
    }
}
