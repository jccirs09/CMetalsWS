@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>

    <DialogContent>
        <MudForm @ref="_form" Model="@GroupModel">
            <MudTextField @bind-Value="GroupModel.Name"
                          Label="Group Name"
                          Required="true"
                          Immediate="true" />

            <MudSelect T="int?" @bind-Value="GroupModel.BranchId" Label="Branch" Clearable="true">
                <MudSelectItem T="int?" Value="@( (int?)null )">None</MudSelectItem>
                @foreach (var branch in Branches)
                {
                    <MudSelectItem T="int?" Value="@branch.Id">@branch.Name</MudSelectItem>
                }
            </MudSelect>

            <!-- Multi-select MUST bind SelectedValues (HashSet<T>) -->
            <MudSelect T="string"
                       Label="Users"
                       MultiSelection="true"
                       @bind-SelectedValues="_selectedUserIds"
                       Dense="true">
                @foreach (var user in Users)
                {
                    <MudSelectItem T="string" Value="@user.Id">@user.UserName</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@SubmitText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!; // merge marker begone

    [Parameter] public ChatGroup GroupModel { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public List<ApplicationUser> Users { get; set; } = new();

    // Incoming preselected users (for edit). Weâ€™ll return an updated list in the result.
    [Parameter] public List<string> SelectedUsers { get; set; } = new();

    [Parameter] public string Title { get; set; } = "Add Group";
    [Parameter] public string SubmitText { get; set; } = "Add";

    private MudForm _form = default!;
    private HashSet<string> _selectedUserIds = new();

    protected override void OnParametersSet()
    {
        // Prime the multi-select from incoming SelectedUsers
        _selectedUserIds = SelectedUsers?.ToHashSet() ?? new HashSet<string>();
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await _form.Validate();
        if (!_form.IsValid) return;

        MudDialog.Close(DialogResult.Ok(new ChatGroupDialogResult
        {
            Group = GroupModel,
            SelectedUsers = _selectedUserIds.ToList()
        }));
    }

    public class ChatGroupDialogResult
    {
        public ChatGroup Group { get; set; } = new();
        public List<string> SelectedUsers { get; set; } = new();
    }
}
