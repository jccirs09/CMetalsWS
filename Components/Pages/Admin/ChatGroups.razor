@page "/admin/chatgroups"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using MudBlazor
@using CMetalsWS.Components.Pages.Admin
@attribute [Authorize(Policy = Permissions.Users.Edit)]

@inject IChatService ChatService
@inject BranchService BranchService
@inject UserService UserService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">Chat Groups</MudText>
        <AuthorizeView Policy="@Permissions.Users.Edit">
            <Authorized>
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="AddGroup">
                    Add Group
                </MudButton>
            </Authorized>
        </AuthorizeView>
    </MudStack>

    <MudTable Items="_groups" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Branch</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Branch">@context.Branch?.Name</MudTd>
            <MudTd DataLabel="Actions">
                <AuthorizeView Policy="@Permissions.Users.Edit">
                    <Authorized>
                        <MudIconButton Color="Color.Info"
                                       Icon="@Icons.Material.Filled.Edit"
                                       title="Edit"
                                       OnClick="@(() => EditGroup(context))" />
                        <MudIconButton Color="Color.Error"
                                       Icon="@Icons.Material.Filled.Delete"
                                       title="Delete"
                                       OnClick="@(() => DeleteGroup(context))" />
                    </Authorized>
                </AuthorizeView>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<ChatGroup> _groups = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupsAsync();
    }

    private async Task LoadGroupsAsync()
    {
        _groups = await ChatService.GetAllGroupsAsync();
        StateHasChanged();
    }

    private async Task AddGroup()
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Add Group",
            ["SubmitText"] = "Add",
            ["Branches"] = await BranchService.GetBranchesAsync(),
            ["Users"] = await UserService.GetUsersAsync()
        };

        var dialog = DialogService.Show<ChatGroupDialog>("Add Group", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var dialogResult = (ChatGroupDialog.ChatGroupDialogResult)result.Data;
            await ChatService.CreateGroupAsync(dialogResult.Group.Name, dialogResult.Group.BranchId, dialogResult.SelectedUsers);
            await LoadGroupsAsync();
            Snackbar.Add("Group created successfully.", Severity.Success);
        }
    }

    private async Task EditGroup(ChatGroup group)
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Edit Group",
            ["SubmitText"] = "Update",
            ["GroupModel"] = group,
            ["Branches"] = await BranchService.GetBranchesAsync(),
            ["Users"] = await UserService.GetUsersAsync(),
            ["SelectedUsers"] = group.ChatGroupUsers.Select(u => u.UserId).ToList()
        };

        var dialog = DialogService.Show<ChatGroupDialog>("Edit Group", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var dialogResult = (ChatGroupDialog.ChatGroupDialogResult)result.Data;
            await ChatService.UpdateGroupAsync(dialogResult.Group, dialogResult.SelectedUsers);
            await LoadGroupsAsync();
            Snackbar.Add("Group updated successfully.", Severity.Success);
        }
    }

    private async Task DeleteGroup(ChatGroup group)
    {
        var parameters = new DialogParameters
        {
            ["Title"] = "Delete Group",
            ["ContentText"] = $"Are you sure you want to delete the group '{group.Name}'?",
            ["SubmitText"] = "Delete",
            ["CancelText"] = "Cancel"
        };

        var dialog = DialogService.Show<MudMessageBox>("Delete Group", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ChatService.DeleteGroupAsync(group.Id);
            await LoadGroupsAsync();
            Snackbar.Add("Group deleted successfully.", Severity.Success);
        }
    }
}
