@page "/admin/destination-regions"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@using System.Collections.Generic
@using System.Linq
@attribute [Authorize(Policy = Permissions.Customers.Manage)]

@inject DestinationRegionService DestinationRegionService
@inject BranchService BranchService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">Destination Regions</MudText>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog">
            New Region
        </MudButton>
    </MudStack>

    <MudTable Items="_regions" Dense="true" Hover="true" Striped="true" Class="mt-4">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Branches</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Branches">
                @string.Join(", ", context.Branches.Select(b => b.Name))
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenEditDialog(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => OnDelete(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<DestinationRegion> _regions = new();
    private List<Branch> _branches = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _regions = await DestinationRegionService.GetDestinationRegionsAsync();
        _branches = await BranchService.GetBranchesAsync();
        StateHasChanged();
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters { ["Branches"] = _branches };
        var dialog = await DialogService.ShowAsync<DestinationRegionDialog>("New Region", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var tuple = (Tuple<DestinationRegion, IEnumerable<int>>)result.Data;
            var newRegion = tuple.Item1;
            var selectedBranchIds = tuple.Item2;

            if (string.IsNullOrWhiteSpace(newRegion.Name))
            {
                Snackbar.Add("Name is required.", Severity.Warning);
                return;
            }

            await DestinationRegionService.CreateAsync(newRegion, selectedBranchIds);
            Snackbar.Add("Region created successfully.", Severity.Success);
            await LoadData();
        }
    }

    private async Task OpenEditDialog(DestinationRegion region)
    {
        // Clone the region to avoid modifying the original object in the table before saving
        var regionClone = new DestinationRegion
        {
            Id = region.Id,
            Name = region.Name,
            Branches = new List<Branch>(region.Branches)
        };

        var parameters = new DialogParameters
        {
            ["Model"] = regionClone,
            ["IsEdit"] = true,
            ["Branches"] = _branches
        };
        var dialog = await DialogService.ShowAsync<DestinationRegionDialog>("Edit Region", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var tuple = (Tuple<DestinationRegion, IEnumerable<int>>)result.Data;
            var updatedRegion = tuple.Item1;
            var selectedBranchIds = tuple.Item2;

            if (string.IsNullOrWhiteSpace(updatedRegion.Name))
            {
                Snackbar.Add("Name is required.", Severity.Warning);
                return;
            }

            await DestinationRegionService.UpdateAsync(updatedRegion, selectedBranchIds);
            Snackbar.Add("Region updated successfully.", Severity.Success);
            await LoadData();
        }
    }

    private async Task OnDelete(int id)
    {
        var region = _regions.FirstOrDefault(r => r.Id == id);
        if (region == null)
        {
            Snackbar.Add("Region not found.", Severity.Error);
            return;
        }
        var result = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            $"Are you sure you want to delete '{region.Name}'?",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (result == true)
        {
            await DestinationRegionService.DeleteAsync(id);
            Snackbar.Add("Region deleted successfully.", Severity.Success);
            await LoadData();
        }
    }
}
