@using CMetalsWS.Data
@using MudBlazor
@using System.Collections.Generic
@using System.Linq
@using System.Reflection
@using MudBlazor.Utilities

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(IsEdit ? "Edit Region" : "New Region")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model" @ref="_form">
            <MudTextField @bind-Value="Model.Name" Label="Name" Required="true" />
            <MudAutocomplete T="string" Label="Icon" @bind-Value="_selectedIconName" SearchFunc="@SearchIcons" HelperText="Select a MudBlazor icon" />
            <MudColorPicker Label="Color" @bind-Value="_color" PickerVariant="PickerVariant.Inline" HelperText="Select a color" />
            <MudSelect T="int" Label="Branches" MultiSelection="true" @bind-SelectedValues="_selectedBranchIds">
                @foreach (var branch in Branches)
                {
                    <MudSelectItem T="int" Value="@branch.Id">@branch.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public DestinationRegion Model { get; set; } = new();

    [Parameter]
    public List<Branch> Branches { get; set; } = new();

    [Parameter]
    public bool IsEdit { get; set; }

    private MudForm _form = default!;
    private IEnumerable<int> _selectedBranchIds = new List<int>();
    private MudColor _color = new MudColor("#424242"); // Default to grey so it's not empty
    private Dictionary<string, string> _iconMap = new();
    private string _selectedIconName = string.Empty;

    protected override void OnInitialized()
    {
        // Populate the icon map with Name -> SVG Path
        _iconMap = typeof(Icons.Material.Filled)
            .GetFields(BindingFlags.Public | BindingFlags.Static)
            .Where(f => f.IsLiteral && !f.IsInitOnly && f.FieldType == typeof(string))
            .ToDictionary(f => f.Name, f => (string)f.GetValue(null));

        if (IsEdit)
        {
            _selectedBranchIds = Model.Branches.Select(b => b.Id).ToList();

            // Safely set the color
            if (!string.IsNullOrEmpty(Model.Color))
            {
                try
                {
                    _color = new MudColor(Model.Color);
                }
                catch (FormatException)
                {
                    // Fallback for invalid color strings in the database
                    _color = new MudColor("#424242");
                }
            }

            // Find the name for the existing icon SVG path
            if (!string.IsNullOrEmpty(Model.Icon))
            {
                var entry = _iconMap.FirstOrDefault(kvp => kvp.Value == Model.Icon);
                if (entry.Key != null)
                {
                    _selectedIconName = entry.Key;
                }
            }
        }
    }

    private async Task<IEnumerable<string>> SearchIcons(string value, CancellationToken token)
    {
        await Task.Delay(5, token);
        if (string.IsNullOrEmpty(value))
        {
            return _iconMap.Keys.OrderBy(k => k).Take(20);
        }
        return _iconMap.Keys.Where(i => i.Contains(value, StringComparison.InvariantCultureIgnoreCase)).OrderBy(k => k);
    }

    private async Task Save()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            // Update Model.Icon with the SVG path from the map
            if (!string.IsNullOrEmpty(_selectedIconName) && _iconMap.TryGetValue(_selectedIconName, out var iconValue))
            {
                Model.Icon = iconValue;
            }
            else
            {
                Model.Icon = string.Empty;
            }

            Model.Color = _color.ToString(MudColorOutputFormats.Hex);
            var result = new Tuple<DestinationRegion, IEnumerable<int>>(Model, _selectedBranchIds);
            MudDialog.Close(DialogResult.Ok(result));
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}