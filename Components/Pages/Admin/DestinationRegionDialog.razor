@using CMetalsWS.Data
@using MudBlazor
@using System.Collections.Generic
@using System.Linq

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(IsEdit ? "Edit Region" : "New Region")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@Model" @ref="_form">
            <MudTextField @bind-Value="Model.Name" Label="Name" Required="true" />
            <MudSelect T="int" Label="Branches" MultiSelection="true" @bind-SelectedValues="_selectedBranchIds">
                @foreach (var branch in Branches)
                {
                    <MudSelectItem T="int" Value="@branch.Id">@branch.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public DestinationRegion Model { get; set; } = new();

    [Parameter]
    public List<Branch> Branches { get; set; } = new();

    [Parameter]
    public bool IsEdit { get; set; }

    private MudForm _form = default!;
    private IEnumerable<int> _selectedBranchIds = new List<int>();

    protected override void OnInitialized()
    {
        if (IsEdit)
        {
            _selectedBranchIds = Model.Branches.Select(b => b.Id).ToList();
        }
    }

    private async Task Save()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            var result = new Tuple<DestinationRegion, IEnumerable<int>>(Model, _selectedBranchIds);
            MudDialog.Close(DialogResult.Ok(result));
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
