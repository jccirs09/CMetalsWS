@using CMetalsWS.Data
@using CMetalsWS.Security
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Class="pa-4" Elevation="0">
            <MudForm Model="@Model" @ref="form">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="Model.Name" Label="Role Name" Required="true"></MudTextField>
                    <MudTextField @bind-Value="Model.Description" Label="Description"></MudTextField>
                    <MudText Typo="Typo.h6" Class="mt-4">Permissions</MudText>
                    <MudExpansionPanels MultiExpansion="true">
                        @foreach (var group in _permissionGroups)
                        {
                            <MudExpansionPanel Text="@group.Key">
                                @foreach (var permission in group)
                                {
                                    <MudCheckBox @bind-Checked="@_selectedPermissions[permission]" Label="@permission.Split('.').Last()" />
                                }
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </MudStack>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudSpacer />
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public ApplicationRole Model { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public string Title { get; set; } = "";

    private MudForm form = default!;
    [CascadingParameter] public IMudDialogInstance Dialog { get; set; } = default!;

    private ILookup<string, string> _permissionGroups = default!;
    private Dictionary<string, bool> _selectedPermissions = new();

    protected override void OnInitialized()
    {
        _permissionGroups = Permissions.All().ToLookup(p => p.Split('.').First());
        _selectedPermissions = Permissions.All().ToDictionary(p => p, p => Model.Permissions.Contains(p));
    }

    private async Task Save()
    {
        await form.Validate();
        if (form.IsValid)
        {
            Model.Permissions = _selectedPermissions.Where(p => p.Value).Select(p => p.Key).ToList();
            Dialog.Close(DialogResult.Ok(Model));
        }
    }

    private void Cancel()
    {
        Dialog.Cancel();
    }
}
