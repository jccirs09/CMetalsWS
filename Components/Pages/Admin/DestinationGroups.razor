@page "/admin/destination-groups"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@attribute [Authorize(Policy = Permissions.Customers.Manage)]

@inject DestinationGroupService DestinationGroupService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="p-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">Destination Groups</MudText>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenCreateDialog">
            New Group
        </MudButton>
    </MudStack>

    <MudTable Items="_groups" Dense="true" Hover="true" Striped="true" Class="mt-4">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenEditDialog(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="() => OnDelete(context.Id)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<DestinationGroup> _groups = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadGroups();
    }

    private async Task LoadGroups()
    {
        _groups = await DestinationGroupService.GetDestinationGroupsAsync();
        StateHasChanged();
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<DestinationGroupDialog>("New Group");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newGroup = (DestinationGroup)result.Data;
            if (string.IsNullOrWhiteSpace(newGroup.Name))
            {
                Snackbar.Add("Name is required.", Severity.Warning);
                return;
            }
            await DestinationGroupService.CreateAsync(newGroup);
            Snackbar.Add("Group created successfully.", Severity.Success);
            await LoadGroups();
        }
    }

    private async Task OpenEditDialog(DestinationGroup group)
    {
        var parameters = new DialogParameters { ["Model"] = group, ["IsEdit"] = true };
        var dialog = await DialogService.ShowAsync<DestinationGroupDialog>("Edit Group", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedGroup = (DestinationGroup)result.Data;
            if (string.IsNullOrWhiteSpace(updatedGroup.Name))
            {
                Snackbar.Add("Name is required.", Severity.Warning);
                return;
            }
            await DestinationGroupService.UpdateAsync(updatedGroup);
            Snackbar.Add("Group updated successfully.", Severity.Success);
            await LoadGroups();
        }
    }

    private async Task OnDelete(int id)
    {
        var group = _groups.FirstOrDefault(g => g.Id == id);
        if (group == null)
        {
            Snackbar.Add("Group not found.", Severity.Error);
            return;
        }
        var result = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            $"Are you sure you want to delete '{group.Name}'?",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (result == true)
        {
            await DestinationGroupService.DeleteAsync(id);
            Snackbar.Add("Group deleted successfully.", Severity.Success);
            await LoadGroups();
        }
    }
}
