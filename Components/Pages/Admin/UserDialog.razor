@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" />
            <MudText Typo="Typo.h6">@Title</MudText>
        </MudStack>
    </TitleContent>

    <DialogContent>
        <MudPaper Class="pa-4" Elevation="0">
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="mb-3">@_errorMessage</MudAlert>
            }

            <MudForm Model="@UserModel" @ref="form">
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle2">Account</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="UserModel.UserName"
                                      Label="User Name"
                                      Required="true"
                                      RequiredError="User name is required"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Badge"
                                      Class="mb-2" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="UserModel.Email"
                                      Label="Email"
                                      Required="true"
                                      RequiredError="Email is required"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Email"
                                      InputType="InputType.Email"
                                      Class="mb-2" />
                    </MudItem>

                    @if (!IsEdit)
                    {
                        <MudItem xs="12">
                            <MudSwitch T="bool" checked="true" Disabled="true">
                                Email will be marked as verified
                            </MudSwitch>
                        </MudItem>
                    }

                    <MudItem xs="12">
                        <MudDivider Class="my-2" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle2">Profile</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="UserModel.FirstName"
                                      Label="First Name"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Person"
                                      Class="mb-2" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="UserModel.LastName"
                                      Label="Last Name"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.PersonOutline"
                                      Class="mb-2" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" Label="Branch"
                                   ValueChanged="OnBranchChanged"
                                   Value="UserModel.BranchId"
                                   Clearable="true"
                                   Class="mb-2">
                            <MudSelectItem T="int?" Value="@((int?)null)" Disabled="true">Select Branch</MudSelectItem>
                            @foreach (var b in Branches)
                            {
                                <MudSelectItem T="int?" Value="@((int?)b.Id)">@b.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" Label="Shift"
                                   @bind-Value="UserModel.ShiftId"
                                   Clearable="true"
                                   Class="mb-2"
                                   Disabled="@(UserModel.BranchId == null)">
                            <MudSelectItem T="int?" Value="@((int?)null)" Disabled="true">Select Shift</MudSelectItem>
                            @foreach (var s in _shifts)
                            {
                                <MudSelectItem T="int?" Value="@((int?)s.Id)">@s.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="int?" Label="Machine"
                                   @bind-Value="UserModel.MachineId"
                                   Clearable="true"
                                   Class="mb-2"
                                   Disabled="@(UserModel.BranchId == null)">
                            <MudSelectItem T="int?" Value="@((int?)null)" Disabled="true">Select Machine</MudSelectItem>
                            @foreach (var m in _machines)
                            {
                                <MudSelectItem T="int?" Value="@((int?)m.Id)">@m.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="string?" Label="Role"
                                   @bind-Value="_selectedRole"
                                   Clearable="true"
                                   Class="mb-2">
                            <MudSelectItem T="string?" Value="@((string?)null)" Disabled="true">Select Role</MudSelectItem>
                            @foreach (var role in Roles)
                            {
                                <MudSelectItem T="string?" Value="@role.Name">@role.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    @if (!IsEdit)
                    {
                        <MudItem xs="12">
                            <MudDivider Class="my-2" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2">Credentials</MudText>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudTextField T="string"
                                          Label="Password"
                                          @bind-Value="Password"
                                          InputType="InputType.Password"
                                          Required="true"
                                          RequiredError="Password is required"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Lock"
                                          Class="mb-2" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField T="string"
                                          Label="Confirm Password"
                                          @bind-Value="ConfirmPassword"
                                          InputType="InputType.Password"
                                          Required="true"
                                          RequiredError="Confirm password is required"
                                          Error="@_confirmError"
                                          ErrorText="@_confirmErrorText"
                                          OnBlur="@(_ => ValidateConfirm())"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Lock"
                                          Class="mb-2" />
                        </MudItem>
                    }
                </MudGrid>
            </MudForm>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@_saving" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_saving" OnClick="Save">
            @if (_saving)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public ApplicationUser UserModel { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public List<ApplicationRole> Roles { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public IEnumerable<string> SelectedRoles { get; set; } = Enumerable.Empty<string>();
    [Inject] private ShiftService ShiftService { get; set; } = default!;
    [Inject] private MachineService MachineService { get; set; } = default!;
    private List<Shift> _shifts = new();
    private List<Machine> _machines = new();

    private MudForm form = default!;
    private string Password { get; set; } = "";
    private string ConfirmPassword { get; set; } = "";

    [CascadingParameter] public IMudDialogInstance Dialog { get; set; } = default!;

    private string? _selectedRole;
    private bool _saving = false;
    private string? _errorMessage;
    private bool _confirmError;
    private string _confirmErrorText = "";

    protected override async Task OnParametersSetAsync()
    {
        _selectedRole = SelectedRoles?.FirstOrDefault();
        if (UserModel.BranchId.HasValue)
        {
            await LoadShifts(UserModel.BranchId.Value);
            await LoadMachines(UserModel.BranchId.Value);
        }
    }

    private async Task LoadShifts(int branchId)
    {
        _shifts = await ShiftService.GetShiftsAsync(branchId);
        StateHasChanged();
    }

    private async Task LoadMachines(int branchId)
    {
        _machines = await MachineService.GetMachinesAsync(branchId);
        StateHasChanged();
    }

    private async Task OnBranchChanged(int? branchId)
    {
        UserModel.BranchId = branchId;
        if (UserModel.BranchId.HasValue)
        {
            await LoadShifts(UserModel.BranchId.Value);
            await LoadMachines(UserModel.BranchId.Value);
        }
        else
        {
            _shifts.Clear();
            UserModel.ShiftId = null;
            _machines.Clear();
            UserModel.MachineId = null;
        }
    }

    private void ValidateConfirm()
    {
        if (!IsEdit)
        {
            _confirmError = Password != ConfirmPassword;
            _confirmErrorText = _confirmError ? "Passwords do not match" : "";
        }
    }

    private async Task Save()
    {
        _errorMessage = null;
        _saving = true;
        try
        {
            await form.Validate();
            if (!form.IsValid)
            {
                _saving = false;
                return;
            }

            if (!IsEdit)
            {
                ValidateConfirm();
                if (_confirmError)
                {
                    _saving = false;
                    return;
                }

                UserModel.EmailConfirmed = true;
            }

            var rolesToReturn = string.IsNullOrWhiteSpace(_selectedRole)
                ? Array.Empty<string>()
                : new[] { _selectedRole };

            var payload = new UserDialogResult(UserModel, IsEdit ? null : Password, rolesToReturn);
            Dialog.Close(DialogResult.Ok<UserDialogResult>(payload));
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _saving = false;
            StateHasChanged();
        }
    }

    private void Cancel() => Dialog.Cancel();
}
