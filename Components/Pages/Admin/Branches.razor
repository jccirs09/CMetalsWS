@page "/branches"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using MudBlazor
@attribute [Authorize(Policy = Permissions.Branches.View)]

@inject BranchService BranchService
@inject IDialogService DialogService
@inject IAuthorizationService AuthorizationService

<MudPaper Class="p-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h5">Branches</MudText>
        <AuthorizeView Policy="@Permissions.Branches.Add">
            <Authorized>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddBranch">Add Branch</MudButton>
            </Authorized>
        </AuthorizeView>
    </MudStack>
    <MudTable Items="branches" Hover="true" Context="branch">
        <HeaderContent>
            <MudTh>Code</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>City</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Code">@branch.Code</MudTd>
            <MudTd DataLabel="Name">@branch.Name</MudTd>
            <MudTd DataLabel="City">@branch.City</MudTd>
            <MudTd DataLabel="Actions">
                @if (_canEdit)
                {
                    <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditBranch(branch))"></MudIconButton>
                }
                @if (_canDelete)
                {
                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteBranch(branch))"></MudIconButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Branch> branches = new();
    private bool _canEdit;
    private bool _canDelete;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        _canEdit = (await AuthorizationService.AuthorizeAsync(user, Permissions.Branches.Edit)).Succeeded;
        _canDelete = (await AuthorizationService.AuthorizeAsync(user, Permissions.Branches.Delete)).Succeeded;
        branches = await BranchService.GetBranchesAsync();
    }

    private async Task AddBranch()
    {
        var parameters = new DialogParameters
        {
            ["Model"] = new Branch(),
            ["IsEdit"] = false,
            ["Title"] = "Add Branch"
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogRef = await DialogService.ShowAsync<BranchDialog>("Add Branch", parameters, options);
        if (dialogRef is not null)
        {
            var result = await dialogRef.Result;
            if (result is not null && result.Data is Branch saved)
            {
                await BranchService.AddBranchAsync(saved);
                branches = await BranchService.GetBranchesAsync();
            }
        }
    }

    private async Task EditBranch(Branch branch)
    {
        var clone = new Branch
        {
            Id = branch.Id,
            Code = branch.Code,
            Name = branch.Name,
            AddressLine = branch.AddressLine,
            City = branch.City,
            Province = branch.Province,
            Country = branch.Country,
            PostalCode = branch.PostalCode
        };
        var parameters = new DialogParameters
        {
            ["Model"] = clone,
            ["IsEdit"] = true,
            ["Title"] = "Edit Branch"
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogRef = await DialogService.ShowAsync<BranchDialog>("Edit Branch", parameters, options);
        if (dialogRef is not null)
        {
            var result = await dialogRef.Result;
            if (result is not null && result.Data is Branch updated)
            {
                updated.Id = branch.Id;
                await BranchService.UpdateBranchAsync(updated);
                branches = await BranchService.GetBranchesAsync();
            }
        }
    }

    private async Task DeleteBranch(Branch branch)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            $"Are you sure you want to delete branch '{branch.Name}'?",
            yesText: "Delete", cancelText: "Cancel");
        if (confirm == true)
        {
            await BranchService.DeleteBranchAsync(branch.Id);
            branches = await BranchService.GetBranchesAsync();
        }
    }
}
