@using CMetalsWS.Data
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Spacing="3">
                <MudTextField T="string" Label="Code" @bind-Value="Model.Code" Required="true" />
                <MudTextField T="string" Label="Name" @bind-Value="Model.Name" Required="true" />
                <MudTextField T="string" Label="Model" @bind-Value="Model.Model" />
                <MudTextField T="string" Label="Description" @bind-Value="Model.Description" Lines="2" />

                <MudSelect T="int" Label="Branch" @bind-Value="Model.BranchId" Required="true">
                    @foreach (var b in Branches)
                    {
                        <MudSelectItem Value="b.Id">@b.Name</MudSelectItem>
                    }
                </MudSelect>                
                <MudSelect T="MachineCategory"
                           Label="Category"
                           @bind-Value="Model.Category">
                    @foreach (var cat in Enum.GetValues<MachineCategory>())
                    {
                        <MudSelectItem Value="cat">@cat</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Machine Model { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public string Title { get; set; } = "Machine";
    [Parameter] public bool IsEdit { get; set; }

    private MudForm? _form;

    private void Cancel() => MudDialog.Cancel();

    private async Task Save()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }
        MudDialog.Close(DialogResult.Ok(Model));
    }
}
