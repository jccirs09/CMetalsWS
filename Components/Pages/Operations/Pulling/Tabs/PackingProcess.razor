@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using CMetalsWS.Components.Pages.Operations.Pulling.Tabs

@inject PickingListService PickingListService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudGrid Spacing="3">
        @foreach (var list in PickingLists)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@list.SalesOrderNumber - Packing Process</MudText>
                            <MudText Typo="Typo.subtitle2">@list.Customer?.CustomerName</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudChip T="string" Color="@(GetPriorityColor(list.Priority))" Size="Size.Small">@list.Priority.ToString()</MudChip>
                            <MudChip T="string" Color="Color.Default" Size="Size.Small">@list.Status.ToString()</MudChip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudProgressLinear Value="GetPackingProgress(list)" Color="Color.Info" />
                        <MudList T="PickingListItem">
                            @foreach (var item in list.Items)
                            {
                                <MudListItem T="PickingListItem">
                                    <div class="d-flex justify-space-between align-center" style="width: 100%">
                                        <div>
                                            <MudText>@item.ItemDescription</MudText>
                                            <MudText Typo="Typo.body2">Qty: @item.Quantity, Weight: @item.Weight, Size: @item.Width x @item.Length</MudText>
                                        </div>
                                        <div>
                                            @if (item.Status == PickingLineStatus.Completed)
                                            {
                                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => StartPackingItem(item))">Start Pack</MudButton>
                                            }
                                            else if (item.Status == PickingLineStatus.Packing)
                                            {
                                                <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@(() => CompletePackingItem(item))">Complete Pack</MudButton>
                                            }
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Success" Disabled="@(GetPackingProgress(list) < 100)" OnClick="@(() => CompletePacking(list))">Complete Packing</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<PickingList> PickingLists = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var allLists = await PickingListService.GetAsync();
        PickingLists = allLists.Where(p => p.Status == PickingListStatus.Picked && p.Items.Any(i => i.Machine?.Category == MachineCategory.Sheet)).ToList();
        StateHasChanged();
    }

    private Color GetPriorityColor(int priority)
    {
        return priority switch
        {
            1 => Color.Error,
            2 => Color.Warning,
            3 => Color.Info,
            _ => Color.Default,
        };
    }

    private double GetPackingProgress(PickingList list)
    {
        if (list.Items == null || !list.Items.Any())
            return 0;

        var packedItems = list.Items.Count(i => i.Status == PickingLineStatus.Packed);
        return (double)packedItems / list.Items.Count() * 100;
    }

    private async Task StartPackingItem(PickingListItem item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var dialog = await DialogService.ShowAsync<PackingDialog>("Pack Item", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is decimal packedQuantity)
        {
            await PickingListService.UpdatePackedQuantityAsync(item.Id, packedQuantity);
            await PickingListService.SetLineStatusAsync(item.Id, PickingLineStatus.Packing);
            await LoadDataAsync();
        }
    }

    private async Task CompletePackingItem(PickingListItem item)
    {
        await PickingListService.SetLineStatusAsync(item.Id, PickingLineStatus.Packed);
        await LoadDataAsync();
    }

    private async Task CompletePacking(PickingList list)
    {
        var listToUpdate = await PickingListService.GetByIdAsync(list.Id);
        if (listToUpdate != null)
        {
            listToUpdate.Status = PickingListStatus.Completed;
            await PickingListService.UpdateAsync(listToUpdate);
            await LoadDataAsync();
        }
    }
}
