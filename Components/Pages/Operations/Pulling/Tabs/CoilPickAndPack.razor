@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using CMetalsWS.Components.Pages.Operations.Pickinglist.Dialogs

@inject PickingListService PickingListService
@inject ITaskAuditEventService AuditService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    <MudGrid Spacing="3">
        @foreach (var list in PickingLists)
        {
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@list.SalesOrderNumber - Coil Pick and Pack</MudText>
                            <MudText Typo="Typo.subtitle2">@list.Customer?.CustomerName</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudChip T="string" Color="@(GetPriorityColor(list.Priority))" Size="Size.Small">@list.Priority.ToString()</MudChip>
                            <MudChip T="string" Color="Color.Default" Size="Size.Small">@list.Status.ToString()</MudChip>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudList T="PickingListItem">
                            @foreach (var item in list.Items)
                            {
                                <MudListItem T="PickingListItem">
                                    <div class="d-flex justify-space-between align-center" style="width: 100%">
                                        <div>
                                            <MudText>@item.ItemDescription</MudText>
                                            <MudText Typo="Typo.body2">Qty: @item.Quantity, Weight: @item.Weight, Size: @item.Width x @item.Length</MudText>
                                        </div>
                                        <div>
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => ProcessItem(item))">Process</MudButton>
                                        </div>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<PickingList> PickingLists = new();
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(user);
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        var coilQueue = (await PickingListService.GetCoilPullingQueueAsync(_user?.MachineId)).Select(i => i.PickingList).Where(pl => pl != null).ToList();
        PickingLists = coilQueue.DistinctBy(p => p.Id).ToList();
        StateHasChanged();
    }

    private Color GetPriorityColor(int priority)
    {
        return priority switch
        {
            1 => Color.Error,
            2 => Color.Warning,
            3 => Color.Info,
            _ => Color.Default,
        };
    }

    private async Task ProcessItem(PickingListItem item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var dialog = await DialogService.ShowAsync<PullingTaskDetailDialog>("Process Task", parameters, options);
        if (dialog is null) return;

        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is ValueTuple<decimal?, decimal?> data)
        {
            await PickingListService.UpdatePulledQuantitiesAsync(item.Id, data.Item1, data.Item2 ?? 0);
            await AuditService.CreateAuditEventAsync(item.Id, TaskType.Pulling, AuditEventType.Complete, _user.Id);
            await PickingListService.SetLineStatusAsync(item.Id, PickingLineStatus.Completed);
            await LoadDataAsync();
        }
    }
}
