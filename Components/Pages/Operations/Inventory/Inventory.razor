@page "/operations/inventory"
@using System.Globalization
@using System.Text
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Forms
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MiniExcelLibs.Attributes
@inject InventoryService InventoryService
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar

<PageTitle>Inventory Import</PageTitle>

<MudPaper Class="p-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5">Import Inventory</MudText>
        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            <div style="position:relative">
                <MudPaper class="px-4 py-3 d-flex align-center"
                          Outlined="true"
                          style="border:2px dashed var(--mud-palette-primary); min-width: 320px;">
                    <MudIcon Icon="@Icons.Material.Filled.UploadFile" class="mr-2" />
                    <MudText>Select or drop .xlsx or .csv</MudText>
                </MudPaper>
                <InputFile OnChange="OnFilesChanged"
                           accept=".xlsx,.csv"
                           style="position:absolute; inset:0; opacity:0; cursor:pointer;" />
            </div>

            <MudButton Variant="Variant.Outlined"
                       Disabled="@(!_preview.Any())"
                       OnClick="SaveAsync">
                Save to Database
            </MudButton>

            <MudChip T="string" Variant="Variant.Outlined" class="ml-4">
                Branch: @_branchIdDisplay
            </MudChip>
            <MudText class="ml-4" Color="Color.Secondary">@_status</MudText>
        </MudStack>

        <MudDivider class="my-2" />

        <MudTable Items="_preview" Dense="true" Hover="true" Bordered="true">
            <HeaderContent>
                <MudTh>ItemID</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>TagNumber</MudTh>
                <MudTh width="110px">Width</MudTh>
                <MudTh width="110px">Length</MudTh>
                <MudTh width="110px">Snapshot</MudTh>
                <MudTh>Location</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Branch</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ItemId</MudTd>
                <MudTd>@context.Description</MudTd>
                <MudTd>@context.TagNumber</MudTd>
                <MudTd>@context.Width</MudTd>
                <MudTd>@context.Length</MudTd>
                <MudTd>@context.Snapshot</MudTd>
                <MudTd>@context.Location</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>@context.Branch</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Color="Color.Secondary">No rows loaded. Choose a file.</MudText>
            </NoRecordsContent>
        </MudTable>
    </MudStack>

</MudPaper>

@code {
    private readonly List<InventoryRow> _preview = new();
    private string? _status;
    private int _branchId;
    private string _branchIdDisplay = "—";

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User);
        _branchId = user?.BranchId ?? 0;
        _branchIdDisplay = _branchId > 0 ? _branchId.ToString(CultureInfo.InvariantCulture) : "Not Set";
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            _status = null;

            if (e is null || e.FileCount == 0)
            {
                Snackbar.Add("Selection cancelled.", Severity.Info);
                return;
            }

            var file = e.GetMultipleFiles(1).FirstOrDefault();
            if (file is null)
            {
                Snackbar.Add("No file selected.", Severity.Warning);
                return;
            }

            var ext = Path.GetExtension(file.Name).ToLowerInvariant();

            if (ext == ".xls")
            {
                Snackbar.Add("Legacy .xls is not supported. Please save as .xlsx or .csv.", Severity.Warning);
                return;
            }

            if (ext is not (".xlsx" or ".csv"))
            {
                Snackbar.Add("Please select .xlsx or .csv.", Severity.Warning);
                return;
            }

            const long maxAllowed = 100 * 1024 * 1024;
            await using var upload = file.OpenReadStream(maxAllowed);

            using var ms = new MemoryStream();
            await upload.CopyToAsync(ms);
            ms.Position = 0;

            _preview.Clear();

            if (ext == ".xlsx")
            {
                // Read all columns as string first; sanitize then parse
                var raw = MiniExcel.Query<ExcelRowRaw>(ms).ToList();
                if (raw.Count == 0)
                {
                    Snackbar.Add("No rows found. Ensure the sheet has headers on the first row.", Severity.Warning);
                    return;
                }

                foreach (var r in raw)
                    _preview.Add(MapRaw(r));
            }
            else // .csv
            {
                ms.Position = 0;
                using var sr = new StreamReader(ms, detectEncodingFromByteOrderMarks: true, leaveOpen: true);
                var csv = await sr.ReadToEndAsync();
                foreach (var r in ParseCsv(csv))
                    _preview.Add(r);
            }

            _status = $"Loaded {_preview.Count} rows from {file.Name}";
            Snackbar.Add(_status, Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import failed: {ex}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SaveAsync()
    {
        if (_branchId <= 0)
        {
            Snackbar.Add("Your BranchId is not set.", Severity.Warning);
            return;
        }
        if (!_preview.Any())
        {
            Snackbar.Add("Nothing to save.", Severity.Info);
            return;
        }

        try
        {
            var entities = _preview.Select(r => new InventoryItem
            {
                BranchId = _branchId,
                ItemId = r.ItemId ?? "",
                Description = r.Description,
                TagNumber = r.TagNumber,
                Width = r.Width,
                Length = r.Length,
                Snapshot = r.Snapshot,
                SnapshotUnit = null,
                Location = r.Location,
                Status = r.Status
            }).ToList();

            var (inserted, updated) = await InventoryService.UpsertAsync(entities);
            Snackbar.Add($"Saved. Inserted: {inserted}, Updated: {updated}.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Save failed: {ex.Message}", Severity.Error);
        }
    }

    // ---------- Mapping and parsing ----------

    private static InventoryRow MapRaw(ExcelRowRaw r) => new()
    {
        ItemId = r.ItemId,
        Description = r.Description,
        TagNumber = r.TagNumber,
        Width = ToDec(RemoveUnits(r.Width)),
        Length = ToDec(RemoveUnits(r.Length)),
        Snapshot = ToDec(RemoveUnits(r.Snapshot)),
        Location = r.Location,
        Status = r.Status,
        Branch = r.Branch
    };

    private static string? RemoveUnits(string? s)
    {
        if (string.IsNullOrWhiteSpace(s)) return s;
        // strip inches quotes, in, ft, commas, spaces; keep digits, dot, minus
        s = s.Replace("\"", "").Replace("in", "", StringComparison.OrdinalIgnoreCase).Replace("ft", "", StringComparison.OrdinalIgnoreCase);
        s = s.Replace(",", " ").Trim();
        return s;
    }

    private static decimal? ToDec(string? s)
    {
        if (string.IsNullOrWhiteSpace(s)) return null;

        // Keep digits, dot, minus
        var cleaned = Regex.Replace(s, @"[^0-9\.\-]", "");
        if (string.IsNullOrWhiteSpace(cleaned)) return null;

        if (decimal.TryParse(cleaned, NumberStyles.Any, CultureInfo.InvariantCulture, out var d)) return d;
        if (decimal.TryParse(cleaned, NumberStyles.Any, CultureInfo.CurrentCulture, out d)) return d;

        return null;
    }

    // ---------- CSV parsing to typed rows ----------
    private static List<InventoryRow> ParseCsv(string csv)
    {
        var rows = new List<InventoryRow>();
        using var sr = new StringReader(csv);

        var headerLine = sr.ReadLine();
        if (headerLine is null) return rows;

        var headers = SplitCsvLine(headerLine).Select(h => h.Trim()).ToList();

        int IndexOf(string name) => headers.FindIndex(h => string.Equals(h, name, StringComparison.OrdinalIgnoreCase));

        int iItemId = IndexOf("ItemID");
        int iDesc = IndexOf("Description");
        int iTag = IndexOf("TagNumber");
        int iWidth = IndexOf("Width");
        int iLength = IndexOf("Length");
        int iSnap = IndexOf("Snapshot");
        int iLoc = IndexOf("Location");
        int iStatus = IndexOf("Status");
        int iBranch = IndexOf("Branch");

        string? line;
        while ((line = sr.ReadLine()) is not null)
        {
            if (string.IsNullOrWhiteSpace(line)) continue;
            var cols = SplitCsvLine(line);

            string? Get(int idx) => idx >= 0 && idx < cols.Count ? cols[idx] : null;

            rows.Add(new InventoryRow
            {
                ItemId = Get(iItemId),
                Description = Get(iDesc),
                TagNumber = Get(iTag),
                Width = ToDec(RemoveUnits(Get(iWidth))),
                Length = ToDec(RemoveUnits(Get(iLength))),
                Snapshot = ToDec(RemoveUnits(Get(iSnap))),
                Location = Get(iLoc),
                Status = Get(iStatus),
                Branch = Get(iBranch)
            });
        }

        return rows;
    }

    private static List<string> SplitCsvLine(string line)
    {
        var res = new List<string>();
        var sb = new StringBuilder();
        bool inQuotes = false;

        for (int i = 0; i < line.Length; i++)
        {
            var c = line[i];
            if (c == '\"')
            {
                if (inQuotes && i + 1 < line.Length && line[i + 1] == '\"') { sb.Append('\"'); i++; }
                else inQuotes = !inQuotes;
            }
            else if (c == ',' && !inQuotes)
            {
                res.Add(sb.ToString()); sb.Clear();
            }
            else sb.Append(c);
        }
        res.Add(sb.ToString());
        return res;
    }

    // ---------- Models for import ----------

    // Raw string model for .xlsx read (exact Excel headers)
    private sealed class ExcelRowRaw
    {
        [ExcelColumnName("ItemID")] public string? ItemId { get; set; }
        [ExcelColumnName("Description")] public string? Description { get; set; }
        [ExcelColumnName("TagNumber")] public string? TagNumber { get; set; }
        [ExcelColumnName("Width")] public string? Width { get; set; }
        [ExcelColumnName("Length")] public string? Length { get; set; }
        [ExcelColumnName("Snapshot")] public string? Snapshot { get; set; }
        [ExcelColumnName("Location")] public string? Location { get; set; }
        [ExcelColumnName("Status")] public string? Status { get; set; }
        [ExcelColumnName("Branch")] public string? Branch { get; set; }
    }

    // Typed preview/save model
    private sealed class InventoryRow
    {
        public string? ItemId { get; set; }
        public string? Description { get; set; }
        public string? TagNumber { get; set; }
        public decimal? Width { get; set; }
        public decimal? Length { get; set; }
        public decimal? Snapshot { get; set; }
        public string? Location { get; set; }
        public string? Status { get; set; }
        public string? Branch { get; set; }
    }


}