@page "/operations/pulling/sheet-queue"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using System.Security.Claims
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using CMetalsWS.Components.Pages.Operations.Pickinglist.Dialogs
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize(Policy = Permissions.PickingLists.Assign)]

@inject PickingListService PickingListService
@inject ITaskAuditEventService AuditService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject UserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<MudText Typo="Typo.h5" Class="mb-4">Sheet Pulling Queue</MudText>

<MudTable Items="_pickingLists" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh>Scheduled Processing Date</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>SO #</MudTh>
        <MudTh>Customer</MudTh>
        <MudTh>Total Line Items</MudTh>
        <MudTh>Total Weight</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Scheduled Processing Date">@context.Items.FirstOrDefault()?.ScheduledProcessingDate?.ToString("yyyy-MM-dd")</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="SO #">@context.SalesOrderNumber</MudTd>
        <MudTd DataLabel="Customer">@context.Customer?.Name</MudTd>
        <MudTd DataLabel="Total Line Items">@context.Items.Count</MudTd>
        <MudTd DataLabel="Total Weight">@context.Items.Where(i => i.Machine?.Category == MachineCategory.Sheet).Sum(i => i.Weight)</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => StartPickingList(context))">Start</MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No sheet pulling tasks found.</MudText>
    </NoRecordsContent>
</MudTable>

@code {
    private List<PickingList> _pickingLists = new();
    private ApplicationUser? _user;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(user);
            await LoadPickingLists();
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .Build();

        _hubConnection.On<int>("PickingListUpdated", async (id) =>
        {
            await LoadPickingLists();
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task LoadPickingLists()
    {
        _pickingLists = await PickingListService.GetSheetPullingQueueListsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartPickingList(PickingList pickingList)
    {
        var parameters = new DialogParameters { ["PickingList"] = pickingList };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<PickingListDialog>("Picking List", parameters, options);
        if (dialog is null) return;

        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadPickingLists();
        }
    }
}
