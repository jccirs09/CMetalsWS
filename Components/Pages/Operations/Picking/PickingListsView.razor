@page "/operations/picking"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using System.Security.Claims
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using CMetalsWS.Components.Pages.Operations.Pickinglist.Dialogs
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize(Policy = Permissions.PickingLists.Assign)]

@inject PickingListService PickingListService
@inject ITaskAuditEventService AuditService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject UserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ITaskAuditEventService TaskAuditEventService

@implements IAsyncDisposable

<MudText Typo="Typo.h5" Class="mb-4">Picking & Packing</MudText>

<MudTable Items="_pickingLists" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh>Scheduled Processing Date</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>SO #</MudTh>
        <MudTh>Customer</MudTh>
        <MudTh>Total Line Items</MudTh>
        <MudTh>Total Weight</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Scheduled Processing Date">@context.Items.FirstOrDefault()?.ScheduledProcessingDate?.ToString("yyyy-MM-dd")</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="SO #">@context.SalesOrderNumber</MudTd>
        <MudTd DataLabel="Customer">@context.Customer?.CustomerName</MudTd>
        <MudTd DataLabel="Total Line Items">@context.Items.Count</MudTd>
        <MudTd DataLabel="Total Weight">@context.Items.Sum(i => i.Weight)</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Filled" Color="@GetButtonColor(context)" Size="Size.Small" OnClick="@(() => StartPickingList(context))">@GetButtonText(context)</MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No picking lists found.</MudText>
    </NoRecordsContent>
</MudTable>

@code {
    private List<PickingList> _pickingLists = new();
    private ApplicationUser? _user;
    private HubConnection? _hubConnection;
    private Dictionary<int, AuditEventType> _lastEvents = new();

    private bool IsPaused(PickingList pickingList)
    {
        foreach (var item in pickingList.Items)
        {
            if (_lastEvents.TryGetValue(item.Id, out var lastEvent) && lastEvent == AuditEventType.Pause)
            {
                return true;
            }
        }
        return false;
    }

    private string GetButtonText(PickingList pickingList)
    {
        return IsPaused(pickingList) ? "Resume" : "Start";
    }

    private Color GetButtonColor(PickingList pickingList)
    {
        return IsPaused(pickingList) ? Color.Warning : Color.Primary;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(user);
            await LoadPickingLists();
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .Build();

        _hubConnection.On<int>("PickingListUpdated", async (id) =>
        {
            await LoadPickingLists();
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task LoadPickingLists()
    {
        _pickingLists = await PickingListService.GetPickingAndPackingListsAsync(_user?.BranchId);
        var itemIds = _pickingLists.SelectMany(pl => pl.Items).Select(i => i.Id).ToList();
        if (itemIds.Any())
        {
            _lastEvents = await TaskAuditEventService.GetLastEventTypesForTasksAsync(itemIds, TaskType.Pulling);
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartPickingList(PickingList pickingList)
    {
        var parameters = new DialogParameters { ["PickingList"] = pickingList };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<PickingListDialog>("Picking List", parameters, options);
        if (dialog is null) return;

        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadPickingLists();
        }
    }
}
