@using CMetalsWS.Data
@using MudBlazor
@inject IDialogService DialogService

<MudDialog Title="@Title">
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Spacing="3">
                <MudSelect T="int" Label="Branch" @bind-Value="Model.BranchId" Disabled="@IsEdit" Required="true">
                    @foreach (var b in Branches)
                    {
                        <MudSelectItem Value="b.Id">@b.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudDatePicker Label="Order Date" @bind-Date="Model.CreatedDate" Disabled="true" />

                <MudSelect T="SalesOrderStatus" Label="Status" @bind-Value="Model.Status">
                    @foreach (var st in Enum.GetValues<SalesOrderStatus>())
                    {
                        <MudSelectItem Value="st">@st</MudSelectItem>
                    }
                </MudSelect>

                <MudDivider />
                <MudText Typo="Typo.h6">Line Items</MudText>
                <MudTable Items="Model.Items" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Item ID</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Qty</MudTh>
                        <MudTh>Width</MudTh>
                        <MudTh>Length</MudTh>
                        <MudTh>Weight</MudTh>
                        <MudTh>In Stock?</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><MudTextField T="string" @bind-Value="context.ItemId" /></MudTd>
                        <MudTd>
                            <MudSelect T="string" @bind-Value="context.ItemType">
                                <MudSelectItem Value="Sheet">Sheet</MudSelectItem>
                                <MudSelectItem Value="Coil">Coil</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd><MudTextField T="decimal" @bind-Value="context.Quantity" /></MudTd>
                        <MudTd><MudTextField T="decimal?" @bind-Value="context.Width" /></MudTd>
                        <MudTd><MudTextField T="decimal?" @bind-Value="context.Length" /></MudTd>
                        <MudTd><MudTextField T="decimal?" @bind-Value="context.Weight" /></MudTd>
                        <MudTd>
                            <!-- Fix: specify generic type explicitly -->
                            <MudSwitch T="bool" @bind-Checked="context.InStock" Color="Color.Success" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="1">
                    <MudButton Variant="Variant.Text" OnClick="AddItem">Add Item</MudButton>
                </MudStack>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="OnCancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnSave">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public SalesOrder Model { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool IsEdit { get; set; }
    private MudForm? _form;
    public string? Country { get; set; }

    private void AddItem()
    {
        Model.Items.Add(new SalesOrderItem
        {
            ItemId = string.Empty,
            ItemType = "Sheet",
            Quantity = 0,
            InStock = false
        });
    }

    private void OnCancel() => MudDialog.Cancel();

    private async Task OnSave()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }
        MudDialog.Close(DialogResult.Ok(Model));
    }
}
