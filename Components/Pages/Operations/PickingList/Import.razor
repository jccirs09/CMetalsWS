@page "/operations/pickinglist/import"
@using CMetalsWS.Services
@using CMetalsWS.Services.Dto
@using System.Net.Http.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject PickingListService PickingListService
@inject NavigationManager NavManager

<PageTitle>Import Picking List from PDF</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudCard Class="pa-4">
        <MudStack Spacing="3">
            <MudText Typo="Typo.h5">Import Picking List from PDF</MudText>
            <MudText Color="Color.Secondary">
                Upload a picking list PDF. The system will use AI to extract the data. Review the extracted data and click "Save" to import it.
            </MudText>

            <MudDivider Class="my-2" />

            <!-- Upload controls -->
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                <MudButton HtmlTag="label" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Upload" for="file-input">
                    Select PDF
                </MudButton>
                <InputFile id="file-input" OnChange="OnInputFileChanged" hidden accept="application/pdf" />

                @if (_fileName is not null)
                {
                    <MudChip T="string" Color="Color.Info" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Description">
                        @_fileName
                    </MudChip>
                }
            </MudStack>

            @if (_isLoading)
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-4" />
                <MudText Class="mt-1" Color="Color.Secondary">@_loadingStatus</MudText>
            }

            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="mt-3">
                    @_error
                </MudAlert>
            }

            @if (_extraction is not null)
            {
                <MudPaper Class="pa-4 mt-3" Elevation="2">
                    <MudToolBar>
                        <MudText Typo="Typo.h6">Extracted Data</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" StartIcon="@Icons.Material.Filled.Save">
                            Save
                        </MudButton>
                    </MudToolBar>
                    <MudGrid Spacing="3" Class="mt-2">
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Sales Order #" @bind-Value="_extraction.SalesOrderNumber" ReadOnly="true" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Order Date" @bind-Value="_extraction.OrderDate" ReadOnly="true" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Ship Date" @bind-Value="_extraction.ShipDate" ReadOnly="true" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Sales Rep" @bind-Value="_extraction.SalesRep" ReadOnly="true" /></MudItem>
                        <MudItem xs="12" sm="6"><MudTextField Label="Sold To" @bind-Value="_extraction.SoldTo" ReadOnly="true" Lines="3" /></MudItem>
                        <MudItem xs="12" sm="6"><MudTextField Label="Ship To" @bind-Value="_extraction.ShipTo" ReadOnly="true" Lines="3" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Shipping Via" @bind-Value="_extraction.ShippingVia" ReadOnly="true" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="FOB" @bind-Value="_extraction.FOB" ReadOnly="true" /></MudItem>
                    </MudGrid>

                    <MudText Typo="Typo.h6" Class="mt-6 mb-2">Line Items</MudText>
                    <MudTable Items="_extraction.Items" Hover="true" Dense="true" Striped="true">
                        <HeaderContent>
                            <MudTh>#</MudTh>
                            <MudTh>Qty</MudTh>
                            <MudTh>UoM</MudTh>
                            <MudTh>Item ID</MudTh>
                            <MudTh>Description</MudTh>
                            <MudTh>Width</MudTh>
                            <MudTh>Length</MudTh>
                            <MudTh>Weight</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="#">@context.LineNumber</MudTd>
                            <MudTd DataLabel="Qty">@context.Quantity</MudTd>
                            <MudTd DataLabel="UoM">@context.Uom</MudTd>
                            <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
                            <MudTd DataLabel="Description">@context.Description</MudTd>
                            <MudTd DataLabel="Width">@context.Width</MudTd>
                            <MudTd DataLabel="Length">@context.Length</MudTd>
                            <MudTd DataLabel="Weight">@context.Weight</MudTd>
                        </RowTemplate>
                    </MudTable>

                    <MudText Typo="Typo.h6" Class="mt-6 mb-2">Weight Totals</MudText>
                     <MudGrid Spacing="3">
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Computed Weight" @bind-Value="_extraction.TotalWeightComputed" ReadOnly="true" Format="N3" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Listed Weight" @bind-Value="_extraction.TotalWeightListed" ReadOnly="true" Format="N3" /></MudItem>
                        <MudItem xs="12" sm="6" md="3"><MudTextField Label="Delta" @bind-Value="_extraction.TotalWeightDelta" ReadOnly="true" Format="N3" /></MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudAlert Severity="@(_extraction.TotalWeightMatch ? Severity.Success : Severity.Warning)" Dense="true" Class="mud-height-full">
                                @(_extraction.TotalWeightMatch ? "Totals Match" : "Totals Mismatch")
                            </MudAlert>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }
        </MudStack>
    </MudCard>
</MudContainer>

@code {
    private bool _isLoading;
    private string _loadingStatus = "";
    private string? _fileName;
    private string? _error;
    private PickingListExtraction? _extraction;
    private IBrowserFile? _selectedFile;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _error = null;
        _extraction = null;
        _selectedFile = e.File;
        _fileName = _selectedFile.Name;
        await ParseFile();
    }

    private async Task ParseFile()
    {
        if (_selectedFile is null) return;

        _isLoading = true;
        _loadingStatus = "Uploading and parsing file...";
        StateHasChanged();

        try
        {
            using var content = new MultipartFormDataContent();
            // Blazor's IBrowserFile has a default max size, but we also check on server.
            using var stream = _selectedFile.OpenReadStream(25_000_000);
            content.Add(new StreamContent(stream), "file", _fileName);

            var response = await Http.PostAsync("api/pdf/parse", content);

            if (!response.IsSuccessStatusCode)
            {
                _error = $"Server returned {(int)response.StatusCode}: {await response.Content.ReadAsStringAsync()}";
                Snackbar.Add("Parsing failed.", Severity.Error);
                return;
            }

            _extraction = await response.Content.ReadFromJsonAsync<PickingListExtraction>();
            if (_extraction is not null)
            {
                 Snackbar.Add("Parsed successfully. Please review the data.", Severity.Success);
            }
            else
            {
                _error = "Failed to deserialize the server response.";
                Snackbar.Add(_error, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            Snackbar.Add("An unexpected error occurred during parsing.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveChanges()
    {
        if (_extraction is null) return;
        _isLoading = true;
        _loadingStatus = "Saving...";
        StateHasChanged();
        try
        {
            // The user's default branch should be determined by the server.
            // For this example, we'll hardcode it to 1.
            var newPickingList = await PickingListService.CreateFromExtractionAsync(_extraction, 1);
            Snackbar.Add($"Picking list {newPickingList.SalesOrderNumber} created successfully.", Severity.Success);
            NavManager.NavigateTo($"/operations/pickinglist/edit/{newPickingList.Id}");
        }
        catch (Exception ex)
        {
            _error = $"Failed to save: {ex.Message}";
            Snackbar.Add(_error, Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}
