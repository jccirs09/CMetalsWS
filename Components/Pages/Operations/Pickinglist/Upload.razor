@page "/picking-lists/upload"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@inject BranchService BranchService
@inject IPdfParsingService PdfParsingService
@inject IPickingListImportService ImportService
@inject PickingListService PickingListService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject Microsoft.Extensions.Configuration.IConfiguration _configuration
@inject ILogger<Upload> _logger
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudText Typo="Typo.h5" GutterBottom="true">Upload Picking List PDF</MudText>

<MudCard>
    <MudCardContent>
        <EditForm Model="@_model" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="10" md="8">
                    <MudDropZone T="IBrowserFile" OnFilesDropped="OnFilesDropped" Class="pa-8 d-flex flex-column align-center justify-center mud-width-full" Style="min-height: 200px;">
                        <MudText Typo="Typo.h6">Drag and Drop PDF Here</MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">Or click the button below</MudText>
                        <InputFile OnChange="OnFileChanged" accept=".pdf,application/pdf" class="d-none" id="fileInput" />
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Text"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="fileInput"
                                   Class="mt-4">
                            Select File
                        </MudButton>
                    </MudDropZone>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    @if (_model.File != null)
                    {
                        <MudText Typo="Typo.h6" Class="mt-4">Selected: <MudChip T="string">@_model.File.Name</MudChip></MudText>
                    }
                </MudItem>
            </MudGrid>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Disabled="@_isProcessing">
                @if (_isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing...</MudText>
                }
                else
                {
                    <MudText>Upload and Parse</MudText>
                }
            </MudButton>
        </EditForm>

        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <MudAlert Severity="@_statusSeverity" Class="mt-4">@_statusMessage</MudAlert>
        }
    </MudCardContent>
</MudCard>

@code {
    private class UploadModel
    {
        [Required]
        public int? BranchId { get; set; }
        public IBrowserFile? File { get; set; }
    }

    private UploadModel _model = new();
    private bool _isProcessing;
    private string? _statusMessage;
    private Severity _statusSeverity;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user?.BranchId != null)
        {
            _model.BranchId = user.BranchId;
        }
        else
        {
            // Handle case where user has no default branch - maybe show an error or a selector
            // For now, we'll prevent submission if no branch is set.
            Snackbar.Add("Could not determine your default branch. Please set it in your profile.", Severity.Warning);
        }
    }

    private void OnFileChanged(InputFileChangeEventArgs e)
    {
        _model.File = e.File;
    }

    private void OnFilesDropped(IEnumerable<IBrowserFile> files)
    {
        var file = files.FirstOrDefault();
        if (file != null && (file.ContentType.Contains("pdf", StringComparison.OrdinalIgnoreCase)
                             || Path.GetExtension(file.Name).Equals(".pdf", StringComparison.OrdinalIgnoreCase)))
        {
            _model.File = file;
        }
        else
        {
            Snackbar.Add("Please drop a single PDF file.", Severity.Warning);
        }
    }

    private async Task OnSubmit()
    {
        if (_model.BranchId == null || _model.File == null)
        {
            Snackbar.Add("Branch and a PDF file are required.", Severity.Warning);
            return;
        }

        _isProcessing = true;
        _statusMessage = "Starting upload...";
        _statusSeverity = Severity.Info;
        StateHasChanged();

        var tempPdfPath = string.Empty;
        PickingListImport? importRecord = null;

        try
        {
            // 1. Save file to a temporary location
            var tempDir = Path.Combine(Path.GetTempPath(), "cmetals_uploads");
            Directory.CreateDirectory(tempDir);
            var importGuid = Guid.NewGuid();
            tempPdfPath = Path.Combine(tempDir, $"{importGuid}.pdf");
            await using var fs = new FileStream(tempPdfPath, FileMode.Create);
            // Limit file size to 50 MB
            await _model.File.OpenReadStream(50 * 1024 * 1024).CopyToAsync(fs);
            _statusMessage = "PDF uploaded. Converting to images...";
            StateHasChanged();

            // 2. Create initial import record
            var imagesDir = Path.Combine("wwwroot", "uploads", "pickinglists", importGuid.ToString());
            importRecord = await ImportService.CreateImportAsync(_model.BranchId.Value, tempPdfPath, imagesDir, _configuration.GetValue<string>("OpenAI:Model") ?? "gpt-4o-mini");

            // 3. Convert PDF to images
            var imagePaths = await PdfParsingService.ConvertPdfToImagesAsync(tempPdfPath, importGuid);
            _statusMessage = "PDF converted. Parsing with AI...";
            StateHasChanged();

            // 4. Parse with OpenAI
            var (parsedList, parsedItems) = await PdfParsingService.ParsePickingListAsync(imagePaths);
            _statusMessage = "AI parsing complete. Saving to database...";
            StateHasChanged();

            // 5. Upsert data
            var pickingListId = await PickingListService.UpsertFromParsedDataAsync(_model.BranchId.Value, parsedList, parsedItems);

            // 6. Update import record
            var rawJson = System.Text.Json.JsonSerializer.Serialize(new { header = parsedList, items = parsedItems });
            await ImportService.UpdateImportSuccessAsync(importRecord.Id, pickingListId, rawJson);

            _statusMessage = "Processing complete!";
            _statusSeverity = Severity.Success;
            Snackbar.Add("Successfully processed picking list.", Severity.Success);

            // 7. Redirect to review page
            NavManager.NavigateTo($"/picking-lists/{pickingListId}");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to process uploaded picking list.");
            _statusMessage = $"An error occurred: {ex.Message}";
            _statusSeverity = Severity.Error;
            Snackbar.Add("Failed to process picking list.", Severity.Error);

            if (importRecord != null)
            {
                await ImportService.UpdateImportFailedAsync(importRecord.Id, ex.ToString());
            }
        }
        finally
        {
            _isProcessing = false;
            if (!string.IsNullOrEmpty(tempPdfPath) && File.Exists(tempPdfPath))
            {
                File.Delete(tempPdfPath);
            }
            StateHasChanged();
        }
    }
}
