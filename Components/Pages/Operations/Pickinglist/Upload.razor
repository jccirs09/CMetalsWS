@page "/picking-lists/upload"
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject IPickingListPdfParser Parser
@inject ApplicationDbContext Db
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Upload Picking List</PageTitle>

<MudPaper Class="p-4">
    <MudStack Spacing="2">
        <MudText Typo="Typo.h5">Upload Picking List PDF</MudText>

        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            <!-- Click or drag & drop -->
            <div style="position:relative">
                <MudPaper Class="px-4 py-3 d-flex align-center"
                          Outlined="true"
                          Style="border:2px dashed var(--mud-palette-primary); min-width: 340px;">
                    <MudIcon Icon="@Icons.Material.Filled.UploadFile" Class="mr-2" />
                    <MudText>Select or drop .pdf</MudText>
                </MudPaper>
                <InputFile OnChange="OnFilesChanged"
                           accept=".pdf"
                           style="position:absolute; inset:0; opacity:0; cursor:pointer;" />
            </div>

            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       OnClick="@Clear"
                       Disabled="@(_preview is null)">
                Clear
            </MudButton>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(_preview is null || _saving)"
                       OnClick="Save">
                Save to Database
            </MudButton>

            @if (_saving)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="ml-2" />
            }

            <MudChip T="string" Variant="Variant.Outlined" Class="ml-4">
                Branch: @_branchIdDisplay
            </MudChip>

            <MudText Class="ml-4" Color="Color.Secondary">@_status</MudText>
        </MudStack>

        <MudAlert Severity="Severity.Info" Dense="true">
            Duplicate protection is enforced by the unique index on SalesOrderNumber. Existing lists will not be re-inserted.
        </MudAlert>
    </MudStack>
</MudPaper>

@if (_preview != null)
{
    <MudPaper Class="pa-4 mt-4">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">Parsed Preview</MudText>
            <MudDivider />
            <MudStack Row="true" Spacing="4">
                <MudText><b>Sales Order</b>: @_preview.SalesOrderNumber</MudText>
                <MudText><b>Order Date</b>: @_preview.OrderDate</MudText>
                <MudText><b>Ship Date</b>: @_preview.ShipDate</MudText>
            </MudStack>
            <MudStack Row="true" Spacing="4">
                <MudText><b>Customer</b>: @_preview.CustomerName</MudText>
                <MudText><b>Ship To</b>: @_preview.ShipToAddress</MudText>
                <MudText><b>Ship Via</b>: @_preview.ShippingMethod</MudText>
            </MudStack>

            <MudTable Items="_preview.Items" Dense="true" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Line</MudTh>
                    <MudTh>Qty</MudTh>
                    <MudTh>Unit</MudTh>
                    <MudTh>Item Id</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Width</MudTh>
                    <MudTh>Length</MudTh>
                    <MudTh>Weight</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Line">@context.LineNumber</MudTd>
                    <MudTd DataLabel="Qty">@context.Quantity</MudTd>
                    <MudTd DataLabel="Unit">@context.Unit</MudTd>
                    <MudTd DataLabel="Item Id">@context.ItemId</MudTd>
                    <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                    <MudTd DataLabel="Width">@context.Width</MudTd>
                    <MudTd DataLabel="Length">@context.Length</MudTd>
                    <MudTd DataLabel="Weight">@context.Weight</MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Color="Color.Secondary">No items parsed.</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudStack>
    </MudPaper>
}

@code {
    private PickingList? _preview;
    private bool _saving;
    private string? _status;
    private int _branchId;
    private string _branchIdDisplay = "—";

    protected override async Task OnInitializedAsync()
    {
        // Pull BranchId from signed-in user, like your Inventory page
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User);
        _branchId = user?.BranchId ?? 0;
        _branchIdDisplay = _branchId > 0 ? _branchId.ToString(CultureInfo.InvariantCulture) : "Not Set";
    }

    private void Clear()
    {
        _preview = null;
        _status = null;
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            _status = null;

            if (e is null || e.FileCount == 0)
            {
                Snackbar.Add("Selection cancelled.", Severity.Info);
                return;
            }

            var file = e.GetMultipleFiles(1).FirstOrDefault();
            if (file is null)
            {
                Snackbar.Add("No file selected.", Severity.Warning);
                return;
            }

            var ext = Path.GetExtension(file.Name).ToLowerInvariant();
            if (ext != ".pdf")
            {
                Snackbar.Add("Please select a .pdf file.", Severity.Warning);
                return;
            }

            if (_branchId <= 0)
            {
                Snackbar.Add("Your BranchId is not set. Cannot parse without a branch.", Severity.Warning);
                return;
            }

            const long maxAllowed = 100 * 1024 * 1024;
            await using var upload = file.OpenReadStream(maxAllowed);

            // Copy to seekable buffer
            using var ms = new MemoryStream();
            await upload.CopyToAsync(ms);
            ms.Position = 0;

            _preview = Parser.Parse(ms, _branchId);
            _status = $"Parsed {_preview.Items.Count} line(s) from {file.Name}";
            Snackbar.Add(_status, Severity.Success);
        }
        catch (Exception ex)
        {
            _preview = null;
            Snackbar.Add($"Parse failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Save()
    {
        if (_preview == null)
        {
            Snackbar.Add("Nothing to save.", Severity.Info);
            return;
        }

        try
        {
            _saving = true;

            var exists = await Db.PickingLists
                .AsNoTracking()
                .FirstOrDefaultAsync(p => p.SalesOrderNumber == _preview.SalesOrderNumber);

            if (exists != null)
            {
                Snackbar.Add("Picking list already exists. No changes saved.", Severity.Info);
                return;
            }

            Db.PickingLists.Add(_preview);
            await Db.SaveChangesAsync();
            Snackbar.Add("Saved to database.", Severity.Success);

            var savedSo = _preview.SalesOrderNumber;
            _preview = null;

            // Optional navigation to a detail page
            // Nav.NavigateTo($"/pickinglists/{savedSo}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Save failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }
}
