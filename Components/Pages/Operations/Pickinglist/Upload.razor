@page "/picking-lists/upload"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@inject BranchService BranchService
@inject IPdfParsingService PdfParsingService
@inject IPickingListImportService ImportService
@inject IPickingListImportService ImportService
@inject PickingListService PickingListService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject Microsoft.Extensions.Configuration.IConfiguration _configuration
@inject ILogger<Upload> _logger
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudText Typo="Typo.h5" GutterBottom="true">Upload Picking List PDF</MudText>

<MudCard>
    <MudCardContent>
        <EditForm Model="@_model" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="10" md="8">
                    <InputFile OnChange="OnFileChanged" accept=".pdf,application/pdf" class="mud-width-full" id="fileInput">
                        <MudPaper @ondragenter="@(() => _isDragEnter = true)"
                                  @ondragleave="@(() => _isDragEnter = false)"
                                  @ondrop="@(() => _isDragEnter = false)"
                                  Class="@($"pa-8 d-flex flex-column align-center justify-center mud-width-full mud-border-dashed mud-border-2 {( _isDragEnter ? "mud-border-primary" : "mud-border-lines-default" )}")"
                                  Style="min-height: 200px; cursor: pointer;">
                            <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" />
                            <MudText Typo="Typo.h6" Class="mt-4">Drag and Drop PDF Here or Click</MudText>
                        </MudPaper>
                    </InputFile>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center">
                    @if (_model.File != null)
                    {
                        <MudText Typo="Typo.h6" Class="mt-4">Selected: <MudChip T="string">@_model.File.Name</MudChip></MudText>
                    }
                </MudItem>
            </MudGrid>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Disabled="@_isProcessing">
                @if (_isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing...</MudText>
                }
                else
                {
                    <MudText>Upload and Parse</MudText>
                }
            </MudButton>
        </EditForm>

        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <MudAlert Severity="@_statusSeverity" Class="mt-4">@_statusMessage</MudAlert>
        }
    </MudCardContent>
</MudCard>

<MudDialog @bind-IsVisible="_isReviewDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h5">Review Parsed Picking List</MudText>
    </TitleContent>
    <DialogContent>
        @if (_listToReview != null)
        {
            <ReviewDialog List="_listToReview" OnCancel="HandleReviewCancel" OnSave="HandleReviewSave" />
        }
    </DialogContent>
</MudDialog>

@code {
    private class UploadModel
    {
        [Required]
        public int? BranchId { get; set; }
        public IBrowserFile? File { get; set; }
    }

    private UploadModel _model = new();
    private bool _isProcessing;
    private string? _statusMessage;
    private Severity _statusSeverity;
    private bool _isDragEnter;

    private bool _isReviewDialogOpen;
    private PickingList? _listToReview;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.ExtraLarge, CloseOnEscapeKey = true };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user?.BranchId != null)
        {
            _model.BranchId = user.BranchId;
        }
        else
        {
            Snackbar.Add("Could not determine your default branch. Please set it in your profile.", Severity.Warning);
        }
    }

    private void OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && (file.ContentType.Contains("pdf", StringComparison.OrdinalIgnoreCase)
                             || Path.GetExtension(file.Name).Equals(".pdf", StringComparison.OrdinalIgnoreCase)))
        {
            _model.File = file;
        }
        else
        {
            _model.File = null;
            Snackbar.Add("Please select or drop a single PDF file.", Severity.Warning);
        }
    }

    private void HandleReviewCancel()
    {
        _isReviewDialogOpen = false;
        _listToReview = null;
        _statusMessage = "Review was canceled. No data was saved.";
        _statusSeverity = Severity.Warning;
        StateHasChanged();
    }

    private void HandleReviewSave(int savedListId)
    {
        _isReviewDialogOpen = false;
        _listToReview = null;
        _statusMessage = $"Picking list #{savedListId} saved successfully!";
        _statusSeverity = Severity.Success;
        _model.File = null; // Clear the file input
        StateHasChanged();
    }

    private async Task OnSubmit()
    {
        if (_model.BranchId == null || _model.File == null)
        {
            Snackbar.Add("Branch and a PDF file are required.", Severity.Warning);
            return;
        }

        _isProcessing = true;
        _statusMessage = "Starting upload...";
        _statusSeverity = Severity.Info;
        StateHasChanged();

        var tempPdfPath = string.Empty;
        PickingListImport? importRecord = null;

        try
        {
            var importGuid = Guid.NewGuid();
            var tempDir = Path.Combine(Path.GetTempPath(), "cmetals_uploads");
            Directory.CreateDirectory(tempDir);
            tempPdfPath = Path.Combine(tempDir, $"{importGuid}.pdf");

            _statusMessage = "Reading file into memory...";
            StateHasChanged();
            byte[] pdfBytes;
            await using (var sourceStream = _model.File.OpenReadStream(50 * 1024 * 1024))
            {
                using var memoryStream = new MemoryStream();
                await sourceStream.CopyToAsync(memoryStream);
                pdfBytes = memoryStream.ToArray();
            }

            await File.WriteAllBytesAsync(tempPdfPath, pdfBytes);
            _statusMessage = "PDF saved. Creating import record...";
            StateHasChanged();

            var imagesDir = Path.Combine("wwwroot", "uploads", "pickinglists", importGuid.ToString());
            importRecord = await ImportService.CreateImportAsync(_model.BranchId.Value, tempPdfPath, imagesDir, _configuration.GetValue<string>("OpenAI:Model") ?? "gpt-4o-mini");

            _statusMessage = "Converting PDF to images...";
            StateHasChanged();
            var imagePaths = await PdfParsingService.ConvertPdfToImagesAsync(pdfBytes, importGuid);
            _statusMessage = "PDF converted. Parsing with AI...";
            StateHasChanged();

            var (parsedList, parsedItems) = await PdfParsingService.ParsePickingListAsync(imagePaths);
            _statusMessage = "AI parsing complete. Opening review dialog...";
            StateHasChanged();

            parsedList.BranchId = _model.BranchId.Value;
            parsedList.Items = parsedItems;

            // Set state to show the declarative dialog
            _listToReview = parsedList;
            _isReviewDialogOpen = true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to process uploaded picking list.");
            _statusMessage = $"An error occurred: {ex.Message}";
            _statusSeverity = Severity.Error;
            Snackbar.Add("Failed to process picking list.", Severity.Error);

            if (importRecord != null)
            {
                await ImportService.UpdateImportFailedAsync(importRecord.Id, ex.ToString());
            }
        }
        finally
        {
            _isProcessing = false;
            if (!string.IsNullOrEmpty(tempPdfPath) && File.Exists(tempPdfPath))
            {
                File.Delete(tempPdfPath);
            }
            StateHasChanged();
        }
    }
}
