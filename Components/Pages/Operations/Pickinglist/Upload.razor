@page "/picking-lists/upload"
@using System.ComponentModel.DataAnnotations
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.PickingLists.Add)]
@inject IPickingListDraftStore DraftStore
@inject NavigationManager Nav
@inject BranchService BranchService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudText Typo="Typo.h5" GutterBottom="true">Upload Picking List PDF</MudText>

<MudCard>
    <MudCardContent>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="10" md="8">
                <div style="position:relative">
                    <MudPaper class="pa-8 d-flex flex-column align-center justify-center"
                              Outlined="true"
                              style="border:2px dashed var(--mud-palette-primary); min-height: 200px;">
                        <MudIcon Icon="@Icons.Material.Filled.UploadFile" Size="Size.Large" Color="Color.Primary" />
                        <MudText Typo="Typo.h6" Class="mt-4">Select or Drop PDF File</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">The selection will appear below</MudText>
                    </MudPaper>
                    <InputFile OnChange="OnFileChanged"
                               accept=".pdf,application/pdf"
                               style="position:absolute; inset:0; opacity:0; cursor:pointer;" />
                </div>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center">
                @if (_file != null)
                {
                    <MudText Typo="Typo.h6" Class="mt-4">Selected: <MudChip T="string">@_file.Name</MudChip></MudText>
                }
            </MudItem>
        </MudGrid>
        <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Disabled="@(_isProcessing || _file == null)">
            @if (_isProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing...</MudText>
            }
            else
            {
                <MudText>Upload and Parse</MudText>
            }
        </MudButton>
    </MudCardContent>
</MudCard>

@code {
    private IBrowserFile? _file;
    private bool _isProcessing;
    private int _selectedBranchId;
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetUserAsync(authState.User);
        if (_user?.BranchId != null)
        {
            _selectedBranchId = _user.BranchId.Value;
        }
        else
        {
            Snackbar.Add("Could not determine your default branch. Please set it in your profile.", Severity.Warning);
        }
    }

    private void OnFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;
    }

    private async Task OnSubmit()
    {
        if (_file == null) return;
        _isProcessing = true;
        using var ms = new MemoryStream();
        await _file.OpenReadStream(long.MaxValue).CopyToAsync(ms);
        ms.Position = 0;

        var draftId = await DraftStore.CreateAsync(ms, _file.Name, _selectedBranchId);
        Nav.NavigateTo($"/pickinglists/review/{draftId}");
    }
}
