@page "/picking-lists/upload"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.PickingLists.Add)]
@inject IPickingListIngestor Ingestor
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject ILogger<Upload> _logger
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

<MudText Typo="Typo.h5" GutterBottom="true">Upload Picking List PDF</MudText>

<MudCard>
    <MudCardContent>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="10" md="8">
                <div style="position:relative">
                    <MudPaper class="pa-8 d-flex flex-column align-center justify-center"
                              Outlined="true"
                              style="border:2px dashed var(--mud-palette-primary); min-height: 200px;">
                        <MudIcon Icon="@Icons.Material.Filled.UploadFile" Size="Size.Large" Color="Color.Primary" />
                        <MudText Typo="Typo.h6" Class="mt-4">Select or Drop PDF File</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">The selection will appear below</MudText>
                    </MudPaper>
                    <InputFile OnChange="OnFileChanged"
                               accept=".pdf,application/pdf"
                               style="position:absolute; inset:0; opacity:0; cursor:pointer;" />
                </div>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center">
                @if (_model.File != null)
                {
                    <MudText Typo="Typo.h6" Class="mt-4">Selected: <MudChip T="string">@_model.File.Name</MudChip></MudText>
                }
            </MudItem>
        </MudGrid>
        <MudButton OnClick="OnSubmit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" Disabled="@(_isProcessing || _model.File == null)">
            @if (_isProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing...</MudText>
            }
            else
            {
                <MudText>Upload and Parse</MudText>
            }
        </MudButton>

        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <MudAlert Severity="@_statusSeverity" Class="mt-4">@((MarkupString)_statusMessage)</MudAlert>
        }
    </MudCardContent>
</MudCard>

@code {
    private class UploadModel
    {
        [Required]
        public int? BranchId { get; set; }
        public IBrowserFile? File { get; set; }
    }

    private UploadModel _model = new();
    private bool _isProcessing;
    private string? _statusMessage;
    private Severity _statusSeverity;
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetUserAsync(authState.User);
        if (_user?.BranchId != null)
        {
            _model.BranchId = _user.BranchId;
        }
        else
        {
            Snackbar.Add("Could not determine your default branch. Please set it in your profile.", Severity.Warning);
        }
    }

    private void OnFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null && (file.ContentType.Contains("pdf", StringComparison.OrdinalIgnoreCase)
                             || Path.GetExtension(file.Name).Equals(".pdf", StringComparison.OrdinalIgnoreCase)))
        {
            _model.File = file;
        }
        else
        {
            _model.File = null;
            Snackbar.Add("Please select or drop a single PDF file.", Severity.Warning);
        }
    }

    private async Task OnSubmit()
    {
        if (_model.BranchId == null || _model.File == null || _user == null)
        {
            Snackbar.Add("Branch and a PDF file are required.", Severity.Warning);
            return;
        }

        _isProcessing = true;
        _statusMessage = "Starting upload...";
        _statusSeverity = Severity.Info;
        StateHasChanged();

        try
        {
            await using var sourceStream = _model.File.OpenReadStream(50 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await sourceStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            var result = await Ingestor.UploadAsync(memoryStream, _model.File.Name, _model.BranchId.Value, _user.Id);

            if (result.IsDuplicate)
            {
                _statusMessage = $"This picking list has already been uploaded. <a href='/pickinglists/{result.PickingListId}'>Click here to view it.</a>";
                _statusSeverity = Severity.Warning;
            }
            else
            {
                _statusMessage = "Processing complete. Redirecting...";
                StateHasChanged();
                NavManager.NavigateTo($"/pickinglists/{result.PickingListId}");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to process uploaded picking list.");
            _statusMessage = $"An error occurred: {ex.Message}";
            _statusSeverity = Severity.Error;
            Snackbar.Add("Failed to process picking list.", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
}
