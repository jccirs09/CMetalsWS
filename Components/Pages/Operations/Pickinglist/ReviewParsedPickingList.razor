@page "/picking-lists/review-parsed"
@implements IDisposable
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Policy = Permissions.PickingLists.Add)]

@inject IParsingStateService ParsingStateService
@inject PickingListService PickingListService
@inject MachineService MachineService
@inject DestinationRegionService DestinationRegionService
@inject ApplicationDbContext DbContext
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (_list == null)
{
    <MudText Typo="Typo.h5">Loading Review Data...</MudText>
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
        <MudText Typo="Typo.h5">Review New Picking List: @_list.SalesOrderNumber</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Text" OnClick="Cancel" Disabled="@_isProcessing">Cancel</MudButton>
            <AuthorizeView>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" Disabled="@_isProcessing">
                    @if (_isProcessing)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Saving...</MudText>
                    }
                    else
                    {
                        <MudText>Save</MudText>
                    }
                </MudButton>
            </AuthorizeView>
        </MudStack>
    </MudStack>

    <!-- Header Section -->
    <MudPaper Class="pa-4 mb-4">
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="6" md="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SOLD TO</MudText>
                <MudText Typo="Typo.body2" Style="white-space:pre-line; word-break:break-word;">
                    @Display(_list.SoldTo)
                </MudText>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP TO</MudText>
                <MudText Typo="Typo.body2" Style="white-space:pre-line; word-break:break-word;">
                    @Display(_list.ShipTo)
                </MudText>
            </MudItem>

            <MudItem xs="6" sm="3" md="2">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">ORDER DATE</MudText>
                <MudText Typo="Typo.body2">@(_list.OrderDate?.ToShortDateString() ?? "—")</MudText>
            </MudItem>

            <MudItem xs="6" sm="3" md="2">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP DATE</MudText>
                <MudText Typo="Typo.body2">@(_list.ShipDate?.ToShortDateString() ?? "—")</MudText>
            </MudItem>

            <MudItem xs="6" sm="3" md="2">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SALES REP</MudText>
                <MudText Typo="Typo.body2">@Display(_list.SalesRep)</MudText>
            </MudItem>

            <MudItem xs="6" sm="3" md="2">
                <MudSelect T="int?" @bind-Value="_list.DestinationRegionId" Label="Destination Region" Dense="true" Margin="Margin.Dense">
                    @foreach (var region in _destinationRegions)
                    {
                        <MudSelectItem Value="@((int?)region.Id)">@region.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xs="6" sm="3" md="2">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">TOTAL WEIGHT</MudText>
                <MudText Typo="Typo.body2">@_list.TotalWeight.ToString("N3")</MudText>
            </MudItem>
            <MudItem xs="6" sm="3" md="2">
                <MudSelect T="PickingListStatus" @bind-Value="_list.Status" Label="Status" Dense="true" Margin="Margin.Dense">
                    @foreach (var status in Enum.GetValues<PickingListStatus>())
                    {
                        <MudSelectItem Value="@status">@status.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Items Table -->
    <MudTable Items="@_list.Items" T="PickingListItem" Hover="true" Dense="true" MultiSelection="true" @bind-SelectedItems="_selectedItems">
        <HeaderContent>
            <MudTh>Line</MudTh>
            <MudTh>Qty</MudTh>
            <MudTh>Item ID</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Width</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>Weight</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Machine</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Line">@context.LineNumber</MudTd>
            <MudTd DataLabel="Qty">@context.Quantity.ToString("N3")</MudTd>
            <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
            <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
            <MudTd DataLabel="Width">@FormatDimension(context.Width)</MudTd>
            <MudTd DataLabel="Length">@FormatDimension(context.Length)</MudTd>
            <MudTd DataLabel="Weight">@context.Weight?.ToString("N3")</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="Machine">
                <MudSelect T="int?" Value="context.MachineId" ValueChanged="@((int? machineId) => OnMachineChanged(context, machineId))" Dense="true" Margin="Margin.Dense">
                    @foreach (var machine in GetFilteredMachines(context))
                    {
                        <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudPaper Class="d-flex align-center gap-4 pa-4 mt-4">
        <MudSelect T="int?" @bind-Value="_bulkAssignMachineId" Label="Bulk Assign Machine" Dense="true" Style="min-width: 250px;">
            @foreach (var machine in _machines)
            {
                <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" OnClick="ApplyBulkAssign" Disabled="@(_selectedItems == null || _selectedItems.Count == 0)">
            Apply to Selected
        </MudButton>
    </MudPaper>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private PickingList? _list;
    private List<Machine> _machines = new();
    private List<DestinationRegion> _destinationRegions = new();
    private HashSet<PickingListItem> _selectedItems = new();
    private int? _bulkAssignMachineId;
    private bool _isProcessing = false;
    private bool _shouldRedirect = false;

    protected override async Task OnInitializedAsync()
    {
        _list = ParsingStateService.ParsedPickingList;
        if (_list == null || ParsingStateService.ParsedItems == null)
        {
            Snackbar.Add("No parsing data found. Please upload a new PDF.", Severity.Error);
            _shouldRedirect = true;
            return;
        }

        var hasChanges = await PickingListService.HasChangesAsync(_list.BranchId, _list, ParsingStateService.ParsedItems);
        if (!hasChanges)
        {
            await DialogService.ShowMessageBox(
                "No Changes Detected",
                "The uploaded picking list is identical to the existing one.",
                yesText: "OK");
            NavManager.NavigateTo("/picking-lists/upload");
            return;
        }

        _list.Items = ParsingStateService.ParsedItems;

        if (_list.ShipDate.HasValue)
        {
            foreach (var item in _list.Items)
            {
                if (item.ScheduledShipDate == null)
                {
                    item.ScheduledShipDate = _list.ShipDate;
                }
            }
        }

        var allMachines = await MachineService.GetMachinesAsync();
        _machines = allMachines.Where(m => m.BranchId == _list.BranchId).ToList();
        _destinationRegions = await DestinationRegionService.GetDestinationRegionsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _shouldRedirect)
        {
            NavManager.NavigateTo("/picking-lists/upload");
        }
    }

    private async Task SaveChanges()
    {
        if (_list == null) return;

        _isProcessing = true;

        var authState = await AuthenticationStateTask;
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Snackbar.Add("Could not authenticate user. Please log in again.", Severity.Error);
            _isProcessing = false;
            return;
        }

        if (!string.IsNullOrWhiteSpace(_list.SoldTo))
        {
            var customer = await DbContext.Customers
                .FirstOrDefaultAsync(c => c.CustomerName.ToLower() == _list.SoldTo.ToLower());

            if (customer != null)
            {
                _list.CustomerId = customer.Id;
            }
            else
            {
                Snackbar.Add($"Warning: Customer '{_list.SoldTo}' not found. No customer ID will be linked.", Severity.Warning);
            }
        }

        // Calculate ScheduledProcessingDate before saving
        if (_list.ShipDate.HasValue)
        {
            var shipDate = _list.ShipDate.Value;
            var processingDate = shipDate.AddDays(-1);

            if (processingDate.DayOfWeek == DayOfWeek.Monday)
            {
                processingDate = processingDate.AddDays(-3);
            }
            else if (processingDate.DayOfWeek == DayOfWeek.Sunday)
            {
                processingDate = processingDate.AddDays(-2);
            }
            else if (processingDate.DayOfWeek == DayOfWeek.Saturday)
            {
                processingDate = processingDate.AddDays(-1);
            }

            foreach (var item in _list.Items)
            {
                item.ScheduledProcessingDate = processingDate;
            }
        }

        try
        {
            var newListId = await PickingListService.UpsertFromParsedDataAsync(_list.BranchId, userId, _list, _list.Items.ToList());
            Snackbar.Add("Picking list saved successfully.", Severity.Success);
            ParsingStateService.Clear();
            NavManager.NavigateTo("/picking-lists/upload");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save picking list: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void OnMachineChanged(PickingListItem item, int? machineId)
    {
        item.MachineId = machineId;
        var machine = machineId.HasValue ? _machines.FirstOrDefault(m => m.Id == machineId.Value) : null;

        if (machine != null)
        {
            if (machine.Category == MachineCategory.Sheet || machine.Category == MachineCategory.Coil)
            {
                item.Status = PickingLineStatus.AssignedPulling;
                _list.Status = PickingListStatus.Scheduled;
            }
            else if (machine.Category == MachineCategory.CTL || machine.Category == MachineCategory.Slitter)
            {
                item.Status = PickingLineStatus.Pending;
            }
        }
        else
        {
            item.Status = PickingLineStatus.Pending;
        }
        StateHasChanged();
    }

    private void ApplyBulkAssign()
    {
        if (_bulkAssignMachineId == null || _selectedItems == null) return;

        foreach (var item in _selectedItems)
        {
            OnMachineChanged(item, _bulkAssignMachineId);
        }
        Snackbar.Add($"Assigned machine to {_selectedItems.Count} items.", Severity.Success);
    }

    private IEnumerable<Machine> GetFilteredMachines(PickingListItem item)
    {
        if (item.Length.HasValue && item.Length > 0)
        {
            return _machines.Where(m => m.Category == MachineCategory.Sheet || m.Category == MachineCategory.CTL);
        }
        else
        {
            return _machines.Where(m => m.Category == MachineCategory.Slitter || m.Category == MachineCategory.Coil);
        }
    }

    private string FormatDimension(object? dimension)
        => dimension is decimal d ? d.ToString("N3") : (dimension?.ToString() ?? string.Empty);

    private string Display(string? s) => string.IsNullOrWhiteSpace(s) ? "—" : s;

    private void Cancel()
    {
        ParsingStateService.Clear();
        NavManager.NavigateTo("/picking-lists/upload");
    }

    public void Dispose()
    {
        ParsingStateService.Clear();
    }
}
