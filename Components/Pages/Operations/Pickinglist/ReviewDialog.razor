@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@using Microsoft.EntityFrameworkCore

@inject PickingListService PickingListService
@inject MachineService MachineService
@inject ApplicationDbContext DbContext
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">Review New Picking List: @List.SalesOrderNumber</MudText>
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <!-- Header Section -->
            <MudPaper Class="pa-4 mb-4">
                <MudGrid Spacing="2">
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">SOLD TO</MudText>
                        <MudText Typo="Typo.body2">@List.SoldTo</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP TO</MudText>
                        <MudText Typo="Typo.body2" Style="white-space: pre-wrap;">@List.ShipTo</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">ORDER DATE</MudText>
                        <MudText Typo="Typo.body2">@List.OrderDate?.ToShortDateString()</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP DATE</MudText>
                        <MudText Typo="Typo.body2">@List.ShipDate?.ToShortDateString()</MudText>
                    </MudItem>
                     <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">SALES REP</MudText>
                        <MudText Typo="Typo.body2">@List.SalesRep</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP VIA</MudText>
                        <MudText Typo="Typo.body2">@List.ShippingVia</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">FOB</MudText>
                        <MudText Typo="Typo.body2">@List.FOB</MudText>
                    </MudItem>
                    <MudItem xs="6" sm="3">
                        <MudText Typo="Typo.caption" Style="font-weight: bold;">TOTAL WEIGHT</MudText>
                        <MudText Typo="Typo.body2">@List.TotalWeight.ToString("N3")</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Items Table -->
            <MudTable Items="@List.Items" T="PickingListItem" Hover="true" Dense="true" MultiSelection="true" @bind-SelectedItems="_selectedItems">
                <HeaderContent>
                    <MudTh>Line</MudTh>
                    <MudTh>Qty</MudTh>
                    <MudTh>Item ID</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Width</MudTh>
                    <MudTh>Length</MudTh>
                    <MudTh>Weight</MudTh>
                    <MudTh>Unit</MudTh>
                    <MudTh>Machine</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Line">@context.LineNumber</MudTd>
                    <MudTd DataLabel="Qty">@context.Quantity.ToString("N3")</MudTd>
                    <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
                    <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                    <MudTd DataLabel="Width">@FormatDimension(context.Width)</MudTd>
                    <MudTd DataLabel="Length">@FormatDimension(context.Length)</MudTd>
                    <MudTd DataLabel="Weight">@context.Weight?.ToString("N3")</MudTd>
                    <MudTd DataLabel="Unit">@context.Unit</MudTd>
                    <MudTd DataLabel="Machine">
                        <MudSelect T="int?" @bind-Value="context.MachineId" Dense="true" Margin="Margin.Dense">
                            @foreach (var machine in _machines)
                            {
                                <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudPaper Class="d-flex align-center gap-4 pa-4 mt-4">
                <MudSelect T="int?" @bind-Value="_bulkAssignMachineId" Label="Bulk Assign Machine" Dense="true" Style="min-width: 250px;">
                    @foreach (var machine in _machines)
                    {
                        <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" OnClick="ApplyBulkAssign" Disabled="@(_selectedItems == null || _selectedItems.Count == 0)">
                    Apply to Selected
                </MudButton>
            </MudPaper>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@OnCancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" Disabled="@_isProcessing">
             @if (_isProcessing)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving...</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public PickingList List { get; set; } = default!;
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<int> OnSave { get; set; }

    private List<Machine> _machines = new();
    private HashSet<PickingListItem> _selectedItems = new();
    private int? _bulkAssignMachineId;
    private bool _isProcessing = false;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (List == null)
        {
            // This should not happen if used correctly, but as a safeguard:
            await OnCancel.InvokeAsync();
            return;
        }

        try
        {
            var allMachines = await MachineService.GetMachinesAsync();
            _machines = allMachines.Where(m => m.BranchId == List.BranchId).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading machines: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        if (List == null) return;

        _isProcessing = true;

        // Step 1: Try to find the customer by name and assign the ID
        if (!string.IsNullOrWhiteSpace(List.SoldTo))
        {
            var customer = await DbContext.Customers
                .FirstOrDefaultAsync(c => c.CustomerName.ToLower() == List.SoldTo.ToLower());

            if (customer != null)
            {
                List.CustomerId = customer.Id;
            }
            else
            {
                Snackbar.Add($"Warning: Customer '{List.SoldTo}' not found. No customer ID will be linked.", Severity.Warning);
            }
        }

        // Step 2: Save the picking list
        try
        {
            await PickingListService.CreateAsync(List);
            Snackbar.Add("Picking list saved successfully.", Severity.Success);
            await OnSave.InvokeAsync(List.Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save picking list: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void ApplyBulkAssign()
    {
        if (_bulkAssignMachineId == null || _selectedItems == null) return;

        foreach (var item in _selectedItems)
        {
            item.MachineId = _bulkAssignMachineId;
        }
        Snackbar.Add($"Assigned machine to {_selectedItems.Count} items.", Severity.Success);
    }

    private string FormatDimension(object? dimension)
    {
        if (dimension is decimal d)
        {
            return d.ToString("N3");
        }
        return dimension?.ToString() ?? string.Empty;
    }
}
