@page "/picking-lists/{id:int}"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@inject PickingListService PickingListService
@inject MachineService MachineService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

@if (_list == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
        <MudText Typo="Typo.h5">Review Picking List: @_list.SalesOrderNumber</MudText>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ReParse" Disabled="@_isProcessing">
                @if (_isProcessing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Parsing...</MudText>
                }
                else
                {
                    <MudText>Re-Parse</MudText>
                }
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">Save</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveChangesAndClose">Save & Close</MudButton>
        </MudStack>
    </MudStack>

    <!-- Header Section -->
    <MudPaper Class="pa-4 mb-4">
        <MudGrid Spacing="2">
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SOLD TO</MudText>
                <MudText Typo="Typo.body2">@_list.SoldTo</MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP TO</MudText>
                <MudText Typo="Typo.body2">@_list.ShipTo</MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">ORDER DATE</MudText>
                <MudText Typo="Typo.body2">@_list.OrderDate?.ToShortDateString()</MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP DATE</MudText>
                <MudText Typo="Typo.body2">@_list.ShipDate?.ToShortDateString()</MudText>
            </MudItem>
             <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SALES REP</MudText>
                <MudText Typo="Typo.body2">@_list.SalesRep</MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">SHIP VIA</MudText>
                <MudText Typo="Typo.body2">@_list.ShippingVia</MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">FOB</MudText>
                <MudText Typo="Typo.body2">@_list.FOB</MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.caption" Style="font-weight: bold;">TOTAL WEIGHT</MudText>
                <MudText Typo="Typo.body2">@_list.TotalWeight.ToString("N3")</MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Items Table -->
    <MudTable Items="@_list.Items" T="PickingListItem" Hover="true" Dense="true" MultiSelection="true" @bind-SelectedItems="_selectedItems">
        <HeaderContent>
            <MudTh>Line</MudTh>
            <MudTh>Qty</MudTh>
            <MudTh>Item ID</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Width</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>Weight</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Machine</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Line">@context.LineNumber</MudTd>
            <MudTd DataLabel="Qty">@context.Quantity.ToString("N3")</MudTd>
            <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
            <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
            <MudTd DataLabel="Width">@FormatDimension(context.Width)</MudTd>
            <MudTd DataLabel="Length">@FormatDimension(context.Length)</MudTd>
            <MudTd DataLabel="Weight">@context.Weight?.ToString("N3")</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="Machine">
                <MudSelect T="int?" @bind-Value="context.MachineId" Dense="true" Margin="Margin.Dense">
                    @foreach (var machine in _machines)
                    {
                        <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudPaper Class="d-flex align-center gap-4 pa-4 mt-4">
         <MudSelect T="int?" @bind-Value="_bulkAssignMachineId" Label="Bulk Assign Machine" Dense="true" Style="min-width: 250px;">
            @foreach (var machine in _machines)
            {
                <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton Variant="Variant.Filled" OnClick="ApplyBulkAssign" Disabled="@(_selectedItems == null || _selectedItems.Count == 0)">
            Apply to Selected
        </MudButton>
    </MudPaper>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private PickingList? _list;
    private List<Machine> _machines = new();
    private HashSet<PickingListItem> _selectedItems = new();
    private int? _bulkAssignMachineId;
    private bool _isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        _list = await PickingListService.GetByIdAsync(Id);
        if (_list != null)
        {
            // Assuming machines are branch-specific
            var allMachines = await MachineService.GetMachinesAsync();
            _machines = allMachines.Where(m => m.BranchId == _list.BranchId).ToList();
        }
    }

    private async Task SaveChanges()
    {
        if (_list == null) return;

        await PickingListService.UpdateMachineAssignmentsAsync(_list.Items);
        Snackbar.Add("Changes saved successfully.", Severity.Success);
    }

    private async Task SaveChangesAndClose()
    {
        await SaveChanges();
        NavManager.NavigateTo("/picking-lists");
    }

    private void ApplyBulkAssign()
    {
        if (_bulkAssignMachineId == null || _selectedItems == null) return;

        foreach (var item in _selectedItems)
        {
            item.MachineId = _bulkAssignMachineId;
        }
        Snackbar.Add($"Assigned machine to {_selectedItems.Count} items.", Severity.Success);
    }

    private async Task ReParse()
    {
        if (_list == null) return;

        _isProcessing = true;
        try
        {
            await PickingListService.ReParseAsync(_list.Id);
            Snackbar.Add("Re-parsing complete. Page will reload.", Severity.Success);
            // Reload the entire page to get the fresh data
            NavManager.NavigateTo($"/picking-lists/{_list.Id}", forceLoad: true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to re-parse: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private string FormatDimension(object? dimension)
    {
        if (dimension is decimal d)
        {
            return d.ToString("N3");
        }
        return dimension?.ToString() ?? string.Empty;
    }
}
