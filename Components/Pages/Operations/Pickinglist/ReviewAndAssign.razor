@page "/pickinglists/{id:int}"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Models
@using CMetalsWS.Security
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject PickingListService PickingListService
@inject IAssignmentService AssignmentService
@inject MachineService MachineService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Policy = Permissions.PickingLists.Edit)]

@if (_list == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudText Typo="Typo.h5">Review & Assign: @_list.SalesOrderNumber</MudText>

    <MudPaper Class="pa-4 my-4">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3"><b>Sold To:</b> <br /> @((MarkupString)_list.SoldTo?.Replace("\n", "<br/>"))</MudItem>
            <MudItem xs="12" sm="6" md="3"><b>Ship To:</b> <br /> @((MarkupString)_list.ShipTo?.Replace("\n", "<br/>"))</MudItem>
            <MudItem xs="12" sm="6" md="3">
                <b>Sales Order #:</b> @_list.SalesOrderNumber <br />
                <b>Order Date:</b> @_list.OrderDate?.ToShortDateString() <br />
                <b>Ship Date:</b> @_list.ShipDate?.ToShortDateString() <br />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <b>Sales Rep:</b> @_list.SalesRep <br />
                <b>FOB:</b> @_list.FOB <br />
                <b>Ship Via:</b> @_list.ShippingVia
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudTable Items="@FilteredItems" Dense="true" Hover="true">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSelect T="string" @bind-Value="_assignmentFilter" Label="Assignment" Clearable="true">
                <MudSelectItem Value="@("All")">All</MudSelectItem>
                <MudSelectItem Value="@("Unassigned")">Unassigned</MudSelectItem>
                <MudSelectItem Value="@("Machine")">Machine</MudSelectItem>
                <MudSelectItem Value="@("Pulling")">Pulling</MudSelectItem>
            </MudSelect>
            @if (_assignmentFilter == "Machine")
            {
                <MudSelect T="int?" @bind-Value="_machineFilter" Label="Machine" Clearable="true">
                    @foreach (var machine in _machines)
                    {
                        <MudSelectItem Value="@((int?)machine.Id)">@machine.Name</MudSelectItem>
                    }
                </MudSelect>
            }
            @if (_assignmentFilter == "Pulling")
            {
                <MudSelect T="BuildingCategory?" @bind-Value="_pullingFilter" Label="Pulling" Clearable="true">
                    <MudSelectItem Value="@((BuildingCategory?)BuildingCategory.Sheet)">Sheet</MudSelectItem>
                    <MudSelectItem Value="@((BuildingCategory?)BuildingCategory.Coil)">Coil</MudSelectItem>
                </MudSelect>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Line</MudTh>
            <MudTh>Qty</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Item ID</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Width</MudTh>
            <MudTh>Length</MudTh>
            <MudTh>Weight</MudTh>
            <MudTh>Assignment</MudTh>
            <MudTh>Needs Attention</MudTh>
            <MudTh>Has Tag Lots</MudTh>
            <MudTh>Sales Note</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Line">@context.LineNumber</MudTd>
            <MudTd DataLabel="Qty">@context.Quantity</MudTd>
            <MudTd DataLabel="Unit">@context.Unit</MudTd>
            <MudTd DataLabel="Item ID">@context.ItemId</MudTd>
            <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
            <MudTd DataLabel="Width">@context.Width</MudTd>
            <MudTd DataLabel="Length">@context.Length</MudTd>
            <MudTd DataLabel="Weight">@context.Weight</MudTd>
            <MudTd DataLabel="Assignment">
                @if (context.MachineId.HasValue)
                {
                    <MudChip T="string" Color="Color.Primary">@context.Machine?.Name</MudChip>
                }
                else if (context.BuildingCategory != BuildingCategory.None)
                {
                    <MudChip T="string" Color="Color.Secondary">@context.BuildingCategory.ToString()</MudChip>
                }
                else
                {
                    <MudChip T="string">Unassigned</MudChip>
                }
            </MudTd>
            <MudTd DataLabel="Needs Attention">
                @if (context.NeedsAttention)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" />
                }
            </MudTd>
            <MudTd DataLabel="Has Tag Lots">
                @if (context.HasTagLots)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                }
            </MudTd>
            <MudTd DataLabel="Sales Note">@context.SalesNote</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => OpenAssignmentDialog(context)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private PickingList? _list;
    private ApplicationUser? _user;
    private List<Machine> _machines = new();
    private string _searchString = "";
    private string _assignmentFilter = "All";
    private int? _machineFilter;
    private BuildingCategory? _pullingFilter;

    private IEnumerable<PickingListItem> FilteredItems =>
        _list?.Items.Where(item =>
        {
            if (!string.IsNullOrWhiteSpace(_searchString) &&
                !item.ItemId.Contains(_searchString, StringComparison.OrdinalIgnoreCase) &&
                !item.ItemDescription.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }

            if (_assignmentFilter == "Unassigned" && (item.MachineId.HasValue || item.BuildingCategory != BuildingCategory.None))
            {
                return false;
            }

            if (_assignmentFilter == "Machine" && !item.MachineId.HasValue)
            {
                return false;
            }

            if (_assignmentFilter == "Pulling" && item.BuildingCategory == BuildingCategory.None)
            {
                return false;
            }

            if (_machineFilter.HasValue && item.MachineId != _machineFilter)
            {
                return false;
            }

            if (_pullingFilter.HasValue && item.BuildingCategory != _pullingFilter)
            {
                return false;
            }

            return true;
        }) ?? Enumerable.Empty<PickingListItem>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetUserAsync(authState.User);
        await LoadData();
    }

    private async Task LoadData()
    {
        _list = await PickingListService.GetByIdAsync(Id);
        if (_list != null)
        {
            _machines = await MachineService.GetMachinesByBranchAsync(_list.BranchId);
        }
        StateHasChanged();
    }

    private async Task OpenAssignmentDialog(PickingListItem item)
    {
        var parameters = new DialogParameters { ["ItemId"] = item.Id };
        var dialog = DialogService.Show<Components.Pages.Operations.Pickinglist.Dialogs.AssignDialog>("Assign Item", parameters);
        var result = await dialog.Result;
        if (result != null && !result.Canceled)
        {
            await LoadData();
        }
    }
}
