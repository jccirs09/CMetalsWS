@using CMetalsWS.Data
@using MudBlazor
@using MudBlazor.Services

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Confirm Pick</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Do you want to confirm you have picked the following item(s)?</MudText>
        <div style="max-height: 300px; overflow-y: auto;" class="mt-4">
            @foreach (var item in Items)
            {
                <MudPaper Class="pa-2 mb-2">
                    <MudText><strong>Item:</strong> @item.ItemDescription</MudText>
                    <MudText Typo="Typo.caption"><strong>Qty:</strong> @item.Quantity, <strong>Weight:</strong> @item.Weight, <strong>Location:</strong> @item.Location</MudText>
                </MudPaper>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Confirm">Confirm Pick</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<PickingListItem> Items { get; set; } = new();

    void Confirm() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}