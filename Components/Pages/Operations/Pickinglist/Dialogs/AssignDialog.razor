@using CMetalsWS.Data
@using CMetalsWS.Models
@using CMetalsWS.Services
@using MudBlazor
@inject IAssignmentService AssignmentService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@using MudBlazor
@inject AuthenticationStateProvider AuthStateProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Assign Picking List Item</MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="string" Label="Assign To" @bind-Value="_selectedAssignment">
            @foreach (var option in _options)
            {
                <MudSelectItem Value="@GetOptionValue(option)">@option.Name</MudSelectItem>
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Assign</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int ItemId { get; set; }

    private List<AssignableOptionDto> _options = new();
    private string _selectedAssignment;
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetUserAsync(authState.User);
        _options = await AssignmentService.ListAssignableOptionsAsync(ItemId);
    }

    private string GetOptionValue(AssignableOptionDto option)
    {
        return $"{option.Type}|{(option.MachineId.HasValue ? option.MachineId.Value.ToString() : option.BuildingCategory.Value.ToString())}";
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(_selectedAssignment) || _user == null)
        {
            Snackbar.Add("Please select an assignment.", Severity.Warning);
            return;
        }

        var parts = _selectedAssignment.Split('|');
        var type = parts[0];
        var value = parts[1];

        try
        {
            if (type == "Machine")
            {
                await AssignmentService.AssignToMachineAsync(ItemId, int.Parse(value), _user.Id);
            }
            else
            {
                await AssignmentService.SendToPullingAsync(ItemId, (BuildingCategory)byte.Parse(value), _user.Id);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    void Cancel() => MudDialog.Cancel();
}
