@using CMetalsWS.Data
@using CMetalsWS.Services
@using System.Security.Claims
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client

@inject PickingListService PickingListService
@inject ITaskAuditEventService AuditService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject UserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Picking List: @PickingList.SalesOrderNumber</MudText>
    </TitleContent>
    <DialogContent>
        <MudTable Items="PickingList.Items.ToList()" Hover="true" Dense="true">
            <HeaderContent>
                <MudTh>Item Code</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Qty</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Item Code">@context.ItemId</MudTd>
                <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                <MudTd DataLabel="Qty">@context.Quantity</MudTd>
                <MudTd DataLabel="Weight">@context.Weight</MudTd>
                <MudTd DataLabel="Actions">
                    @if (!_auditEvents.ContainsKey(context.Id) || _auditEvents[context.Id] == null)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => HandleAuditEvent(context.Id, AuditEventType.Start))">Start</MudButton>
                    }
                    else if (_auditEvents[context.Id] == AuditEventType.Start || _auditEvents[context.Id] == AuditEventType.Resume)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="@(() => HandleAuditEvent(context.Id, AuditEventType.Pause))">Pause</MudButton>
                    }
                    else if (_auditEvents[context.Id] == AuditEventType.Pause)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => HandleAuditEvent(context.Id, AuditEventType.Resume))">Resume</MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public PickingList PickingList { get; set; }

    private Dictionary<int, AuditEventType?> _auditEvents = new();
    private ApplicationUser? _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(user);
        }

        if (PickingList.Items.Any())
        {
            var taskIds = PickingList.Items.Select(t => t.Id).ToList();
            var lastEvents = await AuditService.GetLastEventTypesForTasksAsync(taskIds, TaskType.Picking);

            _auditEvents = PickingList.Items.ToDictionary(
                t => t.Id,
                t => lastEvents.TryGetValue(t.Id, out var eventType) ? (AuditEventType?)eventType : null
            );
        }
    }

    private async Task HandleAuditEvent(int taskId, AuditEventType eventType, bool stateHasChanged = true)
    {
        if (_user is null)
        {
            Snackbar.Add("Could not identify user. Action aborted.", Severity.Error);
            return;
        }

        await AuditService.CreateAuditEventAsync(taskId, TaskType.Picking, eventType, _user.Id);
        _auditEvents[taskId] = eventType;
        Snackbar.Add($"Task successfully {eventType.ToString().ToLower()}ed.", Severity.Success);

        if (stateHasChanged)
        {
            StateHasChanged();
        }
    }

    void Close() => MudDialog.Close(DialogResult.Ok(true));
}
