@using CMetalsWS.Data
@using MudBlazor
@using System.Threading

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject CustomerService CustomerService
@inject PickingListService PickingListService

<MudDialog>
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
            <MudIcon Icon="@Icons.Material.Filled.Inventory2" />
            <MudText Typo="Typo.h6">@Title</MudText>
            <MudSpacer />
        </MudStack>
    </TitleContent>

    <DialogContent>
        <MudPaper Class="pa-4" Elevation="0">
            <MudForm Model="@Model" @ref="form">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="4">
                        <MudTextField @bind-Value="Model.SalesOrderNumber" Label="Sales Order Number" Required="true" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        @if (LockBranch)
                        {
                            <MudTextField Value="@(CurrentBranch?.Name ?? "My Branch")" Label="Branch" ReadOnly="true" Disabled="true" />
                        }
                        else
                        {
                            <MudSelect T="int" Label="Branch" @bind-Value="Model.BranchId" Required="true">
                                @foreach (var b in Branches)
                                {
                                    <MudSelectItem T="int" Value="@b.Id">@b.Name</MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </MudItem>

                    <MudItem xs="12" sm="8">
                        <MudAutocomplete T="Customer"
                                         Label="Customer"
                                         ResetValueOnEmptyText="true"
                                         ToStringFunc="@((Customer c) => c is null ? string.Empty : $"{c.CustomerCode} - {c.CustomerName}")"
                                         Value="_selectedCustomer"
                                         ValueChanged="@(c => OnCustomerChanged(c))"
                                         valueExpression="() => _selectedCustomer"
                                         SearchFunc="SearchCustomers"
                                         Clearable="true"
                                         Dense="true"
                                         CoerceText="true"
                                         CoerceValue="true" />
                    </MudItem>


                    <MudItem xs="12" sm="3">
                        <MudSelect T="PickingListStatus" Label="Status" @bind-Value="Model.Status">
                            @foreach (var s in Enum.GetValues<PickingListStatus>())
                            {
                                <MudSelectItem T="PickingListStatus" Value="@s">@s</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudDatePicker Label="Ship Date" Date="Model.ShipDate" DateChanged="OnMainShipDateChanged" />
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />

                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-2">
                    <MudText Typo="Typo.subtitle1">Line Items</MudText>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText Typo="Typo.subtitle2">Total Weight:</MudText>
                        <MudChip T="string" Text="@Model.TotalWeight.ToString("N3")" />
                        <MudButton Variant="Variant.Outlined"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Disabled="@(!CanAddOrEdit)"
                                   OnClick="AddItem">
                            Add Line
                        </MudButton>
                    </MudStack>
                </MudStack>

                <MudTable Items="Model.Items.OrderBy(i => i.LineNumber).ToList()" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Line</MudTh>
                        <MudTh>Item</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh class="text-right">Qty</MudTh>
                        <MudTh>Unit</MudTh>
                        <MudTh class="text-right">Width</MudTh>
                        <MudTh class="text-right">Length</MudTh>
                        <MudTh class="text-right">Weight</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Sched</MudTh>
                        <MudTh>Machine</MudTh>
                        @if (CanAddOrEdit)
                        {
                            <MudTh>Actions</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Line">@context.LineNumber</MudTd>
                        <MudTd DataLabel="Item">@context.ItemId</MudTd>
                        <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                        <MudTd DataLabel="Qty" Class="text-right">@context.Quantity.ToString("N3")</MudTd>
                        <MudTd DataLabel="Unit">@context.Unit</MudTd>
                        <MudTd DataLabel="Width" Class="text-right">@FormatDimension(context.Width)</MudTd>
                        <MudTd DataLabel="Length" Class="text-right">@FormatDimension(context.Length)</MudTd>
                        <MudTd DataLabel="Weight" Class="text-right">@context.Weight?.ToString("N3")</MudTd>
                        <MudTd DataLabel="Status">@context.Status</MudTd>
                        <MudTd DataLabel="Sched">
                            @if (context.ScheduledShipDate is DateTime d)
                            {
                                <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">@d.ToString("yyyy-MM-dd HH:mm")</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Machine">
                            <MudSelect T="int?" Value="context.MachineId" Dense="true" Margin="Margin.Dense"
                                       TValue="int?" ValueChanged="@((int? machineId) => OnMachineChanged(context, machineId))">
                                <MudSelectItem T="int?" Value="@((int?)null)">None</MudSelectItem>
                                @foreach (var m in Machines)
                                {
                                    <MudSelectItem T="int?" Value="@m.Id">@m.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        @if (CanAddOrEdit)
                        {
                            <MudTd DataLabel="Actions">
                                <MudTooltip Text="Split to item shipment (inherit list Ship Date)">
                                    <MudIconButton Color="Color.Primary"
                                                   Icon="@Icons.Material.Filled.CalendarMonth"
                                                   OnClick="@(() => SplitShip(context))" />
                                </MudTooltip>
                                <MudIconButton Color="Color.Info"
                                               Icon="@Icons.Material.Filled.Edit"
                                               OnClick="@(async () => await EditItem(context))" />
                                <MudIconButton Color="Color.Error"
                                               Icon="@Icons.Material.Filled.Delete"
                                               OnClick="@(() => RemoveItem(context))" />
                            </MudTd>
                        }
                    </RowTemplate>
                </MudTable>

                <MudStack Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Class="mt-2">
                    <MudText Typo="Typo.subtitle2" Class="mr-2">Total Weight:</MudText>
                    <MudText Typo="Typo.subtitle2" Class="font-weight-bold">@Model.TotalWeight.ToString("N3")</MudText>
                </MudStack>
            </MudForm>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public PickingList Model { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public List<Truck> Trucks { get; set; } = new();
    [Parameter] public List<Machine> Machines { get; set; } = new();

    [Parameter] public bool LockBranch { get; set; }
    [Parameter] public Branch? CurrentBranch { get; set; }

    [Parameter] public EventCallback<(int pickingListId, int? lineId, DateTime when)> OnLineSplitShipped { get; set; }

    private MudForm form = default!;
    [CascadingParameter] public IMudDialogInstance Dialog { get; set; } = default!;

    private Customer? _selectedCustomer;
    private bool CanAddOrEdit => IsEdit || (Model?.Id ?? 0) == 0;

    protected override async Task OnParametersSetAsync()
    {
        Model.Items ??= new List<PickingListItem>();

        if (LockBranch && CurrentBranch != null)
            Model.BranchId = CurrentBranch.Id;

        if (Model.CustomerId.HasValue && _selectedCustomer == null)
            _selectedCustomer = await CustomerService.GetByIdAsync(Model.CustomerId.Value);
    }


    private async Task<IEnumerable<Customer>> SearchCustomers(string value, CancellationToken _)
    {
        value = value?.Trim() ?? string.Empty;
        var results = await CustomerService.SearchAsync(value);
        return results;
    }

    private void OnCustomerChanged(Customer? c)
    {
        _selectedCustomer = c;

        if (c is null)
        {
            Model.CustomerId = null;
            return;
        }

        Model.CustomerId = c.Id;
    }

    private void OnMainShipDateChanged(DateTime? newDate)
    {
        Model.ShipDate = newDate;
        if (Model.ShipDate.HasValue)
        {
            foreach (var item in Model.Items)
            {
                item.ScheduledShipDate = Model.ShipDate;
            }
        }
        StateHasChanged();
    }

    private async Task AddItem()
    {
        if (!CanAddOrEdit) return;

        var parameters = new DialogParameters
        {
            ["Item"] = new PickingListItem
            {
                ItemId = string.Empty,
                ItemDescription = string.Empty,
                LineNumber = (Model.Items.Any() ? Model.Items.Max(i => i.LineNumber) : 0) + 1,
                Unit = "EA",
                Status = PickingLineStatus.Pending,
                ScheduledShipDate = Model.ShipDate
            },
            ["Machines"] = Machines,
            ["Title"] = "Add Line"
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };
        var dlg = await DialogService.ShowAsync<PickingListItemDialog>("Add Line", parameters, options);
        if (dlg is null) return;

        var res = await dlg.Result;
        if (res is null || res.Canceled) return;

        if (res.Data is PickingListItem item)
        {
            item.Id = 0;
            Model.Items.Add(item);
            StateHasChanged();
        }
    }

    private async Task EditItem(PickingListItem src)
    {
        if (!CanAddOrEdit) return;

        var clone = new PickingListItem
        {
            Id = src.Id,
            PickingListId = Model.Id,
            LineNumber = src.LineNumber,
            ItemId = src.ItemId,
            ItemDescription = src.ItemDescription,
            Quantity = src.Quantity,
            Unit = src.Unit,
            Width = src.Width,
            Length = src.Length,
            Weight = src.Weight,
            MachineId = src.MachineId,
            Status = src.Status,
            ScheduledShipDate = src.ScheduledShipDate
        };

        var parameters = new DialogParameters
        {
            ["Item"] = clone,
            ["Machines"] = Machines,
            ["Title"] = "Edit Line"
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };
        var dlg = await DialogService.ShowAsync<PickingListItemDialog>("Edit Line", parameters, options);
        if (dlg is null) return;

        var res = await dlg.Result;
        if (res is null || res.Canceled) return;

        if (res.Data is PickingListItem updated)
        {
            var target = Model.Items.First(i => i.Id == src.Id);
            target.LineNumber = updated.LineNumber;
            target.ItemId = updated.ItemId;
            target.ItemDescription = updated.ItemDescription;
            target.Quantity = updated.Quantity;
            target.Unit = updated.Unit;
            target.Width = updated.Width;
            target.Length = updated.Length;
            target.Weight = updated.Weight;
            target.MachineId = updated.MachineId;
            target.Status = updated.Status;
            target.ScheduledShipDate = updated.ScheduledShipDate;

            StateHasChanged();
        }
    }

    private void RemoveItem(PickingListItem item)
    {
        if (!CanAddOrEdit) return;
        Model.Items.Remove(item);
        StateHasChanged();
    }

    // Split-ship: set a line-level schedule to today at 08:00
    private async Task SplitShip(PickingListItem line)
    {
        var when = DateTime.Today.AddHours(8);
        line.ScheduledShipDate = when;

        await PickingListService.UpdateAsync(Model);

        if (OnLineSplitShipped.HasDelegate)
            await OnLineSplitShipped.InvokeAsync((Model.Id, line.Id == 0 ? null : line.Id, when));

        Snackbar.Add($"Line {line.LineNumber} scheduled for {when:yyyy-MM-dd HH:mm}.", Severity.Success);
        StateHasChanged();
    }

    private async Task Save()
    {
        await form.Validate();
        if (!form.IsValid) return;

        if (LockBranch && CurrentBranch != null)
            Model.BranchId = CurrentBranch.Id;

        Dialog.Close(DialogResult.Ok(Model));
    }

    private void Cancel() => Dialog.Cancel();

    private DateTime? CalculateAutoScheduleDate()
    {
        if (!Model.ShipDate.HasValue) return null;

        var shippingDate = Model.ShipDate.Value.Date;
        var pullDate = shippingDate.AddDays(-1);

        if (pullDate.DayOfWeek == DayOfWeek.Saturday)
        {
            pullDate = pullDate.AddDays(-1); // Becomes Friday
        }
        else if (pullDate.DayOfWeek == DayOfWeek.Sunday)
        {
            pullDate = pullDate.AddDays(-2); // Becomes Friday
        }

        return pullDate.AddHours(8);
    }

    private void OnMachineChanged(PickingListItem item, int? machineId)
    {
        item.MachineId = machineId;
        var machine = machineId.HasValue ? Machines.FirstOrDefault(m => m.Id == machineId.Value) : null;
        var autoScheduleDate = CalculateAutoScheduleDate();

        if (machine != null)
        {
            item.Status = PickingLineStatus.AssignedPulling;

            if (machine.Name.Contains("Sheet", StringComparison.OrdinalIgnoreCase))
            {
                if (autoScheduleDate.HasValue)
                {
                    item.ScheduledShipDate = autoScheduleDate;
                    Snackbar.Add($"Item auto-scheduled for pulling on {item.ScheduledShipDate:yyyy-MM-dd HH:mm}.", Severity.Info);
                }
            }
            else
            {
                // It's not a sheet machine. Clear the date only if it was the one we would have set automatically.
                if (item.ScheduledShipDate.HasValue && item.ScheduledShipDate.Value == autoScheduleDate)
                {
                    item.ScheduledShipDate = null;
                }
            }
        }
        else // Machine is unassigned
        {
            if (item.Status == PickingLineStatus.AssignedPulling)
            {
                item.Status = PickingLineStatus.Pending;
            }

            // Also clear auto-scheduled date on unassign
            if (item.ScheduledShipDate.HasValue && item.ScheduledShipDate.Value == autoScheduleDate)
            {
                item.ScheduledShipDate = null;
            }
        }
        StateHasChanged();
    }

    private string FormatDimension(object? dimension)
    {
        if (dimension is decimal d)
        {
            return d.ToString("N3");
        }
        return dimension?.ToString() ?? string.Empty;
    }
}
