@page "/operations/picking-packing"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using System.Security.Claims
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using CMetalsWS.Components.Pages.Operations.Pickinglist.Dialogs
@attribute [Authorize(Policy = Permissions.PickingLists.View)]

@inject PickingListService PickingListService
@inject ITaskAuditEventService AuditService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject DestinationRegionService DestinationRegionService

<PageTitle>Pick and Pack</PageTitle>

<MudTabs Elevation="2" Rounded="true" PanelClass="mt-4">
    <MudTabPanel Text="Picking Lists">
        <MudPaper Class="pa-4 mb-4">
            <MudGrid Spacing="2">
                <MudItem xs="12" sm="3">
                    <MudTextField @bind-Value="_searchTerm" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudSelect T="int?" @bind-Value="_selectedDestinationRegionId" Label="Destination" Variant="Variant.Outlined">
                        <MudSelectItem T="int?" Value="@(null)">All Destinations</MudSelectItem>
                        @foreach (var destination in _destinations)
                        {
                            <MudSelectItem T="int?" Value="@destination.Id">@destination.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudSelect T="PickingListStatus?" @bind-Value="_selectedStatus" Label="Status" Variant="Variant.Outlined">
                        <MudSelectItem T="PickingListStatus?" Value="@(null)">All Statuses</MudSelectItem>
                        @foreach (var status in Enum.GetValues<PickingListStatus>())
                        {
                            <MudSelectItem T="PickingListStatus?" Value="@status">@status.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudSelect T="MachineCategory?" @bind-Value="_selectedMachineCategory" Label="Machine Category" Variant="Variant.Outlined">
                        <MudSelectItem T="MachineCategory?" Value="@(null)">All</MudSelectItem>
                        <MudSelectItem T="MachineCategory?" Value="@MachineCategory.Coil">Coil</MudSelectItem>
                        <MudSelectItem T="MachineCategory?" Value="@MachineCategory.Sheet">Sheet</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudPaper>
        @foreach (var pickingList in FilteredPickingLists)
        {
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@pickingList.SalesOrderNumber</MudText>
                        <MudText Typo="Typo.body2">@pickingList.Customer?.CustomerName</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudChip T="string" Color="@(GetPriorityColor(pickingList.Priority))">@GetPriorityText(pickingList.Priority)</MudChip>
                        <MudChip T="string" Color="Color.Default">@pickingList.Status.ToString()</MudChip>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Destination: @pickingList.DestinationRegion?.Name</MudText>
                    <MudText>Ship Date: @pickingList.ShipDate?.ToShortDateString()</MudText>
                    <MudText><b>Total Line Items (Sheet/Coil):</b> @GetTotalLineItems(pickingList)</MudText>
                    <MudText><b>Total Weight (Sheet/Coil):</b> @GetTotalWeight(pickingList).ToString("N2") lbs</MudText>
                    <MudText Class="mt-2">Picking Progress</MudText>
                    <MudProgressLinear Color="Color.Primary" Value="@GetPickingProgress(pickingList)" Class="my-1">
                        <MudText Typo="Typo.caption" Style="color:white;">@($"{GetPickingProgress(pickingList):F0}%")</MudText>
                    </MudProgressLinear>
                    <MudText>Packing Progress</MudText>
                    <MudProgressLinear Color="Color.Secondary" Value="@GetPackingProgress(pickingList)" Class="my-1">
                        <MudText Typo="Typo.caption" Style="color:white;">@($"{GetPackingProgress(pickingList):F0}%")</MudText>
                    </MudProgressLinear>
                </MudCardContent>
            </MudCard>
        }
    </MudTabPanel>
    <MudTabPanel Text="Picking Process">
        @foreach (var pickingList in FilteredPickingLists.Where(pl => pl.Status == PickingListStatus.Pending || pl.Status == PickingListStatus.InProgress || pl.Status == PickingListStatus.OnHold))
        {
            <MudPaper Class="pa-4 rounded-lg mb-4">
                <div class="d-flex justify-space-between align-center">
                    <div>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.QrCode2" Class="mr-2" />
                            <MudText Typo="Typo.h6">@pickingList.SalesOrderNumber - Picking Process</MudText>
                        </div>
                        <MudText Typo="Typo.body2">@pickingList.Customer?.CustomerName • @pickingList.Branch?.Name • @pickingList.DestinationRegion?.Name</MudText>
                    </div>
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SetActivePickingList(pickingList))" Disabled="@(ActivePickingListId == pickingList.Id || (pickingList.Status != PickingListStatus.Pending && pickingList.Status != PickingListStatus.InProgress))">
                            @(ActivePickingListId == pickingList.Id || pickingList.Status == PickingListStatus.InProgress ? "In Process" : "Initiate Process")
                        </MudButton>
                        <MudChip T="string" Color="@(GetStatusColor(pickingList.Status))">@pickingList.Status.ToString()</MudChip>
                        <MudChip T="string" Color="@(GetPriorityColor(pickingList.Priority))" Class="ml-2">@GetPriorityText(pickingList.Priority)</MudChip>
                    </div>
                </div>

                <div class="mt-4 pa-4" style="background-color: #E8F5E9; border-radius: 8px;">
                    <div class="d-flex justify-space-between align-center">
                        <div>
                            <MudText Typo="Typo.h6">Picking Progress</MudText>
                            <MudText Typo="Typo.body2">@GetPickedItemsCount(pickingList) of @GetTotalLineItems(pickingList) items picked</MudText>
                        </div>
                        <div style="width: 200px;">
                            <MudProgressLinear Color="Color.Success" Value="@GetPickingProgress(pickingList)" />
                        </div>
                    </div>
                </div>

                @foreach (var item in pickingList.Items.Where(i => i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil)))
                {
                    <MudPaper Class="d-flex align-center pa-4 mt-4 rounded-lg" Elevation="0" Style="@(item.Picked ? "border: 1px solid #C8E6C9;" : "border: 1px solid #FFECB3;")">
                        <MudCheckBox T="bool" Value="@(IsSelected(pickingList.Id, item.Id))" ValueChanged="@(isChecked => SetSelected(pickingList.Id, item.Id, isChecked))" Disabled="@(item.Picked || ActivePickingListId != pickingList.Id)"></MudCheckBox>
                        <div class="flex-grow-1 ml-4">
                            <MudText Typo="Typo.h6">@item.ItemDescription</MudText>
                            <MudText Typo="Typo.body2">@item.Width" x @item.Length" • Qty: @item.Quantity • @item.Weight lbs</MudText>
                            <div class="d-flex align-center mt-2">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-1" />
                                <MudText Typo="Typo.body2">Location: @item.Machine?.Name</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Layers" Class="ml-4 mr-1" />
                                <MudText Typo="Typo.body2">Coil: @item.ItemId</MudText>
                            </div>
                            @if (item.Picked)
                            {
                                <div class="d-flex align-center mt-2" style="color: #2E7D32;">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-1" />
                                    <MudText Typo="Typo.body2">Picked by @item.PickedBy?.UserName at @item.PickedAt?.ToShortTimeString()</MudText>
                                </div>
                            }
                        </div>
                        <div>
                            @if (ActivePickingListId == pickingList.Id && item.Status == PickingLineStatus.Pending && !item.Picked)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => StartPickTask(item))">Start Pick</MudButton>
                            }
                            else if (item.Status == PickingLineStatus.InProgress)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => PausePick(item))">Pause</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => CompletePick(item))" Class="ml-2">Complete</MudButton>
                            }
                            else if (item.Status == PickingLineStatus.Paused)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => ResumePick(item))">Resume</MudButton>
                            }
                            else if (item.Status == PickingLineStatus.Picked || item.Picked)
                            {
                                <MudChip T="string" Icon="@Icons.Material.Filled.Check" Color="Color.Success">Picked</MudChip>
                            }
                        </div>
                    </MudPaper>
                }
                <div class="d-flex justify-end mt-4">
                    <MudText Typo="Typo.body1" Class="mr-4">Total Weight: @GetTotalWeight(pickingList).ToString("N2") lbs</MudText>
                    @if (pickingList.Status == PickingListStatus.OnHold)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="@(() => ResumeList(pickingList))" Class="mr-2">Resume List</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="@(() => PauseList(pickingList))" Class="mr-2">Pause List</MudButton>
                    }
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => CompletePicking(pickingList))" Disabled="@(!HasSelections(pickingList.Id))">Complete Picking</MudButton>
                </div>
            </MudPaper>
        }
    </MudTabPanel>
    <MudTabPanel Text="Packing Process">
        @foreach (var pickingList in FilteredPickingLists.Where(pl => pl.Items.Any(i => i.Picked || i.Packed)))
        {
            <MudPaper Class="pa-4 rounded-lg mb-4">
                <div class="d-flex justify-space-between align-center">
                    <div>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.QrCode2" Class="mr-2" />
                            <MudText Typo="Typo.h6">@pickingList.SalesOrderNumber - Packing Process</MudText>
                        </div>
                        <MudText Typo="Typo.body2">@pickingList.Customer?.CustomerName • @pickingList.Branch?.Name • @pickingList.DestinationRegion?.Name</MudText>
                    </div>
                    <div>
                        <MudChip T="string" Color="@(GetStatusColor(pickingList.Status))">@pickingList.Status.ToString()</MudChip>
                        <MudChip T="string" Color="@(GetPriorityColor(pickingList.Priority))" Class="ml-2">@GetPriorityText(pickingList.Priority)</MudChip>
                    </div>
                </div>

                <div class="mt-4 pa-4" style="background-color: #E3F2FD; border-radius: 8px;">
                    <div class="d-flex justify-space-between align-center">
                        <div>
                            <MudText Typo="Typo.h6">Packing Progress</MudText>
                            <MudText Typo="Typo.body2">@GetPackedItemsCount(pickingList) of @GetTotalLineItems(pickingList) items packed</MudText>
                        </div>
                        <div style="width: 200px;">
                            <MudProgressLinear Color="Color.Info" Value="@GetPackingProgress(pickingList)" />
                        </div>
                    </div>
                </div>

                @foreach (var item in pickingList.Items.Where(i => i.Picked && i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil)))
                {
                    <MudPaper Class="d-flex align-center pa-4 mt-4 rounded-lg" Elevation="0" Style="@(item.Packed ? "border: 1px solid #BBDEFB;" : "border: 1px solid #FFECB3;")">
                        <div class="flex-grow-1">
                            <MudText Typo="Typo.h6">@item.ItemDescription</MudText>
                            <MudText Typo="Typo.body2">@item.Width" x @item.Length" • Qty: @item.Quantity • @item.Weight lbs</MudText>
                            <div class="d-flex align-center mt-2">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-1" />
                                <MudText Typo="Typo.body2">Location: @item.Machine?.Name</MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Layers" Class="ml-4 mr-1" />
                                <MudText Typo="Typo.body2">Coil: @item.ItemId</MudText>
                            </div>
                            @if (item.Packed)
                            {
                                <div class="d-flex align-center mt-2" style="color: #0D47A1;">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-1" />
                                    <MudText Typo="Typo.body2">Packed by @item.PackedBy?.UserName at @item.PackedAt?.ToShortTimeString()</MudText>
                                </div>
                            }
                        </div>
                        <div>
                            @if (item.Status == PickingLineStatus.Picked && !item.Packed)
                            {
                                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.QrCodeScanner" Class="mr-2">Scan</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => StartPackTask(item))">Start Pack</MudButton>
                            }
                            else if (item.Status == PickingLineStatus.InProgress)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(() => PausePack(item))">Pause</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => CompletePack(item))" Class="ml-2">Complete</MudButton>
                            }
                            else if (item.Status == PickingLineStatus.Paused)
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => ResumePack(item))">Resume</MudButton>
                            }
                            else if (item.Status == PickingLineStatus.Packed || item.Packed)
                            {
                                <MudChip T="string" Icon="@Icons.Material.Filled.Check" Color="Color.Success">Packed</MudChip>
                            }
                        </div>
                    </MudPaper>
                }
                <div class="d-flex justify-end mt-4">
                    <MudText Typo="Typo.body1" Class="mr-4">Total Weight: @GetTotalWeight(pickingList).ToString("N2") lbs</MudText>
                    @if (pickingList.Status == PickingListStatus.OnHold)
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="@(() => ResumeList(pickingList))" Class="mr-2">Resume List</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="@(() => PauseList(pickingList))" Class="mr-2">Pause List</MudButton>
                    }
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => CompletePacking(pickingList))" Disabled="@(GetPackedItemsCount(pickingList) == 0)">Complete Packing</MudButton>
                </div>
            </MudPaper>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private List<PickingList> _pickingLists = new();
    private List<DestinationRegion> _destinations = new();
    private string? _userId;
    private string _searchTerm = "";
    private int? _selectedDestinationRegionId;
    private PickingListStatus? _selectedStatus;
    private MachineCategory? _selectedMachineCategory;
    private int? ActivePickingListId;
    private Dictionary<int, HashSet<int>> SelectedItems = new();

    private bool HasSelections(int pickingListId)
        => SelectedItems.TryGetValue(pickingListId, out var set) && set.Count > 0;

    private bool IsSelected(int pickingListId, int itemId)
        => SelectedItems.TryGetValue(pickingListId, out var set) && set.Contains(itemId);

    private void SetSelected(int pickingListId, int itemId, bool isChecked)
    {
        if (!SelectedItems.TryGetValue(pickingListId, out var set))
        {
            set = new HashSet<int>();
            SelectedItems[pickingListId] = set;
        }

        if (isChecked)
        {
            set.Add(itemId);
        }
        else
        {
            set.Remove(itemId);
        }

        _ = InvokeAsync(StateHasChanged);
    }


    private List<PickingList> FilteredPickingLists
    {
        get
        {
            var lists = _pickingLists.AsQueryable();

            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                // If searching, first filter by search term across all lists
                var searchFilteredLists = lists.Where(pl =>
                    pl.SalesOrderNumber.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (pl.Customer != null && pl.Customer.CustomerName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)));

                // If the search is for a sales order, return it regardless of status
                if (int.TryParse(_searchTerm, out _) || _searchTerm.StartsWith("SO", StringComparison.OrdinalIgnoreCase))
                {
                     return searchFilteredLists.ToList();
                }

                lists = searchFilteredLists;
            }

            // Apply status filter only if not searching for a specific sales order
            if (string.IsNullOrWhiteSpace(_searchTerm) || !(int.TryParse(_searchTerm, out _) || _searchTerm.StartsWith("SO", StringComparison.OrdinalIgnoreCase)))
            {
                if (!_selectedStatus.HasValue)
                {
                    lists = lists.Where(pl => pl.Status != PickingListStatus.Completed);
                }
                else
                {
                    lists = lists.Where(pl => pl.Status == _selectedStatus.Value);
                }
            }


            if (_selectedDestinationRegionId.HasValue)
            {
                lists = lists.Where(pl => pl.DestinationRegionId == _selectedDestinationRegionId.Value);
            }

            if (_selectedMachineCategory.HasValue)
            {
                lists = lists.Where(pl => pl.Items.Any(i => i.Machine != null && i.Machine.Category == _selectedMachineCategory.Value));
            }

            // Exclude lists where all items assigned to Sheet or Coil are packed
            lists = lists.Where(pl =>
                !pl.Items
                    .Where(i => i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil))
                    .All(i => i.Status == PickingLineStatus.Packed)
            );

            return lists.ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        await LoadData();
        _destinations = await DestinationRegionService.GetDestinationRegionsAsync();
    }

    private MudBlazor.Color GetPriorityColor(int priority)
    {
        return priority switch
        {
            1 => MudBlazor.Color.Error,
            2 => MudBlazor.Color.Warning,
            3 => MudBlazor.Color.Info,
            _ => MudBlazor.Color.Default
        };
    }

    private string GetPriorityText(int priority)
    {
        return priority switch
        {
            1 => "Urgent",
            2 => "High",
            3 => "Normal",
            _ => "Low"
        };
    }

    private MudBlazor.Color GetStatusColor(PickingListStatus status)
    {
        return status switch
        {
            PickingListStatus.Pending => MudBlazor.Color.Default,
            PickingListStatus.InProgress => MudBlazor.Color.Warning,
            PickingListStatus.OnHold => MudBlazor.Color.Info,
            PickingListStatus.Picked => MudBlazor.Color.Success,
            PickingListStatus.Completed => MudBlazor.Color.Primary,
            _ => MudBlazor.Color.Default
        };
    }

    private async Task LoadData()
    {
        _pickingLists = await PickingListService.GetAsync();
        StateHasChanged();
    }

    private async Task SetActivePickingList(PickingList pickingList)
    {
        ActivePickingListId = pickingList.Id;
        if (pickingList.Status == PickingListStatus.Pending)
        {
            await PickingListService.InitiatePickingListProcessAsync(pickingList.Id, _userId!);
            await LoadData();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task StartPickTask(PickingListItem item)
    {
        await PickingListService.StartPickTaskAsync(item.Id, _userId!);
        await LoadData();
    }

    private async Task PausePick(PickingListItem item)
    {
        await PickingListService.PauseTaskAsync(item.Id, TaskType.Picking, _userId!);
        await LoadData();
    }

    private async Task ResumePick(PickingListItem item)
    {
        await PickingListService.ResumeTaskAsync(item.Id, TaskType.Picking, _userId!);
        await LoadData();
    }

    private async Task CompletePick(PickingListItem item)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Do you want to confirm you have picked {item.ItemDescription}?",
            ["ButtonText"] = "Confirm",
            ["Color"] = Color.Success
        };

        var dialog = DialogService.Show<MudMessageBox>("Confirm Pick", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await PickingListService.ConfirmPickAsync(item.Id, _userId!);
            await LoadData();
            Snackbar.Add($"Item {item.ItemDescription} picked.", Severity.Success);
        }
    }

    private async Task StartPackTask(PickingListItem item)
    {
        await PickingListService.StartPackTaskAsync(item.Id, _userId!);
        await LoadData();
    }

    private async Task CompletePack(PickingListItem item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var dialog = DialogService.Show<ConfirmPackDialog>("Confirm Pack", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is Dictionary<string, object> packData)
            {
                var quantity = (decimal)packData["Quantity"];
                var weight = (decimal)packData["Weight"];
                var notes = (string)packData["Notes"];

                await PickingListService.ConfirmPackAsync(item.Id, _userId!, quantity, weight, notes);
                await LoadData();
                Snackbar.Add($"Item {item.ItemDescription} packed.", Severity.Success);
            }
        }
    }

    private async Task PausePack(PickingListItem item)
    {
        await PickingListService.PauseTaskAsync(item.Id, TaskType.Packing, _userId!);
        await LoadData();
    }

    private async Task ResumePack(PickingListItem item)
    {
        await PickingListService.ResumeTaskAsync(item.Id, TaskType.Packing, _userId!);
        await LoadData();
    }

    private async Task PauseList(PickingList pickingList)
    {
        await PickingListService.PauseListAsync(pickingList.Id, _userId!);
        await LoadData();
    }

    private async Task ResumeList(PickingList pickingList)
    {
        await PickingListService.ResumeListAsync(pickingList.Id, _userId!);
        await LoadData();
    }

    private async Task CompletePicking(PickingList pickingList)
    {
        var selectedItemIds = SelectedItems.ContainsKey(pickingList.Id) ? SelectedItems[pickingList.Id] : new HashSet<int>();
        if (selectedItemIds.Count == 0) return;

        var selectedItems = pickingList.Items.Where(i => selectedItemIds.Contains(i.Id));
        var content = new System.Text.StringBuilder();
        content.AppendLine($"<p>Do you want to confirm you have picked the following {selectedItemIds.Count} items?</p>");
        content.AppendLine("<ul>");
        foreach (var item in selectedItems)
        {
            content.AppendLine($"<li>{item.ItemDescription}</li>");
        }
        content.AppendLine("</ul>");

        var parameters = new DialogParameters
        {
            ["ContentText"] = new MarkupString(content.ToString()),
            ["ButtonText"] = "Confirm",
            ["Color"] = Color.Success
        };

        var dialog = DialogService.Show<MudMessageBox>("Confirm Picks", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var selectedCount = selectedItemIds.Count;
            await PickingListService.ConfirmPicksAsync(selectedItemIds.ToList(), _userId!);
            SelectedItems.Remove(pickingList.Id);
            await LoadData();
            Snackbar.Add($"{selectedCount} items picked.", Severity.Success);
        }
    }

    private async Task CompletePacking(PickingList pickingList)
    {
        await PickingListService.CompletePackingAsync(pickingList.Id, _userId!);
        await LoadData();
    }

    private int GetPackedItemsCount(PickingList pickingList)
    {
        return pickingList.Items.Count(i => i.Packed && i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil));
    }

    private int GetPickedItemsCount(PickingList pickingList)
    {
        return pickingList.Items.Count(i => i.Picked && i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil));
    }

    private int GetTotalLineItems(PickingList pickingList)
    {
        return pickingList.Items.Count(i => i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil));
    }

    private decimal GetTotalWeight(PickingList pickingList)
    {
        return pickingList.Items.Where(i => i.Machine != null && (i.Machine.Category == MachineCategory.Sheet || i.Machine.Category == MachineCategory.Coil)).Sum(i => i.Weight ?? 0);
    }

    private double GetPickingProgress(PickingList pickingList)
    {
        if (pickingList.Items == null || !pickingList.Items.Any())
            return 0;

        var totalItems = GetTotalLineItems(pickingList);
        if (totalItems == 0) return 0;

        var pickedItems = GetPickedItemsCount(pickingList);
        return (double)pickedItems / totalItems * 100;
    }

    private double GetPackingProgress(PickingList pickingList)
    {
        if (pickingList.Items == null || !pickingList.Items.Any())
            return 0;

        var totalItems = GetTotalLineItems(pickingList);
        if (totalItems == 0) return 0;

        var packedItems = GetPackedItemsCount(pickingList);
        return (double)packedItems / totalItems * 100;
    }
}