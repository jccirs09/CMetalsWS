@page "/operations/workorder/create"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Policy = Permissions.WorkOrders.Add)]
@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

<MudPaper Class="pa-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <div>
            <MudText Typo="Typo.h5">Create Work Order</MudText>
            <MudText Color="Color.Dark">Step-by-step work order creation with smart scheduling</MudText>
        </div>
        <MudButton Variant="Variant.Text" OnClick="@(() => Navigation.NavigateTo("/operations/workorders"))" StartIcon="@Icons.Material.Filled.ArrowBack">Back to Work Orders</MudButton>
    </div>

    <MudStepper @ref="_stepper" Linear="true" OnFinish="CreateWorkOrderAsync">
        <MudStep Title="Machine" Description="Select production machine" Completed="@_machineStepCompleted">
            <MudGrid Spacing="2">
                @foreach (var machine in _machines)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="@(Model.MachineId == machine.Id ? "selected-card" : "")" @onclick="@(() => SelectMachine(machine))">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText Typo="Typo.h6">@machine.Name</MudText>
                                        <MudChip T="string" Text="@machine.Category.ToString()" Color="Color.Secondary" />
                                    </MudStack>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Capacity: @(machine.EstimatedLbsPerHour?.ToString("N0")) lbs/hr</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudStep>
        <MudStep Title="Tag" Description="Enter work order tag" Completed="@_tagStepCompleted">
            <MudTextField @bind-Value="Model.TagNumber" Label="Work Order Tag Number" Required="true" HelperText="Use a unique identifier that will be easily recognizable on the shop floor." For="@(() => Model.TagNumber)" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FetchPickingListItemsAsync" Disabled="@string.IsNullOrWhiteSpace(Model.TagNumber)" Class="mt-3">Fetch Available Orders</MudButton>
        </MudStep>
        <MudStep Title="Orders" Description="Select sales orders" Completed="@_ordersStepCompleted">
            @if (_isFetchingOrders)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            else
            {
                <MudTable Items="@_availablePickingListItems" Hover="true">
                    <HeaderContent>
                        <MudTh>Select</MudTh>
                        <MudTh>Picking List #</MudTh>
                        <MudTh>Customer</MudTh>
                        <MudTh>Item Code</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Weight</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Select"><MudCheckBox T="bool" @bind-Checked="@_selectedPickingListItems[context.Id]" @bind-Checked:after="OnSelectionChanged" /></MudTd>
                        <MudTd DataLabel="Picking List #">@context.PickingList?.SalesOrderNumber</MudTd>
                        <MudTd DataLabel="Customer">@context.PickingList?.Customer?.CustomerName</MudTd>
                        <MudTd DataLabel="Item Code">@context.ItemId</MudTd>
                        <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                        <MudTd DataLabel="Weight">@context.Weight?.ToString("N2")</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudStep>
        <MudStep Title="Instructions" Description="Add notes and priority" Completed="true">
            <MudSelect @bind-Value="Model.Priority" Label="Priority" Required="true">
                @foreach (WorkOrderPriority prio in Enum.GetValues(typeof(WorkOrderPriority)))
                {
                    <MudSelectItem Value="@prio">@prio.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="Model.Instructions" Label="Special Instructions" Lines="5" Class="mt-3" />
        </MudStep>
        <MudStep Title="Line Items" Description="Confirm items to produce" Completed="@_lineItemsStepCompleted">
            <MudTable Items="@Model.Items" Hover="true">
                <HeaderContent>
                    <MudTh>Item Code</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>SO#</MudTh>
                    <MudTh>Qty</MudTh>
                    <MudTh>Weight</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Item Code">@context.ItemCode</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="SO#">@context.SalesOrderNumber</MudTd>
                    <MudTd DataLabel="Qty">@context.OrderQuantity</MudTd>
                    <MudTd DataLabel="Weight">@context.OrderWeight?.ToString("N2")</MudTd>
                </RowTemplate>
            </MudTable>
        </MudStep>
        <MudStep Title="Review" Description="Review and create">
            <MudCard>
                <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Work Order Summary</MudText></CardHeaderContent></MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">Machine:</MudItem><MudItem xs="6"><b>@_selectedMachine?.Name</b></MudItem>
                        <MudItem xs="6">Tag Number:</MudItem><MudItem xs="6"><b>@Model.TagNumber</b></MudItem>
                        <MudItem xs="6">Priority:</MudItem><MudItem xs="6"><b>@Model.Priority</b></MudItem>
                        <MudItem xs="6">Total Items:</MudItem><MudItem xs="6"><b>@Model.Items.Count</b></MudItem>
                        <MudItem xs="6">Total Weight:</MudItem><MudItem xs="6"><b>@Model.Items.Sum(i => i.OrderWeight ?? 0).ToString("N2") lbs</b></MudItem>
                    </MudGrid>
                    <MudDatePicker @bind-Date="Model.ScheduledStartDate" Label="Scheduled Start Date" Required="true" Class="mt-4" />
                </MudCardContent>
            </MudCard>
        </MudStep>
    </MudStepper>
</MudPaper>

<style>
    .selected-card {
        border: 2px solid var(--mud-palette-primary);
        transform: scale(1.02);
    }
</style>

@code {
    private MudStepper _stepper = default!;
    private bool _machineStepCompleted;
    private bool _tagStepCompleted;
    private bool _ordersStepCompleted;
    private bool _lineItemsStepCompleted;

    private WorkOrder Model { get; set; } = new();
    private List<Machine> _machines = new();
    private Machine? _selectedMachine;
    private InventoryItem? _parentItem;
    private List<PickingListItem> _availablePickingListItems = new();
    private Dictionary<int, bool> _selectedPickingListItems = new();
    private bool _isFetchingOrders = false;
    private bool _isSaving = false;
    private string? _userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        _userId = user?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.IsActive && (m.Category == MachineCategory.CTL || m.Category == MachineCategory.Slitter))
            .ToList();
    }

    private void SelectMachine(Machine machine)
    {
        _selectedMachine = machine;
        Model.MachineId = machine.Id;
        Model.MachineCategory = machine.Category;
        _machineStepCompleted = true;
        StateHasChanged();
    }

    private async Task FetchPickingListItemsAsync()
    {
        if (Model.MachineId == null || string.IsNullOrWhiteSpace(Model.TagNumber))
        {
            Snackbar.Add("Please select a machine and enter a tag number first.", Severity.Warning);
            return;
        }

        _isFetchingOrders = true;
        StateHasChanged();
        try
        {
            var result = await WorkOrderService.GetPickingListItemsForWorkOrderAsync(Model.MachineCategory, Model.TagNumber);
            _parentItem = result.ParentItem;
            _availablePickingListItems = result.AvailableItems;
            _selectedPickingListItems = _availablePickingListItems.ToDictionary(item => item.Id, item => false);
            Snackbar.Add($"Found {_availablePickingListItems.Count} available order line(s). Parent: {_parentItem?.ItemId}", Severity.Success);
            _tagStepCompleted = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isFetchingOrders = false;
            StateHasChanged();
        }
    }

    private void PopulateLineItems()
    {
        Model.Items.Clear();
        var selectedIds = _selectedPickingListItems.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToHashSet();
        var selectedItems = _availablePickingListItems.Where(item => selectedIds.Contains(item.Id));

        foreach (var plItem in selectedItems)
        {
            Model.Items.Add(new WorkOrderItem
            {
                PickingListItemId = plItem.Id,
                ItemCode = plItem.ItemId,
                Description = plItem.ItemDescription,
                SalesOrderNumber = plItem.PickingList?.SalesOrderNumber,
                CustomerName = plItem.PickingList?.Customer?.CustomerName,
                OrderQuantity = plItem.Quantity,
                OrderWeight = plItem.Weight,
                Width = plItem.Width,
                Length = plItem.Length,
                Unit = plItem.Unit,
                OriginalOrderLineItemId = plItem.Id.ToString()
            });
        }
    }

    private async Task OnSelectionChanged()
    {
        PopulateLineItems();
        _ordersStepCompleted = Model.Items.Any();
        _lineItemsStepCompleted = _ordersStepCompleted;
        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateWorkOrderAsync()
    {
        if (string.IsNullOrEmpty(_userId))
        {
            Snackbar.Add("Cannot identify current user. Please log in again.", Severity.Error);
            return;
        }

        _isSaving = true;
        StateHasChanged();

        try
        {
            if (_parentItem != null)
            {
                Model.ParentItemId = _parentItem.ItemId;
                Model.ParentItemDescription = _parentItem.Description;
                Model.ParentItemWeight = _parentItem.Snapshot;
                Model.ParentItemLocation = _parentItem.Location;
            }

            await WorkOrderService.CreateAsync(Model, _userId);
            Snackbar.Add("Work Order Created Successfully!", Severity.Success);
            Navigation.NavigateTo("/operations/workorders");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating work order: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}