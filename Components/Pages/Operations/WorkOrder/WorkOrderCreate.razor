@page "/operations/workorder/create"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Policy = Permissions.WorkOrders.Add)]
@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="d-flex justify-space-between align-center mb-4">
    <div>
        <MudText Typo="Typo.h5">Create Work Order</MudText>
        <MudText Color="Color.Dark">Simplified work order creation with automatic order matching</MudText>
    </div>
    <MudButton Variant="Variant.Text" OnClick="@(() => Navigation.NavigateTo("/operations/workorders"))" StartIcon="@Icons.Material.Filled.ArrowBack">Back to Work Orders</MudButton>
</div>

<MudGrid>
    <MudItem xs="12" md="8">
        <MudStack Spacing="3">
            @* Machine Setup Section *@
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" GutterBottom="true">Machine Setup</MudText>
                <MudText Color="Color.Dark" GutterBottom="true">Select production machine and enter coil tag number for automatic order matching</MudText>

                <MudText Typo="Typo.subtitle1" Class="mt-4">Production Machine *</MudText>
                <MudChipGroup @bind-SelectedChip="SelectedMachineCategory" T="MachineCategory" Filter="true">
                    <MudChip T="MachineCategory" Value="MachineCategory.CTL">CTL</MudChip>
                    <MudChip T="MachineCategory" Value="MachineCategory.Slitter">Slitter</MudChip>
                </MudChipGroup>

                <MudSelect T="int?" Label="Select a machine" @bind-Value="Model.MachineId" For="@(() => Model.MachineId)" Class="mt-4">
                    @foreach (var machine in _filteredMachines)
                    {
                        <MudSelectItem T="int?" Value="@machine.Id">@machine.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField @bind-Value="Model.TagNumber"
                              Label="Coil Tag Number *"
                              OnDebounceInterval="500"
                              OnDebounce="OnCoilTagChanged"
                              HelperText="Enter master coil tag number to find matching orders."
                              Class="mt-4"
                              Disabled="@(Model.MachineId == null)" />

                @if (_isFetchingCoil)
                {
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="my-4" />
                }
                @else if (_parentItem != null)
                {
                    <MudPaper Outlined="true" Class="pa-3 mt-4">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Material</MudText>
                                <MudText Typo="Typo.body1">@_parentItem.Description</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Gauge/Width</MudText>
                                <MudText Typo="Typo.body1">@($"{_parentItem.Width:N4}")</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Remaining Wt.</MudText>
                                <MudText Typo="Typo.body1">@($"{_parentItem.Snapshot:N0} lbs")</MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.caption">Location</MudText>
                                <MudText Typo="Typo.body1">@_parentItem.Location</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }

                <MudTextField @bind-Value="Model.Instructions"
                              Label="Special Instructions"
                              Lines="3"
                              Class="mt-4"
                              HelperText="Enter any special instructions for operators." />

            </MudPaper>

            @* Picking Items Section *@
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" GutterBottom="true">Picking Items</MudText>
                <MudTable Items="@_availablePickingListItems" Dense="true" Hover="true" Striped="true">
                    <HeaderContent>
                        <MudTh>SO#</MudTh>
                        <MudTh>Customer</MudTh>
                        <MudTh>Item</MudTh>
                        <MudTh>Dimensions</MudTh>
                        <MudTh>Order Wt.</MudTh>
                        <MudTh>Due Date</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="SO#">@context.PickingList?.SalesOrderNumber</MudTd>
                        <MudTd DataLabel="Customer">@context.PickingList?.Customer?.CustomerName</MudTd>
                        <MudTd DataLabel="Item">@context.ItemDescription</MudTd>
                        <MudTd DataLabel="Dimensions">@($"{context.Width:N4} x {context.Length:N4}")</MudTd>
                        <MudTd DataLabel="Order Wt.">@($"{context.Weight:N0} lbs")</MudTd>
                        <MudTd DataLabel="Due Date">@(context.PickingList is not null ? context.PickingList.ShipDate.ToShortDateString() : string.Empty)</MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => AddPickingListItemToWorkOrder(context))">Add</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>Enter a coil tag to see available items.</MudText>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>

            @* Line Items Building Section *@
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6" GutterBottom="true">Line Items Building</MudText>
                <MudTable Items="@Model.Items" Dense="true" Hover="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Item</MudTh>
                        <MudTh>Dimensions (W x L)</MudTh>
                        <MudTh>Qty</MudTh>
                        <MudTh>Weight</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Item">
                            <MudText Typo="Typo.body2">@context.ItemCode</MudText>
                            <MudText Typo="Typo.caption">@context.Description</MudText>
                        </MudTd>
                        <MudTd DataLabel="Dimensions">
                            <MudNumericField @bind-Value="context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" />
                            <MudNumericField @bind-Value="context.Length" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudTd>
                        <MudTd DataLabel="Qty">
                            <MudNumericField @bind-Value="context.OrderQuantity" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudTd>
                        <MudTd DataLabel="Weight">
                            <MudNumericField @bind-Value="context.OrderWeight" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudTd>
                        <MudTd DataLabel="Action">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => RemoveWorkOrderItem(context))" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText>Add items from the picking list above or add a manual stock item below.</MudText>
                    </NoRecordsContent>
                </MudTable>

                <MudCard Class="mt-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Add Stock Item</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_newStockItem.ItemCode" Label="Item Code" Required="true" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_newStockItem.Description" Label="Description" Required="true" />
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudNumericField @bind-Value="_newStockItem.Width" Label="Width" />
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudNumericField @bind-Value="_newStockItem.Length" Label="Length" />
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudNumericField @bind-Value="_newStockItem.OrderQuantity" Label="Quantity" />
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudNumericField @bind-Value="_newStockItem.OrderWeight" Label="Weight" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddStockItem">Add Stock Item</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudPaper>

        </MudStack>
    </MudItem>
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h6" GutterBottom="true">Review & Schedule</MudText>

            <MudGrid Class="mt-4">
                <MudItem xs="6">
                    <MudText Typo="Typo.body2">Line Items:</MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.body2"><b>@Model.Items.Count</b></MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.body2">Total Weight:</MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.body2"><b>@Model.Items.Sum(i => i.OrderWeight ?? 0).ToString("N0") lbs</b></MudText>
                </MudItem>
            </MudGrid>

            <MudSelect @bind-Value="Model.Priority" Label="Priority" Required="true" Class="mt-4">
                @foreach (WorkOrderPriority prio in Enum.GetValues(typeof(WorkOrderPriority)))
                {
                    <MudSelectItem Value="@prio">@prio.ToString()</MudSelectItem>
                }
            </MudSelect>

            <MudDatePicker @bind-Date="Model.ScheduledStartDate" Label="Scheduled Start Date" Required="true" Class="mt-4" />

            <MudDivider Class="my-4" />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true"
                       OnClick="CreateWorkOrderAsync"
                       Disabled="@(!Model.Items.Any() || Model.MachineId == null || _isSaving)">
                Create Work Order
            </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private WorkOrder Model { get; set; } = new();
    private List<Machine> _machines = new();
    private IEnumerable<Machine> _filteredMachines = new List<Machine>();
    private List<PickingListItem> _availablePickingListItems = new();
    private InventoryItem? _parentItem;
    private bool _isFetchingCoil = false;
    private string? _userId;
    private WorkOrderItem _newStockItem = new() { IsStockItem = true };
    private bool _isSaving = false;

    private MachineCategory? _selectedMachineCategory;
    private MachineCategory? SelectedMachineCategory
    {
        get => _selectedMachineCategory;
        set
        {
            _selectedMachineCategory = value;
            Model.MachineId = null; // Reset machine selection
            if (_selectedMachineCategory.HasValue)
            {
                Model.MachineCategory = _selectedMachineCategory.Value;
                _filteredMachines = _machines.Where(m => m.Category == _selectedMachineCategory.Value);
            }
            else
            {
                _filteredMachines = new List<Machine>();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        _userId = user?.Id;

        _machines = (await MachineService.GetMachinesAsync())
            .Where(m => m.IsActive && (m.Category == MachineCategory.CTL || m.Category == MachineCategory.Slitter))
            .ToList();
    }

    private async Task OnCoilTagChanged()
    {
        if (string.IsNullOrWhiteSpace(Model.TagNumber) || Model.MachineId == null)
        {
            _parentItem = null;
            _availablePickingListItems.Clear();
            StateHasChanged();
            return;
        }

        _isFetchingCoil = true;
        StateHasChanged();

        try
        {
            var result = await WorkOrderService.GetPickingListItemsForWorkOrderAsync(Model.MachineCategory, Model.TagNumber);
            _parentItem = result.ParentItem;

            if (Model.MachineCategory == MachineCategory.Slitter)
            {
                // For Slitter, order by priority then due date
                _availablePickingListItems = result.AvailableItems
                    .OrderBy(i => i.PickingList?.Priority)
                    .ThenBy(i => i.PickingList?.ShipDate)
                    .ToList();
            }
            else
            {
                // For CTL, order by description or another default
                _availablePickingListItems = result.AvailableItems
                    .OrderBy(i => i.ItemDescription)
                    .ToList();
            }

            if (_parentItem == null)
            {
                Snackbar.Add("Coil tag not found or no matching orders available.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error fetching coil data: {ex.Message}", Severity.Error);
            _parentItem = null;
            _availablePickingListItems.Clear();
        }
        finally
        {
            _isFetchingCoil = false;
            StateHasChanged();
        }
    }

    private void AddPickingListItemToWorkOrder(PickingListItem item)
    {
        // Prevent adding the same item multiple times
        if (Model.Items.Any(i => i.PickingListItemId == item.Id))
        {
            Snackbar.Add("This item has already been added to the work order.", Severity.Info);
            return;
        }

        var workOrderItem = new WorkOrderItem
        {
            PickingListItemId = item.Id,
            ItemCode = item.ItemId,
            Description = item.ItemDescription,
            SalesOrderNumber = item.PickingList?.SalesOrderNumber,
            CustomerName = item.PickingList?.Customer?.CustomerName,
            OrderQuantity = item.Quantity,
            OrderWeight = item.Weight,
            Width = item.Width,
            Length = item.Length,
            Unit = item.Unit,
            OriginalOrderLineItemId = item.Id.ToString()
        };

        Model.Items.Add(workOrderItem);
        _availablePickingListItems.Remove(item); // Remove from available list
        StateHasChanged();
    }

    private void RemoveWorkOrderItem(WorkOrderItem item)
    {
        Model.Items.Remove(item);

        // If the item came from a picking list, add it back to the available list
        if (item.PickingListItemId.HasValue)
        {
            // This is a simplified approach. A better approach would be to re-fetch the original PickingListItem
            // For now, we assume we have enough info to re-create a representation or we find it
            // This part might need adjustment based on how PickingListItem is structured and if we stored it.
            // For this implementation, we will assume we cannot add it back to the list since we don't have the full object.
            // A better implementation would be to not remove it from the available list until the WO is saved.
        }

        StateHasChanged();
    }

    private void AddStockItem()
    {
        if (string.IsNullOrWhiteSpace(_newStockItem.ItemCode) || string.IsNullOrWhiteSpace(_newStockItem.Description))
        {
            Snackbar.Add("Item Code and Description are required for stock items.", Severity.Warning);
            return;
        }

        Model.Items.Add(_newStockItem);
        _newStockItem = new() { IsStockItem = true }; // Reset for next entry
        StateHasChanged();
    }

    private async Task CreateWorkOrderAsync()
    {
        if (string.IsNullOrEmpty(_userId))
        {
            Snackbar.Add("Cannot identify current user. Please log in again.", Severity.Error);
            return;
        }

        _isSaving = true;
        StateHasChanged();

        try
        {
            if (_parentItem != null)
            {
                Model.ParentItemId = _parentItem.ItemId;
                Model.ParentItemDescription = _parentItem.Description;
                Model.ParentItemWeight = _parentItem.Snapshot;
                Model.ParentItemLocation = _parentItem.Location;
            }

            await WorkOrderService.CreateAsync(Model, _userId);
            Snackbar.Add("Work Order Created Successfully!", Severity.Success);
            Navigation.NavigateTo("/operations/workorders");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating work order: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}
