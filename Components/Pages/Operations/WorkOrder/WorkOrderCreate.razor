@page "/operations/workorder/create"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Policy = Permissions.WorkOrders.Add)]
@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ItemRelationshipService ItemRelationshipService
@inject WorkOrderCreationStateService StateService
@implements IDisposable

<MudPaper Class="pa-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <div>
            <MudText Typo="Typo.h5">Create Work Order</MudText>
            <MudText Color="Color.Dark">Step-by-step work order creation with smart scheduling</MudText>
        </div>
        <MudButton Variant="Variant.Text" OnClick="@(() => Navigation.NavigateTo("/operations/workorders"))" StartIcon="@Icons.Material.Filled.ArrowBack">Back to Work Orders</MudButton>
    </div>

    <MudStepper @ref="_stepper" Linear="true" OnFinish="CreateWorkOrderAsync">
        <MudStep Title="Machine" Description="Select production machine" Completed="@_machineStepCompleted">
            <MudGrid Spacing="2">
                @foreach (var machine in StateService.Machines)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="@(StateService.Model.MachineId == machine.Id ? "selected-card" : "")" @onclick="@(() => SelectMachine(machine))">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudText Typo="Typo.h6">@machine.Name</MudText>
                                        <MudChip T="string" Text="@machine.Category.ToString()" Color="Color.Secondary" />
                                    </MudStack>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Typo="Typo.body2">Capacity: @(machine.EstimatedLbsPerHour?.ToString("N0")) lbs/hr</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudStep>
        <MudStep Title="Tag" Description="Enter work order tag" Completed="@_tagStepCompleted">
            <MudTextField @bind-Value="StateService.Model.TagNumber" Label="Work Order Tag Number" Required="true" HelperText="Use a unique identifier that will be easily recognizable on the shop floor." For="@(() => StateService.Model.TagNumber)" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="FetchPickingListItemsAsync" Disabled="@string.IsNullOrWhiteSpace(StateService.Model.TagNumber)" Class="mt-3">Fetch Available Orders</MudButton>
        </MudStep>
        <MudStep Title="Orders" Description="Select sales orders" Completed="@_ordersStepCompleted">
            @if (_isFetchingOrders)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            else
            {
                <MudTable Items="@StateService.AvailablePickingListItems" Hover="true" MultiSelection="true" @bind-SelectedItems="StateService.SelectedSourceItems">
                    <HeaderContent>
                        <MudTh>Picking List #</MudTh>
                        <MudTh>Customer</MudTh>
                        <MudTh>Item Code</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Size</MudTh>
                        <MudTh>Weight</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Picking List #">@context.PickingList?.SalesOrderNumber</MudTd>
                        <MudTd DataLabel="Customer">@context.PickingList?.Customer?.CustomerName</MudTd>
                        <MudTd DataLabel="Item Code">@context.ItemId</MudTd>
                        <MudTd DataLabel="Description">@context.ItemDescription</MudTd>
                        <MudTd DataLabel="Size">@($"{context.Width?.ToString("N2")} x {context.Length?.ToString("N2")}")</MudTd>
                        <MudTd DataLabel="Weight">@context.Weight?.ToString("N2")</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudStep>
        <MudStep Title="Instructions" Description="Add notes and priority" Completed="true">
            <MudSelect @bind-Value="StateService.Model.Priority" Label="Priority" Required="true">
                @foreach (WorkOrderPriority prio in Enum.GetValues(typeof(WorkOrderPriority)))
                {
                    <MudSelectItem Value="@prio">@prio.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="StateService.Model.Instructions" Label="Special Instructions" Lines="5" Class="mt-3" />
        </MudStep>
        <MudStep Title="Line Items" Description="Confirm items to produce" Completed="@_lineItemsStepCompleted" OnActivate="PopulateLineItems">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Create Production Line</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (StateService.SelectedSourceItems.Any())
                    {
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText>Select a source order line and specify the quantity to produce.</MudText>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="StateService.SelectedSourceIdForNewLine" Label="Source Order" For="@(() => StateService.SelectedSourceIdForNewLine)" Required="true">
                                    @foreach (var sourceItem in StateService.SelectedSourceItems)
                                    {
                                        var remainingQty = sourceItem.Quantity - StateService.Model.Items.Where(i => i.OriginalOrderLineItemId == sourceItem.Id.ToString()).Sum(i => i.OrderQuantity ?? 0m);
                                        if (remainingQty > 0)
                                        {
                                            <MudSelectItem Value="@sourceItem.Id">@($"{sourceItem.ItemId} ({remainingQty} of {sourceItem.Quantity} remaining)")</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <MudNumericField @bind-Value="StateService.NewProductionLine.OrderQuantity" Label="Quantity" For="@(() => StateService.NewProductionLine.OrderQuantity)" Required="true" />
                            </MudItem>
                            <MudItem xs="12" sm="3" Class="d-flex align-end">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddProductionLine" Disabled="@(StateService.SelectedSourceIdForNewLine == 0)">Add Line</MudButton>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudText>Select one or more orders in the previous step to create production lines.</MudText>
                    }
                </MudCardContent>
            </MudCard>

            <MudTable Items="@StateService.Model.Items" Hover="true" Class="mb-4">
                <HeaderContent>
                    <MudTh>Item Code</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>SO#</MudTh>
                    <MudTh>Size</MudTh>
                    <MudTh>Qty</MudTh>
                    <MudTh>Weight</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Item Code">@context.ItemCode</MudTd>
                    <MudTd DataLabel="Description">@context.Description</MudTd>
                    <MudTd DataLabel="SO#">@context.SalesOrderNumber</MudTd>
                    <MudTd DataLabel="Size">@($"{context.Width?.ToString("N2")} x {context.Length?.ToString("N2")}")</MudTd>
                    <MudTd DataLabel="Qty">@context.OrderQuantity</MudTd>
                    <MudTd DataLabel="Weight">@context.OrderWeight?.ToString("N2")</MudTd>
                    <MudTd DataLabel="Actions">
                        @if (context.IsStockItem)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditStockItem(context))" />
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteLineItem(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudExpansionPanels>
                <MudExpansionPanel Text="Add Stock Item">
                    <MudCard Class="mt-4">
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="StateService.NewStockItem.ItemCode" Label="Item Code" Required="true" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="StateService.NewStockItem.Description" Label="Description" Required="true" />
                                </MudItem>
                                <MudItem xs="12" sm="3">
                                    <MudNumericField @bind-Value="StateService.NewStockItem.Width" Label="Width" />
                                </MudItem>
                                <MudItem xs="12" sm="3">
                                    <MudNumericField @bind-Value="StateService.NewStockItem.Length" Label="Length" />
                                </MudItem>
                                <MudItem xs="12" sm="3">
                                    <MudNumericField @bind-Value="StateService.NewStockItem.OrderQuantity" Label="Quantity" />
                                </MudItem>
                                <MudItem xs="12" sm="3">
                                    <MudNumericField @bind-Value="StateService.NewStockItem.OrderWeight" Label="Weight" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddStockItem">@(StateService.EditingStockItem == null ? "Add Stock Item" : "Update Stock Item")</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudStep>
        <MudStep Title="Review" Description="Review and create">
            <MudCard>
                <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Work Order Summary</MudText></CardHeaderContent></MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">Machine:</MudItem><MudItem xs="6"><b>@StateService.SelectedMachine?.Name</b></MudItem>
                        <MudItem xs="6">Tag Number:</MudItem><MudItem xs="6"><b>@StateService.Model.TagNumber</b></MudItem>
                        <MudItem xs="6">Priority:</MudItem><MudItem xs="6"><b>@StateService.Model.Priority</b></MudItem>
                        <MudItem xs="6">Total Items:</MudItem><MudItem xs="6"><b>@StateService.Model.Items.Count</b></MudItem>
                        <MudItem xs="6">Total Weight:</MudItem><MudItem xs="6"><b>@StateService.Model.Items.Sum(i => i.OrderWeight ?? 0).ToString("N2") lbs</b></MudItem>
                    </MudGrid>
                    <MudDatePicker @bind-Date="StateService.Model.ScheduledStartDate" Label="Scheduled Start Date" Required="true" Class="mt-4" />
                </MudCardContent>
            </MudCard>
        </MudStep>
    </MudStepper>
</MudPaper>

<style>
    .selected-card {
        border: 2px solid var(--mud-palette-primary);
        transform: scale(1.02);
    }
</style>

@code {
    private MudStepper _stepper = default!;
    private bool _machineStepCompleted;
    private bool _tagStepCompleted;
    private bool _ordersStepCompleted;
    private bool _lineItemsStepCompleted;

    // Local component state not suitable for the state service
    private bool _isFetchingOrders = false;
    private bool _isSaving = false;
    private string? _userId;

    public void Dispose()
    {
        // On leaving the page, reset the shared state to avoid data leakage
        StateService.Reset();
    }

    private void EditStockItem(WorkOrderItem itemToEdit)
    {
        StateService.EditingStockItem = itemToEdit;
        StateService.NewStockItem = new WorkOrderItem
        {
            ItemCode = itemToEdit.ItemCode,
            Description = itemToEdit.Description,
            Width = itemToEdit.Width,
            Length = itemToEdit.Length,
            OrderQuantity = itemToEdit.OrderQuantity,
            OrderWeight = itemToEdit.OrderWeight,
            IsStockItem = true
        };
        StateService.Model.Items.Remove(itemToEdit);
        StateHasChanged();
    }

    private void DeleteLineItem(WorkOrderItem itemToDelete)
    {
        StateService.Model.Items.Remove(itemToDelete);
        _lineItemsStepCompleted = StateService.Model.Items.Any();
        StateHasChanged();
    }

    private void AddProductionLine()
    {
        if (StateService.SelectedSourceIdForNewLine == 0 || StateService.NewProductionLine.OrderQuantity == null || StateService.NewProductionLine.OrderQuantity <= 0)
        {
            Snackbar.Add("Please select a source order and enter a valid quantity.", Severity.Warning);
            return;
        }

        var sourceItem = StateService.SelectedSourceItems.FirstOrDefault(i => i.Id == StateService.SelectedSourceIdForNewLine);
        if (sourceItem == null)
        {
            Snackbar.Add("Could not find the selected source item.", Severity.Error);
            return;
        }

        var existingQty = StateService.Model.Items.Where(i => i.OriginalOrderLineItemId == sourceItem.Id.ToString()).Sum(i => i.OrderQuantity ?? 0m);
        var remainingQty = sourceItem.Quantity - existingQty;

        if (StateService.NewProductionLine.OrderQuantity > remainingQty)
        {
            Snackbar.Add($"Quantity cannot exceed the remaining quantity of {remainingQty}.", Severity.Warning);
            return;
        }

        var weightPerPiece = sourceItem.Quantity == 0m ? 0m : sourceItem.Weight / sourceItem.Quantity;

        var newLine = new WorkOrderItem
        {
            PickingListItemId = sourceItem.Id,
            ItemCode = sourceItem.ItemId,
            Description = sourceItem.ItemDescription,
            SalesOrderNumber = sourceItem.PickingList?.SalesOrderNumber,
            CustomerName = sourceItem.PickingList?.Customer?.CustomerName,
            OrderQuantity = StateService.NewProductionLine.OrderQuantity,
            OrderWeight = StateService.NewProductionLine.OrderQuantity * weightPerPiece,
            Width = sourceItem.Width,
            Length = sourceItem.Length,
            Unit = sourceItem.Unit,
            OriginalOrderLineItemId = sourceItem.Id.ToString(),
            IsStockItem = false
        };

        StateService.Model.Items.Add(newLine);
        StateService.NewProductionLine = new(); // Reset for next entry
        _lineItemsStepCompleted = StateService.Model.Items.Any();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        _userId = user?.Id;

        if (!StateService.Machines.Any())
        {
            StateService.Machines = (await MachineService.GetMachinesAsync())
                .Where(m => m.IsActive && (m.Category == MachineCategory.CTL || m.Category == MachineCategory.Slitter))
                .ToList();
        }
    }

    private void SelectMachine(Machine machine)
    {
        StateService.SelectedMachine = machine;
        StateService.Model.MachineId = machine.Id;
        StateService.Model.MachineCategory = machine.Category;
        _machineStepCompleted = true;
        StateHasChanged();
    }

    private async Task FetchPickingListItemsAsync()
    {
        if (StateService.Model.MachineId == null || string.IsNullOrWhiteSpace(StateService.Model.TagNumber))
        {
            Snackbar.Add("Please select a machine and enter a tag number first.", Severity.Warning);
            return;
        }

        _isFetchingOrders = true;
        StateHasChanged();
        try
        {
            var result = await WorkOrderService.GetPickingListItemsForWorkOrderAsync(StateService.Model.MachineCategory, StateService.Model.TagNumber);
            StateService.ParentItem = result.ParentItem;
            StateService.AvailablePickingListItems = result.AvailableItems;
            Snackbar.Add($"Found {StateService.AvailablePickingListItems.Count} available order line(s). Parent: {StateService.ParentItem?.ItemId}", Severity.Success);
            _tagStepCompleted = true;

            if (StateService.ParentItem != null)
            {
                var stockItemCode = StateService.ParentItem.ItemId;
                var stockItemDescription = StateService.ParentItem.Description;

                if (StateService.Model.MachineCategory == MachineCategory.CTL)
                {
                    var children = await ItemRelationshipService.GetChildrenAsync(StateService.ParentItem.ItemId);
                    if (children.Any())
                    {
                        var sheetItem = children.First();
                        stockItemCode = sheetItem.ItemCode;
                        stockItemDescription = sheetItem.Description;
                    }
                    else
                    {
                        Snackbar.Add($"No sheet item mapping found for coil '{StateService.ParentItem.ItemId}'. Please check relationships.", Severity.Warning);
                    }
                }

                StateService.NewStockItem = new()
                {
                    IsStockItem = true,
                    ItemCode = stockItemCode,
                    Description = stockItemDescription,
                    Width = StateService.ParentItem.Width
                };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isFetchingOrders = false;
            StateHasChanged();
        }
    }

    private void PopulateLineItems()
    {
        // StateService.SelectedSourceItems is now populated directly by the MudTable's @bind-SelectedItems.
        // This method's purpose is now to sync the created production lines with the selection.

        // Remove production lines that are no longer selected in the previous step
        var currentSourceIds = StateService.SelectedSourceItems.Select(i => i.Id.ToString()).ToHashSet();
        var itemsToRemove = StateService.Model.Items.Where(item => !item.IsStockItem && item.OriginalOrderLineItemId != null && !currentSourceIds.Contains(item.OriginalOrderLineItemId)).ToList();
        foreach (var item in itemsToRemove)
        {
            StateService.Model.Items.Remove(item);
        }

        _ordersStepCompleted = StateService.SelectedSourceItems.Any();
        _lineItemsStepCompleted = StateService.Model.Items.Any();

        // Reset the selection for the new line form if a source is deselected.
        if (StateService.SelectedSourceIdForNewLine != 0 && !StateService.SelectedSourceItems.Any(i => i.Id == StateService.SelectedSourceIdForNewLine))
        {
            StateService.SelectedSourceIdForNewLine = 0;
        }
    }


    private void AddStockItem()
    {
        if (string.IsNullOrWhiteSpace(StateService.NewStockItem.ItemCode) || string.IsNullOrWhiteSpace(StateService.NewStockItem.Description))
        {
            Snackbar.Add("Item Code and Description are required for stock items.", Severity.Warning);
            return;
        }

        StateService.Model.Items.Add(StateService.NewStockItem);

        // Preserve ItemCode and Description for the next stock item
        StateService.NewStockItem = new()
        {
            IsStockItem = true,
            ItemCode = StateService.NewStockItem.ItemCode,
            Description = StateService.NewStockItem.Description
        };

        StateService.EditingStockItem = null;
        _lineItemsStepCompleted = StateService.Model.Items.Any();
        StateHasChanged();
    }

    private async Task CreateWorkOrderAsync()
    {
        if (string.IsNullOrEmpty(_userId))
        {
            Snackbar.Add("Cannot identify current user. Please log in again.", Severity.Error);
            return;
        }

        _isSaving = true;
        StateHasChanged();

        try
        {
            if (StateService.ParentItem != null)
            {
                StateService.Model.ParentItemId = StateService.ParentItem.ItemId;
                StateService.Model.ParentItemDescription = StateService.ParentItem.Description;
                StateService.Model.ParentItemWeight = StateService.ParentItem.Snapshot;
                StateService.Model.ParentItemLocation = StateService.ParentItem.Location;
            }

            await WorkOrderService.CreateAsync(StateService.Model, _userId);
            Snackbar.Add("Work Order Created Successfully!", Severity.Success);
            StateService.Reset();
            Navigation.NavigateTo("/operations/workorders");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating work order: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}