@page "/operations/workorders"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@attribute [Authorize(Policy = Permissions.WorkOrders.View)]
@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject NavigationManager Navigation

<MudPaper Class="pa-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <div>
            <MudText Typo="Typo.h5">Work Orders</MudText>
            <MudText Color="Color.Dark">Manage production work orders across all machines</MudText>
        </div>
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/operations/workorder/manage"))" StartIcon="@Icons.Material.Filled.Add">Create Work Order</MudButton>
        </MudStack>
    </div>

    <div class="d-flex ga-4 my-4">
        <MudTextField @bind-Value="_searchString" Label="Search work orders..." Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" />
        <MudSelect T="WorkOrderStatus?" @bind-Value="_selectedStatus" Label="Filter by status" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true">
            <MudSelectItem T="WorkOrderStatus?" Value="@(null)">All Statuses</MudSelectItem>
            @foreach (WorkOrderStatus status in Enum.GetValues(typeof(WorkOrderStatus)))
            {
                <MudSelectItem T="WorkOrderStatus?" Value="@status">@status.ToString()</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="int?" @bind-Value="_selectedMachineId" Label="Filter by machine" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true">
            <MudSelectItem T="int?" Value="@(null)">All Machines</MudSelectItem>
            @foreach (var machine in _machines)
            {
                <MudSelectItem T="int?" Value="@machine.Id">@machine.Name</MudSelectItem>
            }
        </MudSelect>
    </div>

    <MudTabs @bind-ActivePanelIndex="_activePanelIndex" Elevation="2" Rounded="true" PanelClass="pa-4">
        <MudTabPanel Text="List View" Icon="@Icons.Material.Filled.List">
            <MudDataGrid T="WorkOrder" Items="@FilteredWorkOrders" Dense="true" Striped="true" Hover="true" Bordered="true"
                         Sortable="true" Filterable="false" Groupable="false" RowClick="@((args) => ProcessOrder(args.Item))"
                         Class="mud-table-responsive">
                <Columns>
                    <PropertyColumn Property="x => x.WorkOrderNumber" Title="WO #" Sortable="true" />
                    <TemplateColumn Title="Customer" SortBy="@(new Func<WorkOrder, object>(x => GetMainCustomer(x)))">
                        <CellTemplate>
                            @GetMainCustomer(context.Item)
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Machine" SortBy="@(new Func<WorkOrder, object>(x => x.Machine?.Name ?? x.MachineCategory.ToString()))">
                        <CellTemplate>
                            @(context.Item.Machine?.Name ?? context.Item.MachineCategory.ToString())
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.TagNumber" Title="Tag #" Sortable="true" />
                    <TemplateColumn Title="Weight (lbs)" SortBy="@(new Func<WorkOrder, object>(x => GetTotalWeight(x)))">
                        <CellTemplate>
                            <div style="text-align: right;">@GetTotalWeight(context.Item).ToString("N0")</div>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Items.Count" Title="Items" Sortable="true" />
                    <TemplateColumn Title="Due Date" SortBy="@(new Func<WorkOrder, object>(x => x.DueDate))">
                        <CellTemplate>
                            @(context.Item.DueDate.HasValue ? context.Item.DueDate.Value.ToString("yyyy-MM-dd") : "N/A")
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Status" SortBy="@(new Func<WorkOrder, object>(x => x.Status))">
                        <CellTemplate>
                            <MudChip T="string" Text="@context.Item.Status.ToString()" Color="@GetStatusColor(context.Item.Status)" Size="Size.Small" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Priority" SortBy="@(new Func<WorkOrder, object>(x => x.Priority))">
                        <CellTemplate>
                            <MudChip T="string" Text="@context.Item.Priority.ToString()" Color="@GetPriorityColor(context.Item.Priority)" Size="Size.Small" />
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="" StickyRight="true" >
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowForward" Title="View/Process" Size="Size.Small" OnClick="@(() => ProcessOrder(context.Item))" />
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="WorkOrder" />
                </PagerContent>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Kanban View" Icon="@Icons.Material.Filled.ViewKanban">
            <div class="d-flex ga-4 overflow-x-auto">
                @foreach (WorkOrderStatus status in Enum.GetValues(typeof(WorkOrderStatus)))
                {
                    <div class="kanban-column">
                        <div class="d-flex justify-space-between align-center mb-4">
                            <MudText Typo="Typo.h6">@status.ToString()</MudText>
                            <MudChip T="string" Text="@FilteredWorkOrders.Count(o => o.Status == status).ToString()" Color="Color.Default" />
                        </div>
                        <MudStack Spacing="3">
                            @foreach (var order in FilteredWorkOrders.Where(o => o.Status == status))
                            {
                                <MudCard Class="cursor-pointer" @onclick="@(() => ProcessOrder(order))">
                                    <MudCardContent>
                                        <div class="d-flex justify-space-between mb-2">
                                            <MudChip T="string" Text="@order.WorkOrderNumber" Color="Color.Primary" Size="Size.Small" />
                                            <MudChip T="string" Text="@order.Priority.ToString()" Color="@GetPriorityColor(order.Priority)" Size="Size.Small" />
                                        </div>
                                        <MudChip T="string" Text="@order.TagNumber" Color="Color.Secondary" Size="Size.Small" Class="mb-2" />
                                        <MudText Typo="Typo.body1"><b>@GetMainCustomer(order)</b></MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Dark" Class="mb-2">@GetMainItemDescription(order)</MudText>

                                        <div class="d-flex justify-space-between text-caption">
                                            <span><MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-1" Style="font-size: 1rem;"/>@(order.Machine?.Name ?? order.MachineCategory.ToString())</span>
                                            <span><MudIcon Icon="@Icons.Material.Filled.Scale" Class="mr-1" Style="font-size: 1rem;"/>@GetTotalWeight(order).ToString("N0") lbs</span>
                                        </div>
                                        <div class="d-flex justify-space-between text-caption mt-1">
                                            <span><MudIcon Icon="@Icons.Material.Filled.Factory" Class="mr-1" Style="font-size: 1rem;"/>@order.Branch?.Code</span>
                                            @if(!string.IsNullOrEmpty(order.Operator))
                                            {
                                                <span><MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-1" Style="font-size: 1rem;"/>@order.Operator</span>
                                            }
                                        </div>
                                        <div class="d-flex justify-space-between align-center mt-2 pt-2 border-t-1">
                                            <MudText Typo="Typo.caption">Due: @(order.DueDate.HasValue ? order.DueDate.Value.ToString("d") : "N/A")</MudText>
                                            <span @onclick:stopPropagation="true">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => ProcessOrder(order))" />
                                            </span>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            }
                        </MudStack>
                    </div>
                }
            </div>
        </MudTabPanel>
    </MudTabs>
</MudPaper>

<style>
    .kanban-column {
        min-width: 320px;
        max-width: 320px;
        background-color: var(--mud-palette-background-grey);
        padding: 1rem;
        border-radius: var(--mud-shape-rounded);
    }
    .border-t-1 {
        border-top: 1px solid var(--mud-palette-divider);
    }
</style>

@code {
    private List<WorkOrder> _workOrders = new();
    private List<Machine> _machines = new();
    private int _activePanelIndex = 0;

    private string _searchString = "";
    private WorkOrderStatus? _selectedStatus;
    private int? _selectedMachineId;

    private IEnumerable<WorkOrder> FilteredWorkOrders =>
        _workOrders.Where(order =>
        {
            var searchMatch = string.IsNullOrWhiteSpace(_searchString) ||
                              order.WorkOrderNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                              order.TagNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                              (order.Items != null && order.Items.Any(i => i.CustomerName != null && i.CustomerName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))) ||
                              (order.Items != null && order.Items.Any(i => i.SalesOrderNumber != null && i.SalesOrderNumber.Contains(_searchString, StringComparison.OrdinalIgnoreCase)));

            var statusMatch = !_selectedStatus.HasValue || order.Status == _selectedStatus.Value;
            var machineMatch = !_selectedMachineId.HasValue || order.MachineId == _selectedMachineId.Value;

            return searchMatch && statusMatch && machineMatch;
        }).ToList();

    protected override async Task OnInitializedAsync()
    {
        _workOrders = await WorkOrderService.GetAsync();
        _machines = await MachineService.GetMachinesAsync();
    }

    private string GetMainCustomer(WorkOrder order) => order.Items?.FirstOrDefault()?.CustomerName ?? "N/A";

    private string GetMainItemDescription(WorkOrder order) =>
        order.Items?.Count == 1
            ? order.Items.First().Description
            : $"{order.Items?.Count ?? 0} items";

    private decimal GetTotalWeight(WorkOrder order) => order.Items?.Sum(i => i.OrderWeight ?? 0) ?? 0;

    private Color GetStatusColor(WorkOrderStatus status) => status switch
    {
        WorkOrderStatus.Draft => Color.Default,
        WorkOrderStatus.Pending => Color.Info,
        WorkOrderStatus.InProgress => Color.Success,
        WorkOrderStatus.Awaiting => Color.Warning,
        WorkOrderStatus.Completed => Color.Primary,
        WorkOrderStatus.Canceled => Color.Error,
        _ => Color.Dark
    };

    private Color GetPriorityColor(WorkOrderPriority priority) => priority switch
    {
        WorkOrderPriority.Low => Color.Info,
        WorkOrderPriority.Normal => Color.Success,
        WorkOrderPriority.High => Color.Warning,
        WorkOrderPriority.Urgent => Color.Error,
        _ => Color.Default
    };

    private void ProcessOrder(WorkOrder order)
    {
        Navigation.NavigateTo($"/operations/workorder/manage/{order.Id}");
    }
}