@page "/workorders"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject WorkOrderService WorkOrderService
@inject MachineService MachineService
@inject BranchService BranchService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
        <MudText Typo="Typo.h5">Work Orders</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Href="/work-orders/upload">Upload PDF</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateWorkOrderAsync">New</MudButton>
        <MudButton Variant="Variant.Outlined" OnClick="LoadAsync">Refresh</MudButton>
    </MudStack>

    <MudTable Items="_workOrders" Hover="true" Dense="true" Class="mt-4">
        <HeaderContent>
            <MudTh>WO #</MudTh>
            <MudTh>Branch</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Machine</MudTh>
            <MudTh>Tag</MudTh>
            <MudTh>Due</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Start</MudTh>
            <MudTh>End</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.WorkOrderNumber</MudTd>
            <MudTd>@context.BranchId</MudTd>
            <MudTd>@context.MachineCategory</MudTd>
            <MudTd>@context.Machine?.Name</MudTd>
            <MudTd>@context.TagNumber</MudTd>
            <MudTd>@context.DueDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd>@context.Status</MudTd>
            <MudTd>@(context.ScheduledStartDate?.ToString("yyyy-MM-dd HH:mm"))</MudTd>
            <MudTd>@(context.ScheduledEndDate?.ToString("yyyy-MM-dd HH:mm"))</MudTd>
            <MudTd>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true">
                    <MudMenuItem OnClick="@(() => EditWorkOrderAsync(context))">Edit</MudMenuItem>
                    <MudMenuItem OnClick="@(() => ProcessWorkOrderAsync(context))">Process</MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<WorkOrder> _workOrders = new();
    private List<Machine> _machines = new();
    private List<Branch> _branches = new();
    private bool _isAdmin;
    private int? _userBranchId;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User);
        _isAdmin = auth.User.IsInRole("Admin");
        _userBranchId = user?.BranchId;

        _machines = await MachineService.GetMachinesAsync();
        _branches = await BranchService.GetBranchesAsync();

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var branchFilter = _isAdmin ? null : _userBranchId;
        _workOrders = await WorkOrderService.GetAsync(branchFilter);
        StateHasChanged();
    }

    private async Task CreateWorkOrderAsync()
    {
        var newModel = new WorkOrder
        {
            Status = WorkOrderStatus.Draft,
            DueDate = DateTime.UtcNow.Date.AddDays(1)
        };

        var parameters = new DialogParameters
        {
            ["Model"] = newModel,
            ["Machines"] = _machines,
            ["Branches"] = _branches,
            ["Title"] = "New Work Order",
            ["IsEdit"] = false
        };

        var dialog = await DialogService.ShowAsync<WorkOrderDialog>("New Work Order", parameters, new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true });
        if(dialog is not null)
        {
            var result = await dialog.Result;
            if (result is not null && !result.Canceled && result.Data is WorkOrder model)
            {
                var auth = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = await UserManager.GetUserAsync(auth.User);
                if (user?.Id == null || !user.BranchId.HasValue)
                {
                    Snackbar.Add("Your account has no default branch. Contact admin.", Severity.Error);
                    return;
                }

                await WorkOrderService.CreateAsync(model, user.Id);
                Snackbar.Add("Work order created.", Severity.Success);
                await LoadAsync();
            }
        }
    }

    private async Task EditWorkOrderAsync(WorkOrder wo)
    {
        var clone = new WorkOrder
        {
            Id = wo.Id,
            WorkOrderNumber = wo.WorkOrderNumber,
            TagNumber = wo.TagNumber,
            BranchId = wo.BranchId,
            MachineId = wo.MachineId,
            MachineCategory = wo.MachineCategory,
            DueDate = wo.DueDate,
            Instructions = wo.Instructions,
            Status = wo.Status,
            ScheduledStartDate = wo.ScheduledStartDate,
            ScheduledEndDate = wo.ScheduledEndDate,
            Items = wo.Items.Select(i => new WorkOrderItem
            {
                Id = i.Id,
                WorkOrderId = wo.Id,
                PickingListItemId = i.PickingListItemId,
                ItemCode = i.ItemCode,
                Description = i.Description,
                SalesOrderNumber = i.SalesOrderNumber,
                CustomerName = i.CustomerName,
                OrderQuantity = i.OrderQuantity,
                OrderWeight = i.OrderWeight,
                Width = i.Width,
                Length = i.Length,
                Weight = i.Weight,
                ProducedQuantity = i.ProducedQuantity,
                ProducedWeight = i.ProducedWeight,
                Unit = i.Unit,
                Location = i.Location
            }).ToList()
        };

        var parameters = new DialogParameters
        {
            ["Model"] = clone,
            ["Machines"] = _machines,
            ["Branches"] = _branches,
            ["Title"] = $"Edit {wo.WorkOrderNumber}",
            ["IsEdit"] = true
        };

        var dialog = await DialogService.ShowAsync<WorkOrderDialog>("Edit Work Order", parameters, new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true });
        if(dialog is not null)
        {
            var result = await dialog.Result;
            if (result is not null && !result.Canceled && result.Data is WorkOrder updated)
            {
                var auth = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = await UserManager.GetUserAsync(auth.User);
                var updatedBy = user?.UserName ?? user?.Email ?? "system";

                await WorkOrderService.UpdateAsync(updated, updatedBy);
                Snackbar.Add("Work order updated.", Severity.Success);
                await LoadAsync();
            }
        }
    }

    private async Task SetStatusAsync(int id, WorkOrderStatus status)
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(auth.User);
        var updatedBy = user?.UserName ?? user?.Email ?? "system";

        await WorkOrderService.SetStatusAsync(id, status, updatedBy);
        await LoadAsync();
    }

    private async Task ProcessWorkOrderAsync(WorkOrder wo)
    {
        var parameters = new DialogParameters
        {
            ["Model"] = wo,
            ["Machines"] = _machines,
            ["Branches"] = _branches,
            ["Title"] = $"Process {wo.WorkOrderNumber}",
            ["IsEdit"] = true, // Keep IsEdit to disable tag search
            ["IsProcessing"] = true
        };

        var dialog = await DialogService.ShowAsync<WorkOrderDialog>("Process Work Order", parameters, new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true });
        if(dialog is not null)
        {
            var result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await LoadAsync();
            }
        }
    }
}
