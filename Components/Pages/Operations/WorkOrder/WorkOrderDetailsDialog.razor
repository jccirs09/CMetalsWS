@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@inject NavigationManager Navigation
@inject InventoryService InventoryService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Work Order: @Model.WorkOrderNumber</MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="3">
            <MudGrid>
                <MudItem xs="6">
                    <MudText><b>Machine:</b> @(Model.Machine?.Name ?? "N/A")</MudText>
                </MudItem>
                <MudItem xs="6">
                    <div class="d-flex align-center">
                        <MudText Class="mr-2"><b>Status:</b></MudText>
                        <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(Model.Status)" Text="@Model.Status.ToString()" />
                    </div>
                </MudItem>
                <MudItem xs="6">
                    <MudText><b>Tag:</b> @Model.TagNumber</MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudText><b>Due:</b> @(Model.DueDate.HasValue ? Model.DueDate.Value.ToString("d") : "N/A")</MudText>
                </MudItem>
            </MudGrid>

            @if (_coil is not null)
            {
                <MudPaper Outlined="true" Class="pa-2 mt-2">
                    <MudText Typo="Typo.subtitle2" GutterBottom="true">Coil Details</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText><b>Description:</b> @_coil.Description</MudText>
                        </MudItem>
                        <MudItem xs="6" sm="3">
                            <MudText><b>Weight:</b> @_coil.Snapshot?.ToString("N2") lbs</MudText>
                        </MudItem>
                        <MudItem xs="6" sm="3">
                            <MudText><b>Location:</b> @_coil.Location</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            }

            <MudTable Items="@Model.Items" T="WorkOrderItem" Dense="true" Hover="true" Striped="true" Outlined="true" Class="mt-2">
                <HeaderContent>
                    <MudTh>Customer</MudTh>
                    <MudTh>Sales Order</MudTh>
                    <MudTh>Item</MudTh>
                    <MudTh>Size</MudTh>
                    <MudTh Style="text-align:right">Quantity</MudTh>
                    <MudTh Style="text-align:right">Weight (lbs)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Customer">@context.CustomerName</MudTd>
                    <MudTd DataLabel="Sales Order">@context.SalesOrderNumber</MudTd>
                    <MudTd DataLabel="Item">@context.Description</MudTd>
                    <MudTd DataLabel="Size">@FormatSize(context)</MudTd>
                    <MudTd DataLabel="Quantity" Style="text-align:right">@context.OrderQuantity?.ToString("N0") @context.Unit</MudTd>
                    <MudTd DataLabel="Weight" Style="text-align:right">@context.OrderWeight?.ToString("N2")</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GoToProcessPage">Process Work Order</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public WorkOrder Model { get; set; } = new();

    private InventoryItem? _coil;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Model.TagNumber))
        {
            _coil = await InventoryService.GetByTagNumberAsync(Model.TagNumber);
        }
    }

    private Color GetStatusColor(WorkOrderStatus status) => status switch
    {
        WorkOrderStatus.Draft => Color.Default,
        WorkOrderStatus.Pending => Color.Info,
        WorkOrderStatus.InProgress => Color.Success,
        WorkOrderStatus.Awaiting => Color.Warning,
        WorkOrderStatus.Completed => Color.Primary,
        WorkOrderStatus.Canceled => Color.Error,
        _ => Color.Dark
    };

    private void GoToProcessPage()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    private string FormatSize(WorkOrderItem item)
    {
        if (item.Width.HasValue && item.Length.HasValue)
        {
            return $"{item.Width.Value:G29} x {item.Length.Value:G29}";
        }
        return "N/A";
    }
}