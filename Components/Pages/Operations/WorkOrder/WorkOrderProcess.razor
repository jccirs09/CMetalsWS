@page "/operations/workorder/process/{Id:int}"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Timers
@attribute [Authorize(Policy = Permissions.WorkOrders.Process)]
@implements IDisposable
@inject WorkOrderService WorkOrderService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ITaskAuditEventService AuditEventService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService

<MudPaper Class="pa-4">
    @if (_workOrder == null)
    {
        <div class="d-flex justify-center align-center" style="height: 50vh;">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            <MudText Class="ml-4">Loading Work Order...</MudText>
        </div>
    }
    else
    {
        <!-- Header -->
        <div class="d-flex justify-space-between align-center mb-4">
            <div>
                <div class="d-flex align-center ga-2 mb-1">
                    <MudButton Variant="Variant.Text" OnClick="@(() => Navigation.NavigateTo("/operations/workorders"))" StartIcon="@Icons.Material.Filled.ArrowBack">Back</MudButton>
                    <MudText Typo="Typo.h5">@_workOrder.WorkOrderNumber</MudText>
                    <MudChip Text="@_workOrder.Status.ToString()" Color="@GetStatusColor(_workOrder.Status)" />
                    <MudChip Text="@_workOrder.Priority.ToString()" Color="@GetPriorityColor(_workOrder.Priority)" />
                </div>
                <MudText Class="ml-12">@GetMainCustomer(_workOrder) • @_workOrder.Machine?.Name • @GetTotalWeight(_workOrder).ToString("N0") lbs</MudText>
            </div>
            <div class="d-flex ga-2">
                @if (_workOrder.Status == WorkOrderStatus.Pending || _workOrder.Status == WorkOrderStatus.Awaiting)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="StartOrResumeWorkOrder" StartIcon="@Icons.Material.Filled.PlayArrow">
                        @(_workOrder.Status == WorkOrderStatus.Pending ? "Start Work Order" : "Resume")
                    </MudButton>
                }
                @if (_workOrder.Status == WorkOrderStatus.InProgress)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="PauseWorkOrder" StartIcon="@Icons.Material.Filled.Pause">Pause</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CompleteWorkOrder" StartIcon="@Icons.Material.Filled.CheckCircle">Complete</MudButton>
                }
            </div>
        </div>

        <!-- Body -->
        <MudGrid Spacing="4">
            <MudItem xs="12" md="8">
                <MudStack Spacing="4">
                    <!-- Progress Overview -->
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Progress Overview</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <div class="d-flex justify-space-between mb-2">
                                <MudText>Overall Progress</MudText>
                                <MudText><b>@_overallProgress.ToString("F0")%</b></MudText>
                            </div>
                            <MudProgressLinear Color="Color.Primary" Value="@_overallProgress" />
                            <MudGrid Class="mt-4 text-center">
                                <MudItem xs="3">
                                    <MudText Typo="Typo.h5" Color="Color.Primary">@_elapsedTimeDisplay</MudText>
                                    <MudText Typo="Typo.body2">Elapsed Time</MudText>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudText Typo="Typo.h5">@_workOrder.Items.Sum(i => i.ProducedWeight ?? 0).ToString("N0")</MudText>
                                    <MudText Typo="Typo.body2">Processed (lbs)</MudText>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudText Typo="Typo.h5">@_lbsPerHour.ToString("N0")</MudText>
                                    <MudText Typo="Typo.body2">Rate (lbs/hr)</MudText>
                                </MudItem>
                                <MudItem xs="3">
                                    <MudText Typo="Typo.h5">--:--</MudText>
                                    <MudText Typo="Typo.body2">Est. Complete</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>

                    <!-- Line Items -->
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Line Items (@_workOrder.Items.Count)</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                @foreach (var item in _workOrder.Items)
                                {
                                    <MudPaper Outlined="true" Class="pa-3">
                                        <div class="d-flex justify-space-between">
                                            <div>
                                                <MudText Typo="Typo.body1"><b>@item.Description</b></MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Dark">@item.ItemCode • @item.Width?.ToString("F2") x @item.Length?.ToString("F2")</MudText>
                                            </div>
                                            <MudChip Text="@item.Status.ToString()" Color="@GetStatusColor(item.Status)" />
                                        </div>
                                        <div class="d-flex justify-space-between mt-2">
                                            <MudText>Progress: @(item.ProducedQuantity ?? 0) / @(item.OrderQuantity ?? 0) @item.Unit</MudText>
                                            <MudText>@CalculateItemProgress(item).ToString("F0")%</MudText>
                                        </div>
                                        <MudProgressLinear Color="Color.Secondary" Value="@CalculateItemProgress(item)" Class="my-1" />

                                        @if (_workOrder.Status == WorkOrderStatus.InProgress)
                                        {
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="mt-2">
                                                <MudTextField T="decimal?" Label="Produced Qty" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                              Value="item.ProducedQuantity" ValueChanged="@((decimal? v) => OnProgressChanged(item, v, true))" />
                                                <MudTextField T="decimal?" Label="Produced Wt" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                              Value="item.ProducedWeight" ValueChanged="@((decimal? v) => OnProgressChanged(item, v, false))" />
                                                <MudButton Variant="Variant.Text" OnClick="@(() => { item.Status = WorkOrderItemStatus.Completed; RecalculateProgress(); })">Mark Complete</MudButton>
                                            </MudStack>
                                        }
                                    </MudPaper>
                                }
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudStack>
            </MudItem>

            <MudItem xs="12" md="4">
                <MudStack Spacing="4">
                    <!-- Details -->
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Work Order Details</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudText><b>Sales Order:</b> @_workOrder.Items.FirstOrDefault()?.SalesOrderNumber</MudText>
                            <MudText><b>Customer:</b> @GetMainCustomer(_workOrder)</MudText>
                            <MudText><b>Machine:</b> @_workOrder.Machine?.Name</MudText>
                            <MudText><b>Operator:</b> @_workOrder.Operator</MudText>
                            <MudText><b>Due Date:</b> @_workOrder.DueDate.ToString("yyyy-MM-dd")</MudText>
                        </MudCardContent>
                    </MudCard>

                    <!-- Instructions -->
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Notes & Instructions</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            @if (!string.IsNullOrWhiteSpace(_workOrder.Instructions))
                            {
                                <MudText>@_workOrder.Instructions</MudText>
                            }
                            else
                            {
                                <MudText Color="Color.Dark" Typo="Typo.caption">No instructions provided.</MudText>
                            }
                        </MudCardContent>
                    </MudCard>

                    <!-- Timeline -->
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Timeline</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudTimeline TimelinePosition="TimelinePosition.Left" TimelineVariant="TimelineVariant.Outlined">
                                @foreach(var ev in _events)
                                {
                                    <MudTimelineItem Icon="@GetEventIcon(ev.EventType)" Color="@GetEventColor(ev.EventType)">
                                        <MudText Typo="Typo.body2"><b>@ev.EventType.ToString()</b> by @ev.User?.UserName</MudText>
                                        <MudText Typo="Typo.caption">@ev.Timestamp.ToLocalTime().ToString("g")</MudText>
                                        @if(!string.IsNullOrEmpty(ev.Notes))
                                        {
                                            <MudText Typo="Typo.caption" Style="font-style: italic;">Notes: @ev.Notes</MudText>
                                        }
                                    </MudTimelineItem>
                                }
                            </MudTimeline>
                        </MudCardContent>
                    </MudCard>
                </MudStack>
            </MudItem>
        </MudGrid>
    }
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    private WorkOrder? _workOrder;
    private string? _userId;
    private List<TaskAuditEvent> _events = new();
    private System.Timers.Timer? _timer;
    private TimeSpan _elapsed;
    private string _elapsedTimeDisplay = "00:00:00";
    private double _overallProgress = 0;
    private decimal _lbsPerHour = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        _userId = user?.Id;

        if (_userId == null)
        {
            Snackbar.Add("User not found, cannot process work order.", Severity.Error);
            Navigation.NavigateTo("/operations/workorders");
            return;
        }

        await LoadDataAsync();

        if (_workOrder?.Status == WorkOrderStatus.InProgress)
        {
            StartTimer();
        }
    }

    private async Task LoadDataAsync()
    {
        _workOrder = await WorkOrderService.GetByIdAsync(Id);
        if (_workOrder == null)
        {
            Snackbar.Add("Work Order not found.", Severity.Error);
            Navigation.NavigateTo("/operations/workorders");
            return;
        }
        var events = await AuditEventService.GetEventsForTaskAsync(Id, TaskType.WorkOrder);
        _events = events.OrderByDescending(e => e.Timestamp).ToList();
        RecalculateProgress();
        StateHasChanged();
    }

    private void StartTimer()
    {
        var lastStartEvent = _events
            .Where(e => e.EventType == AuditEventType.Start || e.EventType == AuditEventType.Resume)
            .OrderByDescending(e => e.Timestamp)
            .FirstOrDefault();

        var pauseDuration = _events
            .Where(e => e.EventType == AuditEventType.Pause)
            .Sum(e => (e.Timestamp - (_events.LastOrDefault(ev => ev.Timestamp < e.Timestamp && (ev.EventType == AuditEventType.Start || ev.EventType == AuditEventType.Resume))?.Timestamp ?? e.Timestamp)).TotalSeconds);

        if (lastStartEvent != null)
        {
            _elapsed = DateTime.UtcNow - lastStartEvent.Timestamp;
        }

        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _elapsed = _elapsed.Add(TimeSpan.FromSeconds(1));
        _elapsedTimeDisplay = _elapsed.ToString(@"hh\:mm\:ss");
        RecalculateProgress();
        InvokeAsync(StateHasChanged);
    }

    private void RecalculateProgress()
    {
        if (_workOrder == null) return;
        var totalWeight = GetTotalWeight(_workOrder);
        var producedWeight = _workOrder.Items.Sum(i => i.ProducedWeight ?? 0);
        _overallProgress = totalWeight > 0 ? (double)(producedWeight / totalWeight * 100) : 0;
        _lbsPerHour = _elapsed.TotalHours > 0 ? (producedWeight / (decimal)_elapsed.TotalHours) : 0;
    }

    private double CalculateItemProgress(WorkOrderItem item)
    {
        if (item.OrderQuantity == null || item.OrderQuantity.Value == 0)
        {
            return 0;
        }
        var progress = ((double)(item.ProducedQuantity ?? 0) / (double)item.OrderQuantity.Value) * 100.0;
        return progress > 100 ? 100 : progress;
    }

    private void OnProgressChanged(WorkOrderItem item, decimal? value, bool isQuantity)
    {
        if (isQuantity)
        {
            item.ProducedQuantity = value;
        }
        else
        {
            item.ProducedWeight = value;
        }

        if ((item.ProducedQuantity ?? 0) > 0 || (item.ProducedWeight ?? 0) > 0)
        {
            item.Status = WorkOrderItemStatus.InProgress;
        }

        if (item.OrderQuantity.HasValue && (item.ProducedQuantity ?? 0) >= item.OrderQuantity.Value)
        {
            item.Status = WorkOrderItemStatus.Completed;
        }

        RecalculateProgress();
    }

    private async Task StartOrResumeWorkOrder()
    {
        if (_workOrder == null || _userId == null) return;

        if(_workOrder.Status == WorkOrderStatus.Pending)
        {
            await WorkOrderService.StartWorkOrderAsync(_workOrder.Id, _userId);
        }
        else // Awaiting
        {
            await WorkOrderService.ResumeWorkOrderAsync(_workOrder.Id, _userId);
        }

        await LoadDataAsync();
        StartTimer();
    }

    private async Task PauseWorkOrder()
    {
        if (_workOrder == null || _userId == null) return;

        var dialog = await DialogService.ShowAsync<PauseReasonDialog>("Pause Work Order");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is string reason)
        {
            await WorkOrderService.PauseWorkOrderAsync(_workOrder.Id, _userId, reason);
            _timer?.Stop();
            await LoadDataAsync();
        }
    }

    private async Task CompleteWorkOrder()
    {
        if (_workOrder == null || _userId == null) return;

        var dialog = await DialogService.ShowAsync<CompleteWorkOrderDialog>("Complete Work Order");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await WorkOrderService.CompleteWorkOrderAsync(_workOrder.Id, _userId, _workOrder.Items);
            _timer?.Stop();
            await LoadDataAsync();
        }
    }

    private string GetMainCustomer(WorkOrder order) => order.Items?.FirstOrDefault()?.CustomerName ?? "N/A";
    private decimal GetTotalWeight(WorkOrder order) => order.Items?.Sum(i => i.OrderWeight ?? 0) ?? 0;
    private Color GetStatusColor(WorkOrderStatus status) => status switch { WorkOrderStatus.Draft => Color.Default, WorkOrderStatus.Pending => Color.Info, WorkOrderStatus.InProgress => Color.Success, WorkOrderStatus.Awaiting => Color.Warning, WorkOrderStatus.Completed => Color.Primary, WorkOrderStatus.Canceled => Color.Error, _ => Color.Dark };
    private Color GetStatusColor(WorkOrderItemStatus status) => status switch { WorkOrderItemStatus.Pending => Color.Default, WorkOrderItemStatus.InProgress => Color.Info, WorkOrderItemStatus.Completed => Color.Success, _ => Color.Error };
    private Color GetPriorityColor(WorkOrderPriority priority) => priority switch { WorkOrderPriority.Low => Color.Info, WorkOrderPriority.Normal => Color.Success, WorkOrderPriority.High => Color.Warning, WorkOrderPriority.Urgent => Color.Error, _ => Color.Default };
    private Color GetEventColor(AuditEventType type) => type switch { AuditEventType.Start => Color.Success, AuditEventType.Resume => Color.Success, AuditEventType.Pause => Color.Warning, AuditEventType.Complete => Color.Primary, AuditEventType.Create => Color.Info, _ => Color.Default };
    private string GetEventIcon(AuditEventType type) => type switch { AuditEventType.Start => Icons.Material.Filled.PlayArrow, AuditEventType.Resume => Icons.Material.Filled.PlayArrow, AuditEventType.Pause => Icons.Material.Filled.Pause, AuditEventType.Complete => Icons.Material.Filled.Check, AuditEventType.Create => Icons.Material.Filled.Add, _ => Icons.Material.Filled.Info };

    public void Dispose()
    {
        _timer?.Dispose();
    }
}