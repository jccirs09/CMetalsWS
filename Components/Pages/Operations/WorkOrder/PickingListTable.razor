@using CMetalsWS.Data
@using MudBlazor

<MudPaper Outlined="true" Class="pa-4">
    <MudText Typo="Typo.h6" GutterBottom="true">Picking List</MudText>
    @if (IsLoading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (PickingListItems.Any())
    {
        <MudTable Items="@PickingListItems" Hover="true">
            <HeaderContent>
                <MudTh>Selected</MudTh>
                <MudTh>Customer / SO</MudTh>
                <MudTh>Item</MudTh>
                <MudTh>Total Qty</MudTh>
                <MudTh>Rem. Qty</MudTh>
                <MudTh>Qty to Split</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudCheckBox T="bool" Checked="@(WorkOrderItems.Any(i => i.PickingListItemId == context.Id))" CheckedChanged="@((bool isChecked) => OnPickingLineCheckedChanged.InvokeAsync((context, isChecked)))" />
                </MudTd>
                <MudTd DataLabel="Customer / SO">
                    @context.PickingList?.Customer?.CustomerName<br/>
                    <MudText Typo="Typo.caption">@context.PickingList?.SalesOrderNumber</MudText>
                </MudTd>
                <MudTd DataLabel="Item">@context.ItemDescription</MudTd>
                <MudTd DataLabel="Total Qty">@context.Quantity.ToString("N0")</MudTd>
                <MudTd DataLabel="Rem. Qty">@RemainingQuantities.GetValueOrDefault(context.Id).ToString("N0")</MudTd>
                <MudTd DataLabel="Qty to Split">
                    <MudNumericField T="decimal"
                                     Value="@SplitQuantities.GetValueOrDefault(context.Id)"
                                     ValueChanged="@((val) => OnSplitQuantityChanged.InvokeAsync((context.Id, val)))"
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense"
                                     OnKeyDown="@((e) => OnSplitQtyKeyDown.InvokeAsync((e, context)))" />
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => OnPromptSplit.InvokeAsync(context))">Split</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText>No available orders found for this coil tag.</MudText>
    }
</MudPaper>

@code {
    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public List<PickingListItem> PickingListItems { get; set; } = new();

    [Parameter]
    public List<WorkOrderItem> WorkOrderItems { get; set; } = new();

    [Parameter]
    public Dictionary<int, decimal> RemainingQuantities { get; set; } = new();

    [Parameter]
    public Dictionary<int, decimal> SplitQuantities { get; set; } = new();

    [Parameter]
    public EventCallback<(PickingListItem pli, bool isChecked)> OnPickingLineCheckedChanged { get; set; }

    [Parameter]
    public EventCallback<(int pliId, decimal newValue)> OnSplitQuantityChanged { get; set; }

    [Parameter]
    public EventCallback<(KeyboardEventArgs e, PickingListItem pli)> OnSplitQtyKeyDown { get; set; }

    [Parameter]
    public EventCallback<PickingListItem> OnPromptSplit { get; set; }
}