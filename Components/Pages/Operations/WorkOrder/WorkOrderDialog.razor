@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject InventoryService InvService
@inject ItemRelationshipService RelService
@inject PickingListService PlService

<MudDialog Title="@Title">
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Spacing="3">
                <MudSelect T="int?" Label="Machine" @bind-Value="MachineId" Required="true">
                    @foreach (var m in Machines)
                    {
                        <MudSelectItem T="int?" Value="m.Id">@m.Name (@m.Category)</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="MachineCategory" Label="Category" @bind-Value="Model.MachineCategory" Disabled="true">
                    @foreach (var cat in Enum.GetValues<MachineCategory>())
                    {
                        <MudSelectItem Value="cat">@cat</MudSelectItem>
                    }
                </MudSelect>

                <MudStack Row="true" AlignItems="AlignItems.End">
                    <MudTextField T="string" Label="Tag Number" @bind-Value="Model.TagNumber" Required="true" />
                    <MudButton Variant="Variant.Outlined" OnClick="SearchByTag">Search by Tag</MudButton>
                </MudStack>

                <MudDatePicker Label="Due Date" @bind-Date="DueDateValue" Required="true" />

                <MudTextField T="string" Label="Instructions" @bind-Value="Model.Instructions" Lines="3" />

                <MudDivider />
                <MudText Typo="Typo.h6">Line Items</MudText>

                <MudTable Items="Model.Items" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Item</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>SO #</MudTh>
                        <MudTh>Customer</MudTh>
                        <MudTh>Order Qty or Wt</MudTh>
                        <MudTh>Width</MudTh>
                        @if (Model.MachineCategory == MachineCategory.CTL)
                        {
                            <MudTh>Length</MudTh>
                        }
                        <MudTh>Weight</MudTh>
                        <MudTh>Produced Qty or Wt</MudTh>
                        <MudTh>Location</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><MudTextField T="string" @bind-Value="context.ItemCode" /></MudTd>
                        <MudTd><MudTextField T="string" @bind-Value="context.Description" /></MudTd>
                        <MudTd><MudTextField T="string" @bind-Value="context.SalesOrderNumber" /></MudTd>
                        <MudTd><MudTextField T="string" @bind-Value="context.CustomerName" /></MudTd>
                        <MudTd>
                            @if (Model.MachineCategory == MachineCategory.CTL)
                            {
                                <MudTextField T="decimal?" @bind-Value="context.OrderQuantity" />
                            }
                            else
                            {
                                <MudTextField T="decimal?" @bind-Value="context.OrderWeight" />
                            }
                        </MudTd>
                        <MudTd><MudTextField T="decimal?" @bind-Value="context.Width" /></MudTd>
                        @if (Model.MachineCategory == MachineCategory.CTL)
                        {
                            <MudTd><MudTextField T="decimal?" @bind-Value="context.Length" /></MudTd>
                        }
                        <MudTd><MudTextField T="decimal?" @bind-Value="context.Weight" /></MudTd>
                        <MudTd>
                            @if (Model.MachineCategory == MachineCategory.CTL)
                            {
                                <MudTextField T="decimal?" @bind-Value="context.ProducedQuantity" />
                            }
                            else
                            {
                                <MudTextField T="decimal?" @bind-Value="context.ProducedWeight" />
                            }
                        </MudTd>
                        <MudTd><MudTextField T="string" @bind-Value="context.Location" /></MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveLine(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="1">
                    <MudButton Variant="Variant.Text" OnClick="AddStockLine">Add Stock Line</MudButton>
                    <MudButton Variant="Variant.Text" OnClick="AddReturnLine">Add Return Line</MudButton>
                </MudStack>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public WorkOrder Model { get; set; } = new();
    [Parameter] public List<Machine> Machines { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool IsEdit { get; set; }

    private MudForm? _form;

    private int? MachineId
    {
        get => Model.MachineId;
        set
        {
            Model.MachineId = value;
            SyncCategoryWithMachine();
        }
    }

    private DateTime? DueDateValue
    {
        get => Model.DueDate;
        set => Model.DueDate = value ?? Model.DueDate;
    }

    protected override void OnParametersSet()
    {
        SyncCategoryWithMachine();
    }

    private void SyncCategoryWithMachine()
    {
        var machine = Machines.FirstOrDefault(m => m.Id == Model.MachineId);
        if (machine != null)
            Model.MachineCategory = machine.Category;
    }

    private async Task SearchByTag()
    {
        if (string.IsNullOrWhiteSpace(Model.TagNumber))
        {
            Snackbar.Add("Please enter a Tag Number.", Severity.Warning);
            return;
        }

        try
        {
            var parent = await InvService.GetByTagNumberAsync(Model.TagNumber);
            if (parent is null)
            {
                Snackbar.Add($"Tag '{Model.TagNumber}' not found.", Severity.Error);
                return;
            }

            var (_, children) = await RelService.GetAsync(parent.ItemId);
            if (children.Count == 0)
            {
                Snackbar.Add($"No child items (sheets) are related to the coil with tag '{Model.TagNumber}'. Use the 'Item Relationships' page to add some.", Severity.Info);
                return;
            }

            var childItemIds = children.Select(c => c.childId).ToList();
            var childInventoryItems = (await InvService.GetByItemIdsAsync(childItemIds))
                .ToDictionary(i => i.ItemId);

            Model.Items.Clear();
            foreach (var childRel in children)
            {
                if (childInventoryItems.TryGetValue(childRel.childId, out var childInv))
                {
                    Model.Items.Add(new WorkOrderItem
                    {
                        ItemCode = childInv.ItemId,
                        Description = childInv.Description,
                        Width = childInv.Width,
                        Length = childInv.Length,
                        // Other properties like SalesOrderNumber will be populated from picking lists next
                    });
                }
            }

            Snackbar.Add($"Found {Model.Items.Count} child item(s) for Tag '{Model.TagNumber}'.", Severity.Success);

            // Now, ask the user to select which pending orders to associate
            if (Model.Items.Any())
            {
                var parameters = new DialogParameters
                {
                    ["RequiredItemIds"] = childItemIds
                };
                var dialog = await DialogService.ShowAsync<SelectPickingListDialog>("Select Picking List Items", parameters);
                var result = await dialog.Result;

                if (!result.Canceled && result.Data is List<PickingListItem> selectedPlItems)
                {
                    foreach (var woItem in Model.Items)
                    {
                        var matchingPlItem = selectedPlItems.FirstOrDefault(p => p.ItemId == woItem.ItemCode);
                        if (matchingPlItem != null)
                        {
                            woItem.SalesOrderNumber = matchingPlItem.PickingList.SalesOrderNumber;
                            woItem.CustomerName = matchingPlItem.PickingList.CustomerName;
                            woItem.OrderQuantity = matchingPlItem.Quantity;
                            woItem.OrderWeight = matchingPlItem.Weight;
                        }
                    }
                    Snackbar.Add($"Associated {selectedPlItems.Count} picking list item(s).", Severity.Success);
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Save()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private void AddStockLine()
    {
        Model.Items.Add(new WorkOrderItem
        {
            ItemCode = string.Empty,
            Description = string.Empty
        });
    }

    private void AddReturnLine()
    {
        Model.Items.Add(new WorkOrderItem
        {
            ItemCode = "RETURN",
            Description = "Return to stock",
            OrderQuantity = 0,
            OrderWeight = 0,
            ProducedQuantity = 0,
            ProducedWeight = 0
        });
    }

    private void RemoveLine(WorkOrderItem item)
    {
        Model.Items.Remove(item);
    }
}
