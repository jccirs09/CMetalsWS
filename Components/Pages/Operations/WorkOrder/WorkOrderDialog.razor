@using CMetalsWS.Data
@using CMetalsWS.Services
@using System.Text.RegularExpressions
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject InventoryService InvService
@inject ItemRelationshipService RelService
@inject PickingListService PlService
@inject WorkOrderService WorkOrderService

<MudDialog Title="@Title">
    <DialogContent>
        <MudForm @ref="_form" IsReadOnly="@IsProcessing">
            <MudStack Spacing="3">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudDatePicker Label="Date Issued" Date="Model.CreatedDate" IsReadOnly="true" Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudDatePicker Label="Due Date" @bind-Date="DueDateValue" Required="true" Margin="Margin.Dense" IsReadOnly="@IsProcessing" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="int?" Label="Machine" @bind-Value="MachineId" Required="true" Margin="Margin.Dense" IsReadOnly="@IsProcessing">
                            @foreach (var m in Machines)
                            {
                                <MudSelectItem T="int?" Value="m.Id">@m.Name (@m.Category)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudCard>
                    <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Pull Info</MudText></CardHeaderContent></MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="3"><MudTextField T="string" Label="Parent Tag #" @bind-Value="Model.TagNumber" Required="true" IsReadOnly="@IsProcessing" /></MudItem>
                            <MudItem xs="12" sm="3"><MudButton Variant="Variant.Outlined" OnClick="SearchByTag" Disabled="@(IsEdit || IsProcessing)" FullWidth="true" Class="mt-4">Search by Tag</MudButton></MudItem>
                            <MudItem xs="12" sm="6"><MudText><b>Parent Item ID:</b> @_parentItem?.ItemId</MudText></MudItem>
                            <MudItem xs="12" sm="6"><MudText><b>Description:</b> @_parentItem?.Description</MudText></MudItem>
                            <MudItem xs="12" sm="3"><MudText><b>Weight:</b> @_parentItem?.Snapshot</MudText></MudItem>
                            <MudItem xs="12" sm="3"><MudText><b>Location:</b> @_parentItem?.Location</MudText></MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                @if(_childItems.Any())
                {
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6">Child Item(s)</MudText>
                                    <MudButton Variant="Variant.Text" OnClick="AssociatePickingLists" Disabled="@IsProcessing">Associate Picking Lists</MudButton>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudTable Items="@_childItems" Dense="true" Hover="true">
                                <HeaderContent>
                                    <MudTh>Item Code</MudTh>
                                    <MudTh>Description</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Item Code">@context.ItemId</MudTd>
                                    <MudTd DataLabel="Description">@context.Description</MudTd>
                                    <MudTd>
                                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => AddStockLine(context))" Disabled="@IsProcessing">Add</MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                }

                <MudCard>
                    <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Skid Setups</MudText></CardHeaderContent></MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="Model.Items" Hover="true" Dense="true">
                            <HeaderContent>
                                <MudTh>#</MudTh>
                                <MudTh>Item ID</MudTh>
                                <MudTh>Picking List #</MudTh>
                                <MudTh>Order Qty</MudTh>
                                <MudTh>Width</MudTh>
                                <MudTh>Length</MudTh>
                                <MudTh>Weight</MudTh>
                                <MudTh>Produced Qty</MudTh>
                                <MudTh>Produced Wt</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="#">@(Model.Items.ToList().IndexOf(context) + 1)</MudTd>
                                <MudTd DataLabel="Item ID"><MudTextField Value="context.ItemCode" Margin="Margin.Dense" IsReadOnly="true" /></MudTd>
                                <MudTd DataLabel="Picking List #"><MudTextField Value="context.SalesOrderNumber" Margin="Margin.Dense" IsReadOnly="true" /></MudTd>
                                <MudTd DataLabel="Order Qty"><MudTextField Value="context.OrderQuantity" ValueChanged="@((decimal? v) => { context.OrderQuantity = v; RecalculateWeight(context); })" Margin="Margin.Dense" IsReadOnly="@(!context.IsStockItem)" /></MudTd>
                                <MudTd DataLabel="Width"><MudTextField Value="context.Width" Margin="Margin.Dense" IsReadOnly="true" /></MudTd>
                                <MudTd DataLabel="Length"><MudTextField Value="context.Length" Margin="Margin.Dense" IsReadOnly="true" /></MudTd>
                                <MudTd DataLabel="Weight"><MudTextField Value="context.OrderWeight" Margin="Margin.Dense" IsReadOnly="@context.IsStockItem" /></MudTd>
                                <MudTd DataLabel="Produced Qty"><MudTextField @bind-Value="context.ProducedQuantity" Margin="Margin.Dense" IsReadOnly="@(!IsProcessing)" /></MudTd>
                                <MudTd DataLabel="Produced Wt"><MudTextField @bind-Value="context.ProducedWeight" Margin="Margin.Dense" IsReadOnly="@(!IsProcessing)" /></MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveLine(context))" Disabled="@IsProcessing" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>

                <MudStack Row="true" Justify="Justify.FlexEnd">
                    <MudButton Variant="Variant.Text" OnClick="AddReturnCoil" Disabled="@(IsProcessing || _parentItem is null)">Add Return Coil</MudButton>
                </MudStack>

                <MudTextField T="string" Label="Instructions" @bind-Value="Model.Instructions" Lines="3" IsReadOnly="@IsProcessing" />

                @if(Model.Items.Any(i => i.PickingListItemId.HasValue))
                {
                    <MudCard>
                        <MudCardHeader><CardHeaderContent><MudText Typo="Typo.h6">Ship-To Info</MudText></CardHeaderContent></MudCardHeader>
                        <MudCardContent>
                            <MudTable Items="@(Model.Items.Where(i => i.PickingListItemId.HasValue).GroupBy(i => i.PickingListItemId).Select(g => g.First()).ToList())" Dense="true" Hover="true">
                                <HeaderContent>
                                    <MudTh>Picking List #</MudTh>
                                    <MudTh>Customer</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Picking List #">@context.SalesOrderNumber</MudTd>
                                    <MudTd DataLabel="Customer">@context.CustomerName</MudTd>
                                    <MudTd>
                                        <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => AddMoreLineFromPL(context))" Disabled="@IsProcessing">Add More</MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                }

            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        @if (IsProcessing)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="MarkComplete">Mark as Complete</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter] public WorkOrder Model { get; set; } = new();
    [Parameter] public List<Machine> Machines { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public bool IsProcessing { get; set; }

    private MudForm? _form;
    private InventoryItem? _parentItem;
    private List<InventoryItem> _childItems = new();

    private int? MachineId
    {
        get => Model.MachineId;
        set
        {
            Model.MachineId = value;
            SyncCategoryWithMachine();
        }
    }

    private DateTime? DueDateValue
    {
        get => Model.DueDate;
        set => Model.DueDate = value ?? Model.DueDate;
    }

    protected override async Task OnParametersSetAsync()
    {
        SyncCategoryWithMachine();
        if (IsEdit || IsProcessing)
        {
            await SearchByTag();
        }
    }

    private void SyncCategoryWithMachine()
    {
        var machine = Machines.FirstOrDefault(m => m.Id == Model.MachineId);
        if (machine != null)
            Model.MachineCategory = machine.Category;
    }

    private async Task SearchByTag()
    {
        if (string.IsNullOrWhiteSpace(Model.TagNumber))
        {
            Snackbar.Add("Please enter a Tag Number.", Severity.Warning);
            return;
        }

        try
        {
            _parentItem = await InvService.GetByTagNumberAsync(Model.TagNumber);
            if (_parentItem is null)
            {
                Snackbar.Add($"Tag '{Model.TagNumber}' not found.", Severity.Error);
                return;
            }
            Model.ParentItemId = _parentItem.ItemId;

            var children = await RelService.GetAsync(_parentItem.ItemId);
            if (children.Count == 0)
            {
                Snackbar.Add($"No child items (sheets) are related to the coil with tag '{Model.TagNumber}'. Use the 'Item Relationships' page to add some.", Severity.Info);
                return;
            }

            _childItems.Clear();
            _childItems = children.Select(c => new InventoryItem { ItemId = c.ChildItemId, Description = c.ChildItemDescription }).ToList();
            Snackbar.Add($"Found {_childItems.Count} potential child item(s).", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task AssociatePickingLists()
    {
        var childItemIds = _childItems.Select(c => c.ItemId).ToList();
        if(!childItemIds.Any())
        {
            Snackbar.Add("No child items to associate.", Severity.Info);
            return;
        }

        var parameters = new DialogParameters
        {
            ["RequiredItemIds"] = childItemIds
        };
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<SelectPickingListDialog>("Select Picking List Items", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is List<PickingListItem> selectedPlItems)
        {
            Model.Items.Clear(); // Start fresh
            foreach (var selectedItem in selectedPlItems)
            {
                Model.Items.Add(new WorkOrderItem
                {
                    PickingListItemId = selectedItem.Id,
                    SalesOrderNumber = selectedItem.PickingList?.SalesOrderNumber,
                    CustomerName = selectedItem.PickingList?.CustomerName,
                    ItemCode = selectedItem.ItemId,
                    Description = selectedItem.ItemDescription,
                    Width = selectedItem.Width,
                    Length = selectedItem.Length,
                    OrderWeight = selectedItem.Weight,
                    OrderQuantity = selectedItem.Quantity
                });
            }
            Snackbar.Add($"Associated {selectedPlItems.Count} picking list item(s).", Severity.Success);
            StateHasChanged();
        }
    }

    private void AddStockLine(InventoryItem child)
    {
        if (child is null) return;
        var orderQty = 1;
        var weight = CalculateWeight(child.Description ?? "", child.Width, child.Length, orderQty);

        Model.Items.Add(new WorkOrderItem
        {
            ItemCode = child.ItemId,
            Description = child.Description,
            Width = child.Width,
            Length = child.Length,
            OrderQuantity = orderQty,
            OrderWeight = weight,
            IsStockItem = true
        });
    }

    private void AddReturnCoil()
    {
        if (_parentItem is null) return;
        Model.Items.Add(new WorkOrderItem
        {
            ItemCode = _parentItem.ItemId,
            Description = "Return to stock",
            ProducedWeight = _parentItem.Snapshot
        });
    }

    private void AddMoreLineFromPL(WorkOrderItem itemToCopy)
    {
        Model.Items.Add(new WorkOrderItem
        {
            PickingListItemId = itemToCopy.PickingListItemId,
            SalesOrderNumber = itemToCopy.SalesOrderNumber,
            CustomerName = itemToCopy.CustomerName,
            ItemCode = itemToCopy.ItemCode,
            Description = itemToCopy.Description,
            Width = itemToCopy.Width,
            Length = itemToCopy.Length,
            OrderWeight = itemToCopy.OrderWeight,
            OrderQuantity = itemToCopy.OrderQuantity
        });
    }

    private static decimal? CalculateWeight(string description, decimal? width, decimal? length, int orderQty)
    {
        if (width is null || length is null) return null;
        var gauge = ParseGauge(description);
        if (gauge is null) return null;
        var key = (gauge.Value, (int)width.Value, (int)length.Value);
        if (SheetWeightLookup.TryGetValue(key, out var lbsPerSheet))
        {
            return lbsPerSheet * orderQty;
        }
        return null;
    }

    private void RecalculateWeight(WorkOrderItem item)
    {
        if (!item.IsStockItem) return;

        var qty = item.OrderQuantity ?? 0;
        item.OrderWeight = CalculateWeight(item.Description, item.Width, item.Length, (int)qty);
    }

    private static double? ParseGauge(string description)
    {
        var match = Regex.Match(description, @"\((?<gauge>\.\d+)\)");
        if (match.Success && double.TryParse(match.Groups["gauge"].Value, out var gauge))
        {
            return gauge;
        }
        return null;
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Save()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private void RemoveLine(WorkOrderItem item)
    {
        Model.Items.Remove(item);
    }

    private async Task MarkComplete()
    {
        var user = (await AuthState).User;
        var updatedBy = user.Identity?.Name ?? "Unknown";
        await WorkOrderService.MarkWorkOrderCompleteAsync(Model, updatedBy);
        Snackbar.Add("Work Order marked as complete.", Severity.Success);
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private static readonly Dictionary<(double gauge, int width, int length), decimal> SheetWeightLookup = new()
    {
        { (0.014, 36, 96), 14.35m }, { (0.014, 36, 120), 17.85m }, { (0.014, 48, 96), 19.00m }, { (0.014, 48, 120), 23.85m },
        { (0.015, 36, 96), 15.75m }, { (0.015, 36, 120), 19.75m }, { (0.015, 48, 96), 21.00m }, { (0.015, 48, 120), 26.25m },
        { (0.018, 36, 96), 18.75m }, { (0.018, 36, 120), 23.45m }, { (0.018, 48, 96), 25.05m }, { (0.018, 48, 120), 31.25m },
        { (0.020, 36, 96), 21.75m }, { (0.020, 36, 120), 27.25m }, { (0.020, 48, 96), 29.05m }, { (0.020, 48, 120), 36.25m },
        { (0.024, 36, 96), 27.75m }, { (0.024, 36, 120), 34.75m }, { (0.024, 48, 96), 37.05m }, { (0.024, 48, 120), 46.25m },
        { (0.030, 48, 96), 45.05m }, { (0.030, 48, 120), 56.25m },
        { (0.038, 48, 96), 53.05m }, { (0.038, 48, 120), 66.25m },
        { (0.047, 48, 96), 69.05m }, { (0.047, 48, 120), 86.25m },
        { (0.059, 48, 96), 85.05m }, { (0.059, 48, 120), 106.25m },
        { (0.075, 48, 96), 105.05m }, { (0.075, 48, 120), 131.25m },
        { (0.104, 48, 96), 145.00m }, { (0.104, 48, 120), 181.25m },
        { (0.135, 48, 96), 185.00m }, { (0.135, 48, 120), 231.25m }
    };
}
