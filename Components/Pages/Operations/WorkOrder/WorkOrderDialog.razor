@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject InventoryService InvService
@inject ItemRelationshipService RelService
@inject PickingListService PlService

<MudDialog title="@Title">
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Spacing="3">
                <MudGrid>
                    <MudItem xs="12" sm="6" md="4">
                        <MudDatePicker Label="Date Issued" Date="Model.DateIssued" IsReadOnly="true" Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudDatePicker Label="Due Date" @bind-Date="DueDateValue" Required="true" Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect T="int?" Label="Machine" @bind-Value="MachineId" Required="true" Margin="Margin.Dense">
                            @foreach (var m in Machines)
                            {
                                <MudSelectItem T="int?" Value="m.Id">@m.Name (@m.Category)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Pull Info</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudTextField T="string" Label="Parent Tag #" @bind-Value="Model.TagNumber" Required="true" />
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudButton Variant="Variant.Outlined" OnClick="SearchByTag" Disabled="@IsEdit" FullWidth="true" Class="mt-4">Search by Tag</MudButton>
                            </MudItem>
                             <MudItem xs="12" sm="4">
                                <MudTextField T="string" Label="Parent Item ID" @bind-Value="Model.ParentItemId" IsReadOnly="true" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Skid Setups</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="Model.Items" Hover="true" Dense="true">
                            <HeaderContent>
                                <MudTh>Action</MudTh>
                                <MudTh>Child Tag</MudTh>
                                <MudTh>Item ID</MudTh>
                                <MudTh>Width</MudTh>
                                <MudTh>Length</MudTh>
                                <MudTh>Pieces</MudTh>
                                <MudTh>Weight</MudTh>
                                <MudTh></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Action"><MudTextField @bind-Value="context.Action" Margin="Margin.Dense"/></MudTd>
                                <MudTd DataLabel="Child Tag"><MudTextField @bind-Value="context.ChildTag" Margin="Margin.Dense"/></MudTd>
                                <MudTd DataLabel="Item ID"><MudTextField @bind-Value="context.ItemCode" Margin="Margin.Dense"/></MudTd>
                                <MudTd DataLabel="Width"><MudTextField @bind-Value="context.Width" Margin="Margin.Dense"/></MudTd>
                                <MudTd DataLabel="Length"><MudTextField @bind-Value="context.Length" Margin="Margin.Dense"/></MudTd>
                                <MudTd DataLabel="Pieces"><MudTextField @bind-Value="context.OrderQuantity" Margin="Margin.Dense"/></MudTd>
                                <MudTd DataLabel="Weight"><MudTextField @bind-Value="context.Weight" Margin="Margin.Dense"/></MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveLine(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>

                <MudTextField T="string" Label="Instructions" @bind-Value="Model.Instructions" Lines="3" />

            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public WorkOrder Model { get; set; } = new();
    [Parameter] public List<Machine> Machines { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool IsEdit { get; set; }

    private MudForm? _form;

    private int? MachineId
    {
        get => Model.MachineId;
        set
        {
            Model.MachineId = value;
            SyncCategoryWithMachine();
        }
    }

    private DateTime? DueDateValue
    {
        get => Model.DueDate;
        set => Model.DueDate = value ?? Model.DueDate;
    }

    protected override void OnParametersSet()
    {
        SyncCategoryWithMachine();
    }

    private void SyncCategoryWithMachine()
    {
        var machine = Machines.FirstOrDefault(m => m.Id == Model.MachineId);
        if (machine != null)
            Model.MachineCategory = machine.Category;
    }

    private async Task SearchByTag()
    {
        if (string.IsNullOrWhiteSpace(Model.TagNumber))
        {
            Snackbar.Add("Please enter a Tag Number.", Severity.Warning);
            return;
        }

        try
        {
            var parent = await InvService.GetByTagNumberAsync(Model.TagNumber);
            if (parent is null)
            {
                Snackbar.Add($"Tag '{Model.TagNumber}' not found.", Severity.Error);
                return;
            }

            var children = await RelService.GetAsync(parent.ItemId);
            if (children.Count == 0)
            {
                Snackbar.Add($"No child items (sheets) are related to the coil with tag '{Model.TagNumber}'. Use the 'Item Relationships' page to add some.", Severity.Info);
                return;
            }

            // Automatically add child items to the work order
            Model.Items.Clear();
            var childItemIds = new List<string>();
            foreach (var childRel in children)
            {
                var childInv = await InvService.GetByItemIdsAsync(new List<string> { childRel.ChildItemId });
                if (childInv.Any())
                {
                     Model.Items.Add(new WorkOrderItem
                    {
                        ItemCode = childInv.First().ItemId,
                        Description = childInv.First().Description,
                        Width = childInv.First().Width,
                        Length = childInv.First().Length,
                        Weight = childInv.First().Snapshot
                    });
                    childItemIds.Add(childRel.ChildItemId);
                }
            }
            Snackbar.Add($"Automatically added {Model.Items.Count} child item(s).", Severity.Success);
            StateHasChanged();

            // Automatically open the picking list dialog
            var parameters = new DialogParameters
            {
                ["RequiredItemIds"] = childItemIds
            };
            var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
            var dialog = await DialogService.ShowAsync<SelectPickingListDialog>("Select Picking List Items", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data is List<PickingListItem> selectedPlItems)
            {
                foreach (var woItem in Model.Items)
                {
                    var matchingPlItem = selectedPlItems.FirstOrDefault(p => p.ItemId == woItem.ItemCode);
                    if (matchingPlItem != null)
                    {
                        woItem.PickingListItemId = matchingPlItem.Id;
                        woItem.SalesOrderNumber = matchingPlItem.PickingList.SalesOrderNumber;
                        woItem.CustomerName = matchingPlItem.PickingList.CustomerName;
                        woItem.OrderQuantity = matchingPlItem.Quantity;
                        woItem.OrderWeight = matchingPlItem.Weight;
                    }
                }
                Snackbar.Add($"Associated {selectedPlItems.Count} picking list item(s).", Severity.Success);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Save()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private void RemoveLine(WorkOrderItem item)
    {
        Model.Items.Remove(item);
    }
}
