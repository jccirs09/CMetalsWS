@using CMetalsWS.Data
@using CMetalsWS.Services
@inject PickingListService PlService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Select Pending Picking List Items</MudText>
    </TitleContent>
    <DialogContent>
        @if (!_groupedItems.Any())
        {
            <MudText>No pending picking list items found for the required materials.</MudText>
        }
        else
        {
            <MudStack Spacing="3">
                @foreach (var group in _groupedItems)
                {
                    <MudPaper Outlined="true" Class="pa-3">
                        <MudText Typo="Typo.subtitle1">Required Item: <b>@group.Key</b></MudText>
                        <MudList T="PickingListItem" Clickable="true" Dense="true">
                            @foreach (var item in group.Value)
                            {
                                <MudListItem T="PickingListItem" OnClick="@(() => ToggleSelection(item))">
                                    <ChildContent>
                                        <MudCheckBox T="bool" Checked="@_selectedItems.Contains(item)" ReadOnly="true" />
                                        <MudText><b>SO:</b> @item.PickingList.SalesOrderNumber | <b>Customer:</b> @item.PickingList.CustomerName | <b>Qty:</b> @item.Quantity @item.Unit</MudText>
                                    </ChildContent>
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                }
            </MudStack>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Select</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public List<string> RequiredItemIds { get; set; } = new();

    private Dictionary<string, List<PickingListItem>> _groupedItems = new();
    private HashSet<PickingListItem> _selectedItems = new();

    protected override async Task OnInitializedAsync()
    {
        var items = await PlService.GetPendingItemsByItemIdsAsync(RequiredItemIds);
        _groupedItems = items.GroupBy(i => i.ItemId).ToDictionary(g => g.Key, g => g.ToList());
    }

    private void ToggleSelection(PickingListItem item)
    {
        if (_selectedItems.Contains(item))
        {
            _selectedItems.Remove(item);
        }
        else
        {
            _selectedItems.Add(item);
        }
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(_selectedItems.ToList()));
    private void Cancel() => MudDialog.Cancel();
}
