@page "/operations/item-relations"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@attribute [Authorize(Policy = Permissions.WorkOrders.Edit)]
@inject ItemRelationshipService ItemService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Master Item List</PageTitle>

<MudPaper Class="p-4">
    <MudTable ServerData="@(new Func<TableState, Task<TableData<ItemRelationship>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table"
              Striped="true" Bordered="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Master Item List</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Immediate="true"
                          OnAdornmentClick="@(()=>table.ReloadServerData())"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="item_code" T="ItemRelationship">Item Code</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="description" T="ItemRelationship">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="coil_relationship" T="ItemRelationship">Coil Relationship</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Item Code">@context.ItemCode</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Coil Relationship">@context.CoilRelationship</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <NoRecordsContent>
            <MudText>No matching items found.</MudText>
        </NoRecordsContent>
    </MudTable>
</MudPaper>

@code {
    private MudTable<ItemRelationship> table = new();
    private string _searchString = "";

    private async Task<TableData<ItemRelationship>> ServerReload(TableState state)
    {
        try
        {
            var (items, total) = await ItemService.GetAllAsync(_searchString, state.Page + 1, state.PageSize, state.SortLabel, state.SortDirection);
            return new TableData<ItemRelationship>() { TotalItems = total, Items = items };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
            return new TableData<ItemRelationship>() { TotalItems = 0, Items = new List<ItemRelationship>() };
        }
    }
}
