@page "/operations/pulling"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using System.Security.Claims
@using CMetalsWS.Components.Pages.Operations.Pickinglist.Dialogs
@using Microsoft.AspNetCore.SignalR.Client
@attribute [Authorize(Policy = CMetalsWS.Security.Permissions.PickingLists.View)]

@inject PickingListService PickingListService
@inject BranchService BranchService
@inject TruckService TruckService
@inject MachineService MachineService
@inject CustomerService CustomerService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IAuthorizationService AuthorizationService
@inject ITaskAuditEventService AuditService
@inject UserService UserService
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<MudTabs Elevation="2" Rounded="true" Centered="true">
    <MudTabPanel Text="Picking List Grid View">
        <MudPaper Class="p-4">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">Picking Lists</MudText>
                <AuthorizeView Policy="@Permissions.PickingLists.Add">
                    <Authorized Context="authAdd">
                        <MudStack Row="true">
                            <MudButton Color="Color.Primary"
                                       Variant="Variant.Outlined"
                                       StartIcon="@Icons.Material.Filled.UploadFile"
                                       Href="/picking-lists/upload">
                                Upload PDF
                            </MudButton>
                            <MudButton Color="Color.Primary"
                                       Variant="Variant.Filled"
                                       StartIcon="@Icons.Material.Filled.Add"
                                       OnClick="pl_Add">
                                New
                            </MudButton>
                        </MudStack>
                    </Authorized>
                </AuthorizeView>
            </MudStack>

            <MudTextField @bind-Value="pl_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-4"></MudTextField>

            <MudTable Items="pl_lists" Hover="true" Dense="true" Context="pickingList" Filter="new Func<PickingList, bool>(pl_FilterFunc)">
                <HeaderContent>
                    <MudTh>SalesOrderNumber</MudTh>
                    <MudTh>Customer Name</MudTh>
                    <MudTh>Total Line Items</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Ship Date</MudTh>
                    <MudTh Class="text-right">Total Weight</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="SalesOrderNumber">
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Class="px-0"
                                   OnClick="@(async () => await pl_View(pickingList))"
                                   title="View Picking List">
                            @pickingList.SalesOrderNumber
                        </MudButton>
                    </MudTd>
                    <MudTd DataLabel="Customer Name">@pickingList.Customer?.CustomerName</MudTd>
                    <MudTd DataLabel="Total Line Items">@pickingList.Items.Count()</MudTd>
                    <MudTd DataLabel="Status">
                        @if (pl_canEditInline)
                        {
                            <MudSelect T="PickingListStatus" Value="pickingList.Status" ValueChanged="@((PickingListStatus newStatus) => pl_OnStatusChanged(pickingList, newStatus))" Dense="true" Margin="Margin.Dense">
                                @foreach (var status in Enum.GetValues<PickingListStatus>())
                                {
                                    <MudSelectItem T="PickingListStatus" Value="@status">@status.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else
                        {
                            @pickingList.Status
                        }
                    </MudTd>
                    <MudTd DataLabel="Ship Date">
                        @if (pl_canEditInline)
                        {
                            <MudDatePicker Date="pickingList.ShipDate" DateChanged="@((DateTime? newDate) => pl_OnShipDateChanged(pickingList, newDate))" Editable="true" Dense="true" Margin="Margin.Dense" />
                        }
                        else
                        {
                            @pickingList.ShipDate?.ToString("yyyy-MM-dd")
                        }
                    </MudTd>
                    <MudTd DataLabel="Total Weight" Class="text-right">@pickingList.TotalWeight.ToString("N3")</MudTd>
                    <MudTd DataLabel="Actions">
                        @if (pl_canEdit)
                        {
                            <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Edit" title="Edit" OnClick="@(async () => await pl_Edit(pickingList))" />
                        }
                        @if (pl_canDelete)
                        {
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" title="Delete" OnClick="@(async () => await pl_Delete(pickingList))" />
                        }
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No picking lists found.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
    </MudTabPanel>
    <MudTabPanel Text="Picking List Card View">
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <MudGrid Spacing="3">
                @foreach (var list in pl_lists)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@list.SalesOrderNumber</MudText>
                                    <MudText Typo="Typo.subtitle2">@list.Customer?.CustomerName</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudChip T="string" Color="@(GetPriorityColor(list.Priority))" Size="Size.Small">@list.Priority.ToString()</MudChip>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small">@list.Status.ToString()</MudChip>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText><strong>Destination:</strong> @list.DestinationRegion?.Name</MudText>
                                <MudText><strong>Due Date:</strong> @list.ShipDate?.ToString("yyyy-MM-dd")</MudText>
                                <MudText><strong>Total Weight:</strong> @list.TotalWeight.ToString("N3")</MudText>
                                <MudText><strong>Line Items:</strong> @list.Items.Count()</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await pl_View(list))">View</MudButton>
                                @if (pl_canEdit)
                                {
                                    <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Edit" title="Edit" OnClick="@(async () => await pl_Edit(list))" />
                                }
                                @if (pl_canDelete)
                                {
                                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" title="Delete" OnClick="@(async () => await pl_Delete(list))" />
                                }
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Picking Process">
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <MudGrid Spacing="3">
                @foreach (var list in pp_pickingLists)
                {
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@list.SalesOrderNumber - Picking Process</MudText>
                                    <MudText Typo="Typo.subtitle2">@list.Customer?.CustomerName</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudChip T="string" Color="@(GetPriorityColor(list.Priority))" Size="Size.Small">@list.Priority.ToString()</MudChip>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small">@list.Status.ToString()</MudChip>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudProgressLinear Value="GetPickingProgress(list)" Color="Color.Primary" />
                                <MudList T="PickingListItem">
                                    @foreach (var item in list.Items)
                                    {
                                        <MudListItem T="PickingListItem">
                                            <div class="d-flex justify-space-between align-center" style="width: 100%">
                                                <div>
                                                    <MudText>@item.ItemDescription</MudText>
                                                    <MudText Typo="Typo.body2">Qty: @item.Quantity, Weight: @item.Weight</MudText>
                                                </div>
                                                <div>
                                                    @if (item.Status == PickingLineStatus.Pending)
                                                    {
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => pp_HandleItemAuditEvent(item, AuditEventType.Start))">Start Pick</MudButton>
                                                    }
                                                    else if (item.Status == PickingLineStatus.InProgress)
                                                    {
                                                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="@(() => pp_HandleItemAuditEvent(item, AuditEventType.Pause))">Pause</MudButton>
                                                        <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@(() => pp_CompleteItem(item))">Complete</MudButton>
                                                    }
                                                    else if (item.Status == PickingLineStatus.Awaiting)
                                                    {
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => pp_HandleItemAuditEvent(item, AuditEventType.Resume))">Resume</MudButton>
                                                    }
                                                </div>
                                            </div>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="@(() => pp_PauseList(list))">Pause List</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Success" Disabled="@(GetPickingProgress(list) < 100)" OnClick="@(() => pp_CompletePicking(list))">Complete Picking</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Packing Process">
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            <MudGrid Spacing="3">
                @foreach (var list in pack_pickingLists)
                {
                    <MudItem xs="12">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@list.SalesOrderNumber - Packing Process</MudText>
                                    <MudText Typo="Typo.subtitle2">@list.Customer?.CustomerName</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudChip T="string" Color="@(GetPriorityColor(list.Priority))" Size="Size.Small">@list.Priority.ToString()</MudChip>
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small">@list.Status.ToString()</MudChip>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudProgressLinear Value="GetPackingProgress(list)" Color="Color.Info" />
                                <MudList T="PickingListItem">
                                    @foreach (var item in list.Items)
                                    {
                                        <MudListItem T="PickingListItem">
                                            <div class="d-flex justify-space-between align-center" style="width: 100%">
                                                <div>
                                                    <MudText>@item.ItemDescription</MudText>
                                                    <MudText Typo="Typo.body2">Qty: @item.Quantity, Weight: @item.Weight</MudText>
                                                </div>
                                                <div>
                                                    @if (item.Status == PickingLineStatus.Completed)
                                                    {
                                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@(() => pack_StartPackingItem(item))">Start Pack</MudButton>
                                                    }
                                                    else if (item.Status == PickingLineStatus.Packing)
                                                    {
                                                        <MudButton Variant="Variant.Filled" Color="Color.Success" Size="Size.Small" OnClick="@(() => pack_CompletePackingItem(item))">Complete Pack</MudButton>
                                                    }
                                                </div>
                                            </div>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Success" Disabled="@(GetPackingProgress(list) < 100)" OnClick="@(() => pack_CompletePacking(list))">Complete Packing</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudTabPanel>
</MudTabs>

@code {
    // Shared
    private ApplicationUser? _user;
    private HubConnection? _hubConnection;

    // Picking Lists
    private List<PickingList> pl_lists = new();
    private string pl_searchString = "";
    private bool pl_isAdmin;
    private int? pl_userBranchId;
    private Branch? pl_userBranch;
    private bool pl_canEdit;
    private bool pl_canDelete;
    private bool pl_canEditInline;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            _user = await UserManager.GetUserAsync(user);
        }

        // Picking Lists
        pl_canEdit = (await AuthorizationService.AuthorizeAsync(user, Permissions.PickingLists.Edit)).Succeeded;
        pl_canDelete = (await AuthorizationService.AuthorizeAsync(user, Permissions.PickingLists.Delete)).Succeeded;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            pl_canEditInline = user.IsInRole("Planner") ||
                             user.IsInRole("Supervisor") ||
                             user.IsInRole("Manager") ||
                             user.IsInRole("Admin");
        }
        await pl_LoadUserContextAsync();
        await pl_LoadAsync();

        // SignalR
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/schedule"))
            .Build();

        _hubConnection.On<int>("PickingListUpdated", async (id) =>
        {
            await pl_LoadAsync();
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    // Picking Lists Methods
    private bool pl_FilterFunc(PickingList list)
    {
        if (string.IsNullOrWhiteSpace(pl_searchString))
            return true;
        if (list.SalesOrderNumber.Contains(pl_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (list.Customer?.CustomerName?.Contains(pl_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return false;
    }

    private async Task pl_LoadUserContextAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        pl_isAdmin = principal.IsInRole("Admin");

        var appUser = await UserManager.GetUserAsync(principal);
        pl_userBranchId = appUser?.BranchId;
        if (pl_userBranchId.HasValue)
        {
            var allBranches = await BranchService.GetBranchesAsync();
            pl_userBranch = allBranches.FirstOrDefault(b => b.Id == pl_userBranchId.Value);
        }
    }

    private async Task pl_LoadAsync()
    {
        pl_lists = await PickingListService.GetAsync(pl_isAdmin ? null : pl_userBranchId);
        StateHasChanged();
    }

    private async Task pl_View(PickingList src)
    {
        var branches = await BranchService.GetBranchesAsync();
        var trucks = await TruckService.GetTrucksAsync();
        var machines = await MachineService.GetMachinesAsync();

        if (!pl_isAdmin && pl_userBranchId.HasValue)
        {
            branches = branches.Where(b => b.Id == pl_userBranchId.Value).ToList();
            trucks = trucks.Where(t => t.BranchId == pl_userBranchId.Value).ToList();
            machines = machines.Where(m => m.BranchId == pl_userBranchId.Value).ToList();
        }

        var model = pl_Clone(src);

        var parameters = new DialogParameters
        {
            ["Model"] = model,
            ["Branches"] = branches,
            ["Trucks"] = trucks,
            ["Machines"] = machines,
            ["IsEdit"] = true,
            ["Title"] = "Picking List Details",
            ["LockBranch"] = !pl_isAdmin,
            ["CurrentBranch"] = pl_userBranch
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, FullScreen = true };
        var dialogRef = await DialogService.ShowAsync<PickingListDialog>("Picking List Details", parameters, options);
        await dialogRef.Result;
    }

    private async Task pl_Add()
    {
        var branches = await BranchService.GetBranchesAsync();
        var trucks = await TruckService.GetTrucksAsync();
        var machines = await MachineService.GetMachinesAsync();

        if (!pl_isAdmin && pl_userBranchId.HasValue)
        {
            branches = branches.Where(b => b.Id == pl_userBranchId.Value).ToList();
            trucks = trucks.Where(t => t.BranchId == pl_userBranchId.Value).ToList();
            machines = machines.Where(m => m.BranchId == pl_userBranchId.Value).ToList();
        }

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        if (user == null)
        {
            Snackbar.Add("You must be logged in to create a picking list.", Severity.Error);
            return;
        }

        var model = new PickingList
        {
            SalesOrderNumber = string.Empty,
            Status = PickingListStatus.Pending,
            BranchId = (!pl_isAdmin && pl_userBranchId.HasValue) ? pl_userBranchId.Value : (branches.FirstOrDefault()?.Id ?? 0),
            ScannedById = user.Id,
            ScannedDate = DateTime.UtcNow,
            ModifiedById = user.Id,
            ModifiedDate = DateTime.UtcNow
        };

        var parameters = new DialogParameters
        {
            ["Model"] = model,
            ["Branches"] = branches,
            ["Trucks"] = trucks,
            ["Machines"] = machines,
            ["IsEdit"] = false,
            ["Title"] = "New Picking List",
            ["LockBranch"] = !pl_isAdmin,
            ["CurrentBranch"] = pl_userBranch
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, FullScreen = true };
        var dialogRef = await DialogService.ShowAsync<PickingListDialog>("New Picking List", parameters, options);
        if (dialogRef is null) return;

        var result = await dialogRef.Result;
        if (result is null || result.Canceled) return;

        if (result.Data is PickingList saved)
        {
            await PickingListService.CreateAsync(saved);
            Snackbar.Add("Picking list created.", Severity.Success);
            await pl_LoadAsync();
        }
    }

    private async Task pl_Edit(PickingList src)
    {
        var branches = await BranchService.GetBranchesAsync();
        var trucks = await TruckService.GetTrucksAsync();
        var machines = await MachineService.GetMachinesAsync();

        if (!pl_isAdmin && pl_userBranchId.HasValue)
        {
            branches = branches.Where(b => b.Id == pl_userBranchId.Value).ToList();
            trucks = trucks.Where(t => t.BranchId == pl_userBranchId.Value).ToList();
            machines = machines.Where(m => m.BranchId == pl_userBranchId.Value).ToList();
        }

        if (!pl_isAdmin && pl_userBranchId.HasValue && src.BranchId != pl_userBranchId.Value)
        {
            Snackbar.Add("You do not have access to this picking list.", Severity.Warning);
            return;
        }

        var model = pl_Clone(src);

        var parameters = new DialogParameters
        {
            ["Model"] = model,
            ["Branches"] = branches,
            ["Trucks"] = trucks,
            ["Machines"] = machines,
            ["IsEdit"] = true,
            ["Title"] = "Edit Picking List",
            ["LockBranch"] = !pl_isAdmin,
            ["CurrentBranch"] = pl_userBranch
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, FullScreen = true };
        var dialogRef = await DialogService.ShowAsync<PickingListDialog>("Edit Picking List", parameters, options);
        if (dialogRef is null) return;

        var result = await dialogRef.Result;
        if (result is null || result.Canceled) return;

        if (result.Data is PickingList updated)
        {
            if (!pl_isAdmin && pl_userBranchId.HasValue)
                updated.BranchId = pl_userBranchId.Value;

            await PickingListService.UpdateAsync(updated);
            Snackbar.Add("Picking list updated.", Severity.Success);
            await pl_LoadAsync();
        }
    }

    private async Task pl_Delete(PickingList pl)
    {
        if (!pl_isAdmin && pl_userBranchId.HasValue && pl.BranchId != pl_userBranchId.Value)
        {
            Snackbar.Add("You do not have access to delete this picking list.", Severity.Warning);
            return;
        }

        bool? confirm = await DialogService.ShowMessageBox("Delete Confirmation", $"Delete SO '{pl.SalesOrderNumber}'?", yesText: "Delete", cancelText: "Cancel");
        if (confirm == true)
        {
            await PickingListService.DeleteAsync(pl.Id);
            Snackbar.Add("Picking list deleted.", Severity.Success);
            await pl_LoadAsync();
        }
    }

    private static PickingList pl_Clone(PickingList src) =>
        new()
        {
            Id = src.Id,
            SalesOrderNumber = src.SalesOrderNumber,
            BranchId = src.BranchId,
            CustomerId = src.CustomerId,
            Customer = src.Customer,
            Status = src.Status,
            TotalWeight = src.TotalWeight,
            RemainingWeight = src.RemainingWeight,
            ScannedById = src.ScannedById,
            ScannedDate = src.ScannedDate,
            ModifiedById = src.ModifiedById,
            ModifiedDate = src.ModifiedDate,
            Items = src.Items.Select(i => new PickingListItem
            {
                Id = i.Id,
                PickingListId = src.Id,
                LineNumber = i.LineNumber,
                ItemId = i.ItemId,
                ItemDescription = i.ItemDescription,
                Quantity = i.Quantity,
                Unit = i.Unit,
                Width = i.Width,
                Length = i.Length,
                Weight = i.Weight,
                MachineId = i.MachineId,
                Status = i.Status
            }).OrderBy(i => i.LineNumber).ToList()
        };

    private async Task pl_OnStatusChanged(PickingList list, PickingListStatus newStatus)
    {
        list.Status = newStatus;
        await PickingListService.UpdateAsync(list);
        Snackbar.Add($"Status for SO #{list.SalesOrderNumber} updated.", Severity.Success);
    }

    private async Task pl_OnShipDateChanged(PickingList list, DateTime? newDate)
    {
        list.ShipDate = newDate;
        await PickingListService.UpdateAsync(list);
        Snackbar.Add($"Ship Date for SO #{list.SalesOrderNumber} updated.", Severity.Success);
    }

    private async Task pl_OnPriorityChanged(PickingList list, int newPriority)
    {
        list.Priority = newPriority;
        await PickingListService.UpdateAsync(list);
        Snackbar.Add($"Priority for SO #{list.SalesOrderNumber} updated.", Severity.Success);
        await pl_LoadAsync();
    }

    private Color GetPriorityColor(int priority)
    {
        return priority switch
        {
            1 => Color.Error,
            2 => Color.Warning,
            3 => Color.Info,
            _ => Color.Default,
        };
    }

    // Picking Process Methods
    private List<PickingList> pp_pickingLists => pl_lists.Where(l => l.Status == PickingListStatus.Pending || l.Status == PickingListStatus.InProgress).ToList();

    private double GetPickingProgress(PickingList list)
    {
        if (list.Items == null || !list.Items.Any())
            return 0;

        var pickedItems = list.Items.Count(i => i.Status == PickingLineStatus.Completed);
        return (double)pickedItems / list.Items.Count() * 100;
    }

    // Packing Process Methods
    private List<PickingList> pack_pickingLists => pl_lists.Where(l => l.Status == PickingListStatus.Picked || l.Status == PickingListStatus.Packing).ToList();

    private double GetPackingProgress(PickingList list)
    {
        if (list.Items == null || !list.Items.Any())
            return 0;

        var packedItems = list.Items.Count(i => i.Status == PickingLineStatus.Packed);
        return (double)packedItems / list.Items.Count() * 100;
    }

    private async Task pp_HandleItemAuditEvent(PickingListItem item, AuditEventType eventType)
    {
        if (_user is null)
        {
            Snackbar.Add("Could not identify user. Action aborted.", Severity.Error);
            return;
        }

        await AuditService.CreateAuditEventAsync(item.Id, TaskType.Pulling, eventType, _user.Id);

        var status = eventType switch
        {
            AuditEventType.Start => PickingLineStatus.InProgress,
            AuditEventType.Pause => PickingLineStatus.Awaiting,
            AuditEventType.Resume => PickingLineStatus.InProgress,
            _ => item.Status
        };

        await PickingListService.SetLineStatusAsync(item.Id, status);
        await pl_LoadAsync(); // Reload all data
    }

    private async Task pp_CompleteItem(PickingListItem item)
    {
        var parameters = new DialogParameters { ["Item"] = item };
        var options = new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var dialog = await DialogService.ShowAsync<PullingTaskDetailDialog>("Process Task", parameters, options);
        if (dialog is null) return;

        var result = await dialog.Result;

        if (result is not null && !result.Canceled && result.Data is ValueTuple<decimal?, decimal?> data)
        {
            await PickingListService.UpdatePulledQuantitiesAsync(item.Id, data.Item1, data.Item2 ?? 0);
            await pp_HandleItemAuditEvent(item, AuditEventType.Complete);
            await PickingListService.SetLineStatusAsync(item.Id, PickingLineStatus.Completed);
            await pl_LoadAsync(); // Refresh the list
        }
    }

    private async Task pp_PauseList(PickingList list)
    {
        foreach (var item in list.Items.Where(i => i.Status == PickingLineStatus.InProgress))
        {
            await pp_HandleItemAuditEvent(item, AuditEventType.Pause);
        }
    }

    private async Task pp_CompletePicking(PickingList list)
    {
        var listToUpdate = await PickingListService.GetByIdAsync(list.Id);
        if (listToUpdate != null)
        {
            listToUpdate.Status = PickingListStatus.Picked;
            await PickingListService.UpdateAsync(listToUpdate);
            await pl_LoadAsync();
        }
    }

    // Packing Process Methods
    private async Task pack_StartPackingItem(PickingListItem item)
    {
        await PickingListService.SetLineStatusAsync(item.Id, PickingLineStatus.Packing);
        await pl_LoadAsync();
    }

    private async Task pack_CompletePackingItem(PickingListItem item)
    {
        await PickingListService.SetLineStatusAsync(item.Id, PickingLineStatus.Packed);
        await pl_LoadAsync();
    }

    private async Task pack_CompletePacking(PickingList list)
    {
        var listToUpdate = await PickingListService.GetByIdAsync(list.Id);
        if (listToUpdate != null)
        {
            listToUpdate.Status = PickingListStatus.Completed;
            await PickingListService.UpdateAsync(listToUpdate);
            await pl_LoadAsync();
        }
    }


}
