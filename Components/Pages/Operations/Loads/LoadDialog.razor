@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@using Microsoft.AspNetCore.Components

@inject TruckService TruckService
@inject PickingListService PickingListService

<MudDialog Title="Load">
    <DialogContent>
        <MudForm @ref="_form">
            <MudStack Spacing="3">
                <MudTextField Label="Load Number" Value="@Model.LoadNumber" Disabled="true" />

                <MudDatePicker Label="Shipping Date" @bind-Date="ShippingDateProxy" Required="true" />

                <MudSelect T="int?" Label="Truck" @bind-Value="Model.TruckId" Required="true">
                    @foreach (var t in _trucks)
                    {
                        <MudSelectItem Value="@t.Id">@t.Description</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="LoadStatus" Label="Status" @bind-Value="Model.Status">
                    @foreach (var st in Enum.GetValues<LoadStatus>())
                    {
                        <MudSelectItem Value="st">@st</MudSelectItem>
                    }
                </MudSelect>

                <MudDivider />
                <MudText Typo="Typo.h6">Load Items</MudText>
                <MudTable Items="Model.Items" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Stop</MudTh>
                        <MudTh>Picking List</MudTh>
                        <MudTh>Shipped Weight</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd><MudNumericField T="int" @bind-Value="context.StopSequence" /></MudTd>
                        <MudTd>
                            <MudSelect T="int" @bind-Value="context.PickingListId">
                                @foreach (var pl in _pickingLists)
                                {
                                    <MudSelectItem Value="pl.Id">@pl.SalesOrderNumber - @pl.Customer?.CustomerName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudTd>
                        <MudTd><MudTextField T="decimal" @bind-Value="context.ShippedWeight" /></MudTd>
                    </RowTemplate>
                </MudTable>
                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="1">
                    <MudButton Variant="Variant.Text" OnClick="AddItem">Add Load Item</MudButton>
                </MudStack>
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public Load Model { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }

    private MudForm? _form;
    private List<Truck> _trucks = new();
    private List<PickingList> _pickingLists = new();

    private DateTime? ShippingDateProxy
    {
        get => Model.ShippingDate;
        set => Model.ShippingDate = value ?? Model.ShippingDate;
    }

    protected override async Task OnInitializedAsync()
    {
        _trucks = await TruckService.GetTrucksAsync();
        _pickingLists = await PickingListService.GetAsync(null);
    }

    private void AddItem()
    {
        Model.Items.Add(new LoadItem
        {
            PickingListId = _pickingLists.FirstOrDefault()?.Id ?? 0,
            ShippedWeight = 0,
            StopSequence = (Model.Items.Count > 0 ? Model.Items.Max(i => i.StopSequence) : 0) + 1
        });
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Save()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid) return;
        }
        MudDialog.Close(DialogResult.Ok(Model));
    }
}
