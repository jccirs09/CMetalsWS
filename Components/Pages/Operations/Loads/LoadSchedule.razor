@page "/schedule/loads"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using CMetalsWS.Security
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize(Policy = Permissions.PickingLists.ManageLoads)]

@inject LoadService LoadService
@inject TruckService TruckService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IAuthorizationService AuthorizationService

<MudPaper Class="p-4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5">Load (Shipping) Schedule</MudText>
        <MudTable Items="_loads" Hover="true" Dense="true" Class="mt-4" Context="load">
            <HeaderContent>
                <MudTh>Load #</MudTh>
                <MudTh>Truck</MudTh>
                <MudTh>Scheduled</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@load.LoadNumber</MudTd>
                <MudTd>@load.Truck?.Description</MudTd>
                <MudTd>@($"{load.ShippingDate:yyyy-MM-dd}")</MudTd>
                <MudTd>@load.Status</MudTd>
                <MudTd>
                    @if (_canManageLoads)
                    {
                        <MudButton Variant="Variant.Text" OnClick="@(async () => await EditLoad(load))">Edit</MudButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

        <AuthorizeView Policy="@Permissions.PickingLists.ManageLoads">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateLoad">New Load</MudButton>
        </AuthorizeView>
    </MudStack>

</MudPaper>

@code {
    private List<Load> _loads = new();
    private bool _isAdmin;
    private int? _branchId;
    private bool _canManageLoads;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _isAdmin = user.IsInRole("Admin");
        _canManageLoads = (await AuthorizationService.AuthorizeAsync(user, Permissions.PickingLists.ManageLoads)).Succeeded;
        var branches = await BranchService.GetBranchesAsync();
        _branchId = _isAdmin ? null : branches.FirstOrDefault()?.Id;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _loads = await LoadService.GetLoadsAsync(_branchId);
    }

    private async Task CreateLoad()
    {
        var load = new Load
        {
            OriginBranchId = _branchId ?? 0,
            ShippingDate = DateTime.UtcNow.Date
        };

        var dlg = await DialogService.ShowAsync<LoadDialog>("New Load", new DialogParameters
        {
            ["Model"] = load,
            ["IsEdit"] = false
        }, new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true });

        if (dlg is null) return;

        var result = await dlg.Result;
        if (result is not null && !result.Canceled && result.Data is Load saved)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                Snackbar.Add("User is not authenticated.", Severity.Error);
                return;
            }
            var userId = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("Could not retrieve user ID.", Severity.Error);
                return;
            }
            await LoadService.CreateAsync(saved, userId);
            Snackbar.Add("Load created.", Severity.Success);
            await LoadAsync();
        }
    }

    private async Task EditLoad(Load load)
    {
        var clone = await LoadService.GetByIdAsync(load.Id);
        if (clone == null) return;

        var dlg = await DialogService.ShowAsync<LoadDialog>("Edit Load", new DialogParameters
        {
            ["Model"] = clone,
            ["IsEdit"] = true
        }, new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true });

        if (dlg is null) return;

        var result = await dlg.Result;
        if (result is not null && !result.Canceled && result.Data is Load updated)
        {
            await LoadService.UpdateAsync(updated);
            Snackbar.Add("Load updated.", Severity.Success);
            await LoadAsync();
        }
    }


}