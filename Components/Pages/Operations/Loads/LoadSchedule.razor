@page "/schedule/loads"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@inject LoadService LoadService
@inject TruckService TruckService
@inject BranchService BranchService
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudStack Spacing="3">
        <MudText Typo="Typo.h5">Load (Shipping) Schedule</MudText>

        <MudTable Items="_loads" Hover="true" Dense="true" Class="mt-4">
            <HeaderContent>
                <MudTh>Load #</MudTh>
                <MudTh>Truck</MudTh>
                <MudTh>Scheduled</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.LoadNumber</MudTd>
                <MudTd>@context.Truck?.Name</MudTd>
                <MudTd>@context.ScheduledDate.ToString("yyyy-MM-dd")</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Text" OnClick="@(() => EditLoad(context))">Edit</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateLoad">New Load</MudButton>
    </MudStack>
</MudPaper>

@code {
    private List<Load> _loads = new();
    private bool _isAdmin;
    private int? _branchId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _isAdmin = user.IsInRole("Admin");
        var branches = await BranchService.GetBranchesAsync();
        _branchId = _isAdmin ? null : branches.FirstOrDefault()?.Id;
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _loads = await LoadService.GetLoadsAsync(_branchId);
    }

    private async Task CreateLoad()
    {
        var load = new Load
        {
            BranchId = _branchId ?? 0,
            ScheduledDate = DateTime.UtcNow.Date
        };

        var dlg = DialogService.Show<LoadDialog>("New Load", new DialogParameters
        {
            ["Model"] = load,
            ["IsEdit"] = false
        }, new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true });

        var result = await dlg.Result;
        if (!result.Canceled && result.Data is Load saved)
        {
            await LoadService.CreateAsync(saved);
            Snackbar.Add("Load created.", Severity.Success);
            await LoadAsync();
        }
    }

    private async Task EditLoad(Load load)
    {
        var clone = await LoadService.GetByIdAsync(load.Id);
        if (clone == null) return;

        var dlg = DialogService.Show<LoadDialog>("Edit Load", new DialogParameters
        {
            ["Model"] = clone,
            ["IsEdit"] = true
        }, new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true });

        var result = await dlg.Result;
        if (!result.Canceled && result.Data is Load updated)
        {
            await LoadService.UpdateAsync(updated);
            Snackbar.Add("Load updated.", Severity.Success);
            await LoadAsync();
        }
    }
}
