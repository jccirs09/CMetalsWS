@page "/users"
@using CMetalsWS.Data
@using CMetalsWS.Services
@using MudBlazor
@attribute [Authorize(Roles = "Admin")]

@inject UserService UserService
@inject BranchService BranchService
@inject IDialogService DialogService

<MudPaper Class="p-4">
    <MudText Typo="Typo.h5">Users</MudText>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddUser">Add User</MudButton>
    <MudTable Items="users" Hover="true">
        <HeaderContent>
            <MudTh>User Name</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Branch</MudTh>
            <MudTh>Roles</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="User Name">@context.UserName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Branch">@context.Branch?.Name</MudTd>
            <MudTd DataLabel="Roles">@string.Join(", ", roleDict.TryGetValue(context.Id, out var r) ? r : new List<string>())</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => EditUser(context))" />
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteUser(context))" />
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<ApplicationUser> users = new();
    private readonly Dictionary<string, List<string>> roleDict = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        users = await UserService.GetUsersAsync();
        roleDict.Clear();
        foreach (var user in users)
        {
            var roles = await UserService.GetRolesForUserAsync(user);
            roleDict[user.Id] = roles;
        }
        StateHasChanged();
    }

    private async Task AddUser()
    {
        var branches = await BranchService.GetBranchesAsync();
        var roles = UserService.GetAllRoles();

        var parameters = new DialogParameters
        {
            ["UserModel"] = new ApplicationUser(),
            ["Roles"] = roles,
            ["Branches"] = branches,
            ["IsEdit"] = false,
            ["Title"] = "Add User"
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialogRef = DialogService.Show<UserDialog>("Add User", parameters, options);
        var result = await dialogRef.Result;

        if (result.Data is UserDialogResult dto)
        {
            var create = await UserService.CreateUserAsync(dto.User, dto.Password ?? string.Empty, dto.Roles);
            if (create.Succeeded)
                await LoadUsersAsync();
            // optionally handle errors with a snackbar
        }
    }

    private async Task EditUser(ApplicationUser user)
    {
        var branches = await BranchService.GetBranchesAsync();
        var allRoles = UserService.GetAllRoles();
        var userRoles = await UserService.GetRolesForUserAsync(user);

        var clone = new ApplicationUser
        {
            Id = user.Id,
            UserName = user.UserName,
            Email = user.Email,
            FirstName = user.FirstName,
            LastName = user.LastName,
            BranchId = user.BranchId
        };

        var parameters = new DialogParameters
        {
            ["UserModel"] = clone,
            ["Roles"] = allRoles,
            ["SelectedRoles"] = userRoles,
            ["Branches"] = branches,
            ["IsEdit"] = true,
            ["Title"] = "Edit User"
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialogRef = DialogService.Show<UserDialog>("Edit User", parameters, options);
        var result = await dialogRef.Result;

        if (result.Data is UserDialogResult dto)
        {
            await UserService.UpdateUserAsync(dto.User, dto.Roles);
            await LoadUsersAsync();
        }
    }

    private async Task DeleteUser(ApplicationUser user)
    {
        bool? confirm = await DialogService.ShowMessageBox(
            "Delete Confirmation",
            $"Delete user '{user.UserName}'?",
            yesText: "Delete", cancelText: "Cancel");

        if (confirm == true)
        {
            await UserService.DeleteUserAsync(user.Id);
            await LoadUsersAsync();
        }
    }
}
