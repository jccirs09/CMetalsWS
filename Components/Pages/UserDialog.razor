@using CMetalsWS.Data
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Class="pa-4" Elevation="0">
            <MudForm Model="@UserModel" @ref="form">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="UserModel.UserName" Label="User Name" Required="true"></MudTextField>
                    <MudTextField @bind-Value="UserModel.Email" Label="Email" Required="true"></MudTextField>
                    <MudTextField @bind-Value="UserModel.FirstName" Label="First Name"></MudTextField>
                    <MudTextField @bind-Value="UserModel.LastName" Label="Last Name"></MudTextField>

                    <!-- Branch dropdown -->
                    <MudSelect T="int?" Label="Branch" @bind-Value="UserModel.BranchId">
                        <MudSelectItem Value="@((int?)null)" Disabled="true">Select Branch</MudSelectItem>
                        @foreach (var b in Branches)
                        {
                            <MudSelectItem Value="@b.Id">@b.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <!-- Roles multi-select -->
                    <MudSelect T="string" Label="Roles" @bind-SelectedValues="SelectedRolesInternal" MultiSelection="true">
                        @foreach (var role in Roles)
                        {
                            <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                        }
                    </MudSelect>

                    @if (!IsEdit)
                    {
                        <MudTextField T="string" Label="Password" @bind-Value="Password" InputType="InputType.Password" Required="true"></MudTextField>
                        <MudTextField T="string" Label="Confirm Password" @bind-Value="ConfirmPassword" InputType="InputType.Password" Required="true"></MudTextField>
                    }
                </MudStack>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudSpacer />
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public ApplicationUser UserModel { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public List<ApplicationRole> Roles { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    [Parameter] public IEnumerable<string> SelectedRoles { get; set; } = new List<string>();

    private MudForm form;
    private string Password { get; set; } = "";
    private string ConfirmPassword { get; set; } = "";

    [CascadingParameter] public IMudDialogInstance Dialog { get; set; } = default!;

    private IEnumerable<string> SelectedRolesInternal
    {
        get => SelectedRoles;
        set => SelectedRoles = value;
    }

    private async Task Save()
    {
        await form.Validate();
        if (!form.IsValid) return;

        if (!IsEdit)
        {
            if (Password != ConfirmPassword) return;
            Dialog.Close(DialogResult.Ok<(ApplicationUser, string?, IEnumerable<string>)>((UserModel, Password, SelectedRolesInternal)));
        }
        else
        {
            Dialog.Close(DialogResult.Ok<(ApplicationUser, string?, IEnumerable<string>)>((UserModel, null, SelectedRolesInternal)));
        }
    }

    private void Cancel() => Dialog.Cancel();
}
