@page "/dashboard"
@using CMetalsWS.Models
@using CMetalsWS.Security
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client
@inject DashboardService DashboardService
@inject ILogger<Dashboard> Logger
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@attribute [Authorize(Policy = Permissions.Dashboards.View)]

<MudText Typo="Typo.h5" Class="mb-4">Now Playing - Pulling</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">Current picking and packing sessions</MudText>

@if (_machineStatus is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_machineStatus.Any())
{
    @foreach (var machine in _machineStatus)
    {
        <MudText Typo="Typo.h6" Class="mt-4">@machine.MachineName</MudText>
        <MudText Typo="Typo.subtitle2" Class="mb-2">
            Total Assigned: @machine.TotalAssignedItems line items, @machine.TotalAssignedWeight.ToString("N0") lbs
        </MudText>

        @if (machine.InProgressOrders.Any())
        {
            <MudGrid Spacing="2">
                @foreach (var item in machine.InProgressOrders)
                {
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-4">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.h6">@item.SalesOrderNumber</MudText>
                                </MudItem>
                                <MudItem xs="6" Class="d-flex justify-end">
                                    <MudChip T="string" Color="Color.Primary">@item.Status</MudChip>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.body2">Customer</MudText>
                                    <MudText Typo="Typo.body1"><b>@item.CustomerName</b></MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.body2">Items</MudText>
                                    <MudText Typo="Typo.body1"><b>@item.LineItems line items</b></MudText>
                                </MudItem>
                            </MudGrid>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.body2">Weight</MudText>
                                    <MudText Typo="Typo.body1"><b>@item.TotalWeight.ToString("N0") lbs</b></MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.body2">Operator</MudText>
                                    <MudText Typo="Typo.body1"><b>@item.OperatorName</b></MudText>
                                </MudItem>
                            </MudGrid>
                            <MudProgressLinear Color="Color.Primary" Value="@item.Progress" Class="my-2" />
                            <MudText Align="Align.End">@item.Progress%</MudText>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        }
        else
        {
            <MudText Class="mt-2">No active pulling sessions for this machine.</MudText>
        }
    }
}
else
{
    <MudText>No assigned sheet pulling tasks found.</MudText>
}


@code {
    private List<MachinePullingStatusDto> _machineStatus;
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/dashboard"))
            .Build();

        _hubConnection.On("DashboardUpdated", async () =>
        {
            await LoadDataAsync();
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            _machineStatus = await DashboardService.GetMachinePullingStatusAsync(null);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching machine pulling status data");
            _machineStatus = new List<MachinePullingStatusDto>();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
