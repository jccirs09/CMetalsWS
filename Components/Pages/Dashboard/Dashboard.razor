@page "/dashboard"
@using CMetalsWS.Models
@using CMetalsWS.Security
@using Microsoft.Extensions.Logging
@inject DashboardService DashboardService
@inject ILogger<Dashboard> Logger
@attribute [Authorize(Policy = Permissions.Dashboards.View)]

<MudText Typo="Typo.h5" Class="mb-4">Now Playing - Pulling</MudText>
<MudText Typo="Typo.subtitle1" Class="mb-4">Current picking and packing sessions</MudText>

@if (_groupedNowPlaying is null)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (_groupedNowPlaying.Any())
{
    @foreach (var group in _groupedNowPlaying)
    {
        <MudText Typo="Typo.h6" Class="mt-4">@group.Key</MudText>
        <MudText Typo="Typo.subtitle2" Class="mb-2">@($"Total Weight: {group.Value.Sum(x => x.TotalWeight).ToString("N0")} lbs")</MudText>
        <MudGrid Spacing={2}>
            @foreach (var item in group.Value)
            {
                <MudItem xs="12" sm="6">
                    <MudPaper Class="pa-4">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.h6">@item.SalesOrderNumber</MudText>
                            </MudItem>
                            <MudItem xs="6" Class="d-flex justify-end">
                                <MudChip T="string" Color="Color.Primary">@item.Status</MudChip>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2">Customer</MudText>
                                <MudText Typo="Typo.body1"><b>@item.CustomerName</b></MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2">Items</MudText>
                                <MudText Typo="Typo.body1"><b>@item.LineItems line items</b></MudText>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2">Weight</MudText>
                                <MudText Typo="Typo.body1"><b>@item.TotalWeight.ToString("N0") lbs</b></MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2">Operator</MudText>
                                <MudText Typo="Typo.body1"><b>@item.OperatorName</b></MudText>
                            </MudItem>
                        </MudGrid>
                        <MudProgressLinear Color="Color.Primary" Value="@item.Progress" Class="my-2" />
                        <MudText Align="Align.End">@item.Progress%</MudText>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
}
else
{
    <MudText>No active pulling sessions.</MudText>
}


@code {
    private Dictionary<string, List<NowPlayingDto>> _groupedNowPlaying;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var nowPlaying = await DashboardService.GetNowPlayingAsync(null);
            _groupedNowPlaying = nowPlaying.GroupBy(x => x.MachineName).ToDictionary(g => g.Key, g => g.ToList());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching now playing data");
            _groupedNowPlaying = new Dictionary<string, List<NowPlayingDto>>();
        }
    }
}
